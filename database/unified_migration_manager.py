"""
Production-ready —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è Telegram Channel Finder Bot
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É AdminMigrations –∏ MigrationManager
"""
import asyncio
import logging
import os
from datetime import datetime
from typing import Dict, List, Optional, Set, Tuple, Any
from pathlib import Path
import hashlib
import json

from database.db_adapter import DatabaseAdapter

logger = logging.getLogger(__name__)


class UnifiedMigrationManager:
    """
    Production-ready –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
    - PostgreSQL –∏ SQLite
    - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy AdminMigrations
    - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å—Ö–µ–º—ã
    """
    
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.db_type = 'postgresql' if database_url.startswith('postgresql') else 'sqlite'
        
    async def fix_schema_migrations_table(self) -> bool:
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É schema_migrations –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        —Å –æ–±–µ–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–∏–≥—Ä–∞—Ü–∏–π
        """
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            current_columns = await self._get_table_columns(adapter, 'schema_migrations')
            
            if not current_columns:
                # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º unified –≤–µ—Ä—Å–∏—é
                await self._create_unified_migrations_table(adapter)
                logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ unified —Ç–∞–±–ª–∏—Ü–∞ schema_migrations")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = {'version', 'migration_name', 'description', 'applied_at'}
            existing_columns = {col['name'] for col in current_columns}
            missing_columns = required_columns - existing_columns
            
            if missing_columns:
                logger.info(f"üîß –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
                await self._add_missing_columns(adapter, missing_columns)
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            await self._migrate_existing_data(adapter)
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ schema_migrations —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False
        finally:
            await adapter.disconnect()
    
    async def _get_table_columns(self, adapter: DatabaseAdapter, table_name: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if self.db_type == 'sqlite':
                query = f"PRAGMA table_info({table_name})"
                result = await adapter.fetch_all(query)
                return [{'name': row[1], 'type': row[2]} for row in result] if result else []
            else:  # PostgreSQL
                query = """
                    SELECT column_name as name, data_type as type 
                    FROM information_schema.columns 
                    WHERE table_name = $1
                """
                result = await adapter.fetch_all(query, (table_name,))
                return [{'name': row[0], 'type': row[1]} for row in result] if result else []
        except Exception:
            return []
    
    async def _create_unified_migrations_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞–µ—Ç unified —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π"""
        if self.db_type == 'sqlite':
            query = """
                CREATE TABLE IF NOT EXISTS schema_migrations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    version VARCHAR(255) UNIQUE NOT NULL,
                    migration_name TEXT UNIQUE NOT NULL,
                    description TEXT NOT NULL,
                    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    checksum VARCHAR(64),
                    execution_time_ms INTEGER DEFAULT 0
                )
            """
        else:  # PostgreSQL
            query = """
                CREATE TABLE IF NOT EXISTS schema_migrations (
                    id SERIAL PRIMARY KEY,
                    version VARCHAR(255) UNIQUE NOT NULL,
                    migration_name TEXT UNIQUE NOT NULL,
                    description TEXT NOT NULL,
                    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    checksum VARCHAR(64),
                    execution_time_ms INTEGER DEFAULT 0
                )
            """
        
        await adapter.execute(query)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_migrations_version ON schema_migrations(version)",
            "CREATE INDEX IF NOT EXISTS idx_migrations_name ON schema_migrations(migration_name)"
        ]
        
        for index_query in indexes:
            try:
                await adapter.execute(index_query)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å: {e}")
    
    async def _add_missing_columns(self, adapter: DatabaseAdapter, missing_columns: Set[str]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        column_definitions = {
            'migration_name': 'TEXT',
            'version': 'VARCHAR(255)',
            'description': 'TEXT',
            'applied_at': 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP',
            'checksum': 'VARCHAR(64)',
            'execution_time_ms': 'INTEGER DEFAULT 0'
        }
        
        for column in missing_columns:
            if column in column_definitions:
                try:
                    if self.db_type == 'sqlite':
                        query = f"ALTER TABLE schema_migrations ADD COLUMN {column} {column_definitions[column]}"
                    else:  # PostgreSQL
                        query = f"ALTER TABLE schema_migrations ADD COLUMN IF NOT EXISTS {column} {column_definitions[column]}"
                    
                    await adapter.execute(query)
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É {column}: {e}")
    
    async def _migrate_existing_data(self, adapter: DatabaseAdapter):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ migration_name
            if self.db_type == 'sqlite':
                update_query = """
                    UPDATE schema_migrations 
                    SET migration_name = COALESCE(migration_name, 'legacy_' || COALESCE(version, id)),
                        version = COALESCE(version, 'v' || id),
                        description = COALESCE(description, 'Legacy migration')
                    WHERE migration_name IS NULL OR migration_name = ''
                """
            else:  # PostgreSQL
                update_query = """
                    UPDATE schema_migrations 
                    SET migration_name = COALESCE(migration_name, 'legacy_' || COALESCE(version, id::text)),
                        version = COALESCE(version, 'v' || id::text),
                        description = COALESCE(description, 'Legacy migration')
                    WHERE migration_name IS NULL OR migration_name = ''
                """
            
            await adapter.execute(update_query)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ version
            if self.db_type == 'sqlite':
                update_version_query = """
                    UPDATE schema_migrations 
                    SET version = COALESCE(version, migration_name)
                    WHERE version IS NULL OR version = ''
                """
            else:  # PostgreSQL
                update_version_query = """
                    UPDATE schema_migrations 
                    SET version = COALESCE(version, migration_name)
                    WHERE version IS NULL OR version = ''
                """
            
            await adapter.execute(update_version_query)
            
            logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {e}")
    
    async def run_admin_migrations_fix(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ —Å unified —Å–∏—Å—Ç–µ–º–æ–π
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
            await self.fix_schema_migrations_table()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω –º–∏–≥—Ä–∞—Ü–∏–∏
            from database.admin_migrations import AdminMigrations
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é AdminMigrations
            admin_migrations = AdminMigrations()
            
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å unified —Ç–∞–±–ª–∏—Ü–µ–π
            await self._run_unified_admin_migrations(admin_migrations)
            
            logger.info("‚úÖ –ê–¥–º–∏–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å unified —Å–∏—Å—Ç–µ–º–æ–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False
    
    async def _run_unified_admin_migrations(self, admin_migrations):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥–º–∏–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ —Å unified —Å–∏—Å—Ç–µ–º–æ–π"""
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
            migrations = [
                ('create_admin_users_table', admin_migrations._create_admin_users_table),
                ('create_roles_table', admin_migrations._create_roles_table),
                ('create_message_templates_table', admin_migrations._create_message_templates_table),
                ('create_scheduled_broadcasts_table', admin_migrations._create_scheduled_broadcasts_table),
                ('create_audit_logs_table', admin_migrations._create_audit_logs_table),
                ('create_ab_tests_table', admin_migrations._create_ab_tests_table),
                ('create_broadcast_logs_table', admin_migrations._create_broadcast_logs_table),
                ('extend_users_table', admin_migrations._extend_users_table),
                ('extend_broadcasts_table', admin_migrations._extend_broadcasts_table),
                ('add_status_to_broadcasts', admin_migrations._add_status_to_broadcasts),
                ('add_title_to_broadcasts', admin_migrations._add_title_to_broadcasts),
                ('insert_default_roles', admin_migrations._insert_default_roles),
                ('create_default_admin_user', admin_migrations._create_default_admin_user),
                ('add_telegram_user_roles', admin_migrations._add_telegram_user_roles),
                ('assign_default_telegram_roles', admin_migrations._assign_default_telegram_roles)
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            executed_migrations = await self._get_executed_migrations(adapter)
            
            migrations_executed = 0
            for migration_name, migration_func in migrations:
                if migration_name not in executed_migrations:
                    try:
                        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
                        await self._execute_adapted_migration(adapter, migration_func, migration_name)
                        await self._mark_migration_executed(adapter, migration_name)
                        logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        migrations_executed += 1
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ {migration_name}: {e}")
            
            logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {migrations_executed} –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π")
            
        finally:
            await adapter.disconnect()
    
    async def _get_executed_migrations(self, adapter: DatabaseAdapter) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            query = "SELECT migration_name FROM schema_migrations"
            result = await adapter.fetch_all(query)
            return {row[0] for row in result} if result else set()
        except Exception:
            return set()
    
    async def _mark_migration_executed(self, adapter: DatabaseAdapter, migration_name: str):
        """–û—Ç–º–µ—á–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        try:
            if self.db_type == 'sqlite':
                query = """
                    INSERT OR IGNORE INTO schema_migrations 
                    (version, migration_name, description) 
                    VALUES (?, ?, ?)
                """
                params = (migration_name, migration_name, f"Admin migration: {migration_name}")
            else:  # PostgreSQL
                query = """
                    INSERT INTO schema_migrations 
                    (version, migration_name, description) 
                    VALUES ($1, $2, $3)
                    ON CONFLICT (migration_name) DO NOTHING
                """
                params = (migration_name, migration_name, f"Admin migration: {migration_name}")
            
            await adapter.execute(query, params)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é {migration_name}: {e}")
    
    async def _execute_adapted_migration(self, adapter: DatabaseAdapter, migration_func, migration_name: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª—è PostgreSQL"""
        # –î–ª—è PostgreSQL –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å SQLite-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if self.db_type == 'postgresql':
            # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SQLite API
            class PostgreSQLAdapter:
                def __init__(self, adapter):
                    self.adapter = adapter
                
                async def execute(self, query, params=None):
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º SQLite –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è PostgreSQL
                    adapted_query = self._adapt_query(query)
                    return await self.adapter.execute(adapted_query, params)
                
                async def commit(self):
                    # PostgreSQL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–∏—Ç–∏—Ç
                    pass
                
                def _adapt_query(self, query):
                    # –ë–∞–∑–æ–≤—ã–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ SQLite -> PostgreSQL
                    adaptations = {
                        'INTEGER PRIMARY KEY AUTOINCREMENT': 'SERIAL PRIMARY KEY',
                        'BOOLEAN DEFAULT TRUE': 'BOOLEAN DEFAULT TRUE',
                        'BOOLEAN DEFAULT FALSE': 'BOOLEAN DEFAULT FALSE',
                        'TEXT': 'TEXT',
                        'INTEGER': 'INTEGER',
                        'TIMESTAMP DEFAULT CURRENT_TIMESTAMP': 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP'
                    }
                    
                    adapted = query
                    for sqlite_syntax, postgres_syntax in adaptations.items():
                        adapted = adapted.replace(sqlite_syntax, postgres_syntax)
                    
                    return adapted
            
            pg_adapter = PostgreSQLAdapter(adapter)
            await migration_func(pg_adapter)
        else:
            # –î–ª—è SQLite –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            # –ù–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –æ–±—ä–µ–∫—Ç
            class SQLiteAdapter:
                def __init__(self, adapter):
                    self.adapter = adapter
                
                async def execute(self, query, params=None):
                    return await self.adapter.execute(query, params)
                
                async def commit(self):
                    pass
            
            sqlite_adapter = SQLiteAdapter(adapter)
            await migration_func(sqlite_adapter)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
async def fix_migration_conflicts(database_url: str) -> bool:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
    """
    try:
        manager = UnifiedMigrationManager(database_url)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
        success = await manager.fix_schema_migrations_table()
        if not success:
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω –º–∏–≥—Ä–∞—Ü–∏–∏
        success = await manager.run_admin_migrations_fix()
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False
