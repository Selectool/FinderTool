"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è Telegram Channel Finder Bot
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SQLite (–ª–æ–∫–∞–ª—å–Ω–æ) –∏ PostgreSQL (production)
"""
import os
import logging
import importlib
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any
from database.db_adapter import DatabaseAdapter

logger = logging.getLogger(__name__)

class Migration:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π"""
    
    def __init__(self, version: str, description: str):
        self.version = version
        self.description = description
        self.applied_at = None
    
    async def up(self, adapter: DatabaseAdapter):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ up() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    async def down(self, adapter: DatabaseAdapter):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ down() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    def __str__(self):
        return f"Migration {self.version}: {self.description}"

class MigrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π"""
    
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.migrations_dir = Path(__file__).parent / "migrations"
        self.migrations_dir.mkdir(exist_ok=True)
        
    async def init_migrations_table(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            if adapter.db_type == 'sqlite':
                query = """
                    CREATE TABLE IF NOT EXISTS schema_migrations (
                        version VARCHAR(255) PRIMARY KEY,
                        description TEXT NOT NULL,
                        applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """
            else:  # PostgreSQL
                query = """
                    CREATE TABLE IF NOT EXISTS schema_migrations (
                        version VARCHAR(255) PRIMARY KEY,
                        description TEXT NOT NULL,
                        applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """
            
            await adapter.execute(query)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ schema_migrations –≥–æ—Ç–æ–≤–∞")
            
        finally:
            await adapter.disconnect()
    
    async def get_applied_migrations(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            await self.init_migrations_table()
            
            if adapter.db_type == 'sqlite':
                query = "SELECT version FROM schema_migrations ORDER BY version"
            else:  # PostgreSQL
                query = "SELECT version FROM schema_migrations ORDER BY version"
            
            result = await adapter.fetch_all(query)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            versions = []
            if result:
                for row in result:
                    if isinstance(row, (list, tuple)):
                        versions.append(row[0])
                    elif isinstance(row, dict):
                        versions.append(row['version'])
                    else:
                        versions.append(str(row))
            
            return versions
            
        finally:
            await adapter.disconnect()
    
    def discover_migrations(self) -> List[str]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π"""
        migration_files = []
        
        if self.migrations_dir.exists():
            for file_path in sorted(self.migrations_dir.glob("*.py")):
                if file_path.name != "__init__.py":
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 001_initial.py -> 001)
                    version = file_path.stem.split('_')[0]
                    migration_files.append(version)
        
        return migration_files
    
    async def load_migration(self, version: str) -> Migration:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ –≤–µ—Ä—Å–∏–∏"""
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_file = None
        for file_path in self.migrations_dir.glob(f"{version}_*.py"):
            migration_file = file_path
            break
        
        if not migration_file:
            raise FileNotFoundError(f"–ú–∏–≥—Ä–∞—Ü–∏—è {version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏
        module_name = f"database.migrations.{migration_file.stem}"
        spec = importlib.util.spec_from_file_location(module_name, migration_file)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_class = getattr(module, 'Migration')
        return migration_class()
    
    async def apply_migration(self, version: str):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            migration = await self.load_migration(version)
            
            logger.info(f"–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é {version}: {migration.description}")
            await migration.up(adapter)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
            if adapter.db_type == 'sqlite':
                query = "INSERT INTO schema_migrations (version, description) VALUES (?, ?)"
            else:  # PostgreSQL
                query = "INSERT INTO schema_migrations (version, description) VALUES ($1, $2)"
            
            await adapter.execute(query, (version, migration.description))
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {version} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ {version}: {e}")
            raise
        finally:
            await adapter.disconnect()
    
    async def rollback_migration(self, version: str):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            migration = await self.load_migration(version)
            
            logger.info(f"–û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é {version}: {migration.description}")
            await migration.down(adapter)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π
            if adapter.db_type == 'sqlite':
                query = "DELETE FROM schema_migrations WHERE version = ?"
            else:  # PostgreSQL
                query = "DELETE FROM schema_migrations WHERE version = $1"
            
            await adapter.execute(query, (version,))
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {version} –æ—Ç–∫–∞—á–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {version}: {e}")
            raise
        finally:
            await adapter.disconnect()
    
    async def migrate(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        await self.init_migrations_table()
        
        applied_migrations = await self.get_applied_migrations()
        available_migrations = self.discover_migrations()
        
        pending_migrations = [v for v in available_migrations if v not in applied_migrations]
        
        if not pending_migrations:
            logger.info("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            return
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pending_migrations)} –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π")
        
        for version in pending_migrations:
            await self.apply_migration(version)
        
        logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {len(pending_migrations)} –º–∏–≥—Ä–∞—Ü–∏–π")
    
    async def status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
        await self.init_migrations_table()
        
        applied_migrations = await self.get_applied_migrations()
        available_migrations = self.discover_migrations()
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {len(available_migrations)}")
        print(f"   –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(applied_migrations)}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç: {len(available_migrations) - len(applied_migrations)}")
        
        print(f"\nüìã –ú–∏–≥—Ä–∞—Ü–∏–∏:")
        for version in available_migrations:
            status = "‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞" if version in applied_migrations else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
            print(f"   {version}: {status}")
    
    def create_migration(self, description: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
        existing_versions = self.discover_migrations()
        if existing_versions:
            last_version = max(existing_versions)
            next_version = f"{int(last_version) + 1:03d}"
        else:
            next_version = "001"
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        safe_description = description.lower().replace(' ', '_').replace('-', '_')
        filename = f"{next_version}_{safe_description}.py"
        file_path = self.migrations_dir / filename
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –º–∏–≥—Ä–∞—Ü–∏–∏
        template = f'''"""
–ú–∏–≥—Ä–∞—Ü–∏—è {next_version}: {description}
–°–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""
from database.migration_manager import Migration
from database.db_adapter import DatabaseAdapter

class Migration{next_version}(Migration):
    def __init__(self):
        super().__init__("{next_version}", "{description}")
    
    async def up(self, adapter: DatabaseAdapter):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        pass
    
    async def down(self, adapter: DatabaseAdapter):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
        pass

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π
Migration = Migration{next_version}
'''
        
        file_path.write_text(template, encoding='utf-8')
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: {filename}")
        
        return filename


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
async def auto_migrate(database_url: str):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        manager = MigrationManager(database_url)
        await manager.migrate()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
        pass
