"""
Production-ready Database Manager –¥–ª—è Telegram Channel Finder Bot
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
"""
import asyncio
import logging
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path

from database.db_adapter import DatabaseAdapter

logger = logging.getLogger(__name__)


class ProductionDatabaseManager:
    """
    Production-ready –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º:
    - –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π
    - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É AdminMigrations –∏ MigrationManager
    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (is_subscribed vs subscription_active)
    - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ legacy —Å–∏—Å—Ç–µ–º –≤ production
    """
    
    def __init__(self, database_url: str = None):
        self.database_url = database_url or os.getenv('DATABASE_URL', 'sqlite:///bot.db')
        self.db_type = 'postgresql' if self.database_url.startswith('postgresql') else 'sqlite'
        self.is_production = os.getenv('ENVIRONMENT', 'production') == 'production'
        
    async def initialize_production_database(self) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production-ready –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ production-ready –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –≠—Ç–∞–ø 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π
            await self._fix_migration_system()
            
            # –≠—Ç–∞–ø 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self._fix_database_schema()
            
            # –≠—Ç–∞–ø 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            await self._synchronize_data()
            
            # –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
            await self._create_production_indexes()
            
            # –≠—Ç–∞–ø 5: –í–∞–ª–∏–¥–∞—Ü–∏—è
            db_info = await self._validate_database()
            
            logger.info("‚úÖ Production –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            return db_info
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    async def _fix_migration_system(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–∏–≥—Ä–∞—Ü–∏–π"""
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            # –°–æ–∑–¥–∞–µ–º unified —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
            if self.db_type == 'sqlite':
                query = """
                    CREATE TABLE IF NOT EXISTS schema_migrations (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        version VARCHAR(255) UNIQUE NOT NULL,
                        migration_name TEXT UNIQUE NOT NULL,
                        description TEXT NOT NULL,
                        applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        checksum VARCHAR(64),
                        execution_time_ms INTEGER DEFAULT 0
                    )
                """
            else:  # PostgreSQL
                query = """
                    CREATE TABLE IF NOT EXISTS schema_migrations (
                        id SERIAL PRIMARY KEY,
                        version VARCHAR(255) UNIQUE NOT NULL,
                        migration_name TEXT UNIQUE NOT NULL,
                        description TEXT NOT NULL,
                        applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        checksum VARCHAR(64),
                        execution_time_ms INTEGER DEFAULT 0
                    )
                """
            
            await adapter.execute(query)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await self._ensure_migration_columns(adapter)
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            await self._migrate_existing_migration_records(adapter)
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        finally:
            await adapter.disconnect()
    
    async def _ensure_migration_columns(self, adapter: DatabaseAdapter):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ schema_migrations"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ migration_name
            if self.db_type == 'postgresql':
                check_query = """
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'schema_migrations' AND column_name = 'migration_name'
                """
                result = await adapter.fetch_all(check_query)
                has_migration_name = len(result) > 0
            else:
                check_query = "PRAGMA table_info(schema_migrations)"
                result = await adapter.fetch_all(check_query)
                has_migration_name = any(col[1] == 'migration_name' for col in result)
            
            if not has_migration_name:
                if self.db_type == 'postgresql':
                    await adapter.execute("ALTER TABLE schema_migrations ADD COLUMN migration_name TEXT")
                else:
                    await adapter.execute("ALTER TABLE schema_migrations ADD COLUMN migration_name TEXT")
                
                logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ migration_name")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {e}")
    
    async def _migrate_existing_migration_records(self, adapter: DatabaseAdapter):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ migration_name
            if self.db_type == 'postgresql':
                update_query = """
                    UPDATE schema_migrations 
                    SET migration_name = COALESCE(migration_name, version)
                    WHERE migration_name IS NULL OR migration_name = ''
                """
            else:
                update_query = """
                    UPDATE schema_migrations 
                    SET migration_name = COALESCE(migration_name, version)
                    WHERE migration_name IS NULL OR migration_name = ''
                """
            
            await adapter.execute(update_query)
            logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –º–∏–≥—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏: {e}")
    
    async def _fix_database_schema(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
            await self._fix_users_table(adapter)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            await self._create_missing_tables(adapter)
            
            logger.info("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        finally:
            await adapter.disconnect()
    
    async def _fix_users_table(self, adapter: DatabaseAdapter):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É users"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_subscribed
            if self.db_type == 'postgresql':
                check_query = """
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'users' AND column_name = 'is_subscribed'
                """
                result = await adapter.fetch_all(check_query)
                has_is_subscribed = len(result) > 0
            else:
                check_query = "PRAGMA table_info(users)"
                result = await adapter.fetch_all(check_query)
                has_is_subscribed = any(col[1] == 'is_subscribed' for col in result)
            
            if not has_is_subscribed:
                if self.db_type == 'postgresql':
                    await adapter.execute("ALTER TABLE users ADD COLUMN is_subscribed BOOLEAN DEFAULT FALSE")
                else:
                    await adapter.execute("ALTER TABLE users ADD COLUMN is_subscribed BOOLEAN DEFAULT FALSE")
                
                logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ is_subscribed")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º is_subscribed —Å subscription_active
            if self.db_type == 'postgresql':
                sync_query = """
                    UPDATE users 
                    SET is_subscribed = COALESCE(subscription_active, FALSE)
                    WHERE is_subscribed IS NULL OR is_subscribed != COALESCE(subscription_active, FALSE)
                """
            else:
                sync_query = """
                    UPDATE users 
                    SET is_subscribed = COALESCE(subscription_active, 0)
                    WHERE is_subscribed IS NULL
                """
            
            await adapter.execute(sync_query)
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É users: {e}")
    
    async def _create_missing_tables(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        essential_tables = {
            'admin_users': self._create_admin_users_table,
            'roles': self._create_roles_table,
            'message_templates': self._create_message_templates_table,
            'audit_logs': self._create_audit_logs_table
        }
        
        for table_name, create_func in essential_tables.items():
            try:
                await create_func(adapter)
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} –≥–æ—Ç–æ–≤–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π {table_name}: {e}")
    
    async def _synchronize_data(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            if self.db_type == 'postgresql':
                sync_queries = [
                    "UPDATE users SET is_subscribed = subscription_active WHERE is_subscribed != subscription_active",
                    "UPDATE users SET subscription_active = is_subscribed WHERE subscription_active != is_subscribed"
                ]
            else:
                sync_queries = [
                    "UPDATE users SET is_subscribed = subscription_active WHERE is_subscribed != subscription_active"
                ]
            
            for query in sync_queries:
                try:
                    await adapter.execute(query)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: {e}")
            
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        finally:
            await adapter.disconnect()
    
    async def _create_production_indexes(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è production"""
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ production –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_users_subscription ON users(is_subscribed, subscription_end)",
                "CREATE INDEX IF NOT EXISTS idx_users_role ON users(role)",
                "CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at)",
                "CREATE INDEX IF NOT EXISTS idx_requests_user_id ON requests(user_id)",
                "CREATE INDEX IF NOT EXISTS idx_payments_user_id ON payments(user_id)",
                "CREATE INDEX IF NOT EXISTS idx_schema_migrations_name ON schema_migrations(migration_name)"
            ]
            
            for index_query in indexes:
                try:
                    await adapter.execute(index_query)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å: {e}")
            
            logger.info("‚úÖ Production –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
            
        finally:
            await adapter.disconnect()
    
    async def _validate_database(self) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            essential_tables = ['users', 'requests', 'payments', 'schema_migrations']
            table_info = []
            
            for table in essential_tables:
                try:
                    count_query = f"SELECT COUNT(*) FROM {table}"
                    result = await adapter.fetch_one(count_query)
                    count = result[0] if result else 0
                    table_info.append({"table_name": table, "record_count": count})
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π {table}: {e}")
                    table_info.append({"table_name": table, "record_count": -1, "error": str(e)})
            
            db_info = {
                "database_type": self.db_type,
                "database_url": self.database_url.replace(self.database_url.split('@')[0].split('//')[1], '***') if '@' in self.database_url else self.database_url,
                "connection_status": "connected",
                "tables": table_info,
                "is_production": self.is_production,
                "validation_time": datetime.now().isoformat()
            }
            
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return db_info
            
        finally:
            await adapter.disconnect()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
production_db_manager = ProductionDatabaseManager()


    async def _create_admin_users_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É admin_users"""
        if self.db_type == 'postgresql':
            query = """
                CREATE TABLE IF NOT EXISTS admin_users (
                    id SERIAL PRIMARY KEY,
                    username VARCHAR(255) UNIQUE NOT NULL,
                    email VARCHAR(255) UNIQUE NOT NULL,
                    password_hash TEXT NOT NULL,
                    role VARCHAR(100) NOT NULL DEFAULT 'moderator',
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_login TIMESTAMP,
                    telegram_id BIGINT UNIQUE
                )
            """
        else:
            query = """
                CREATE TABLE IF NOT EXISTS admin_users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    email TEXT UNIQUE NOT NULL,
                    password_hash TEXT NOT NULL,
                    role TEXT NOT NULL DEFAULT 'moderator',
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_login TIMESTAMP,
                    telegram_id INTEGER UNIQUE
                )
            """

        await adapter.execute(query)

    async def _create_roles_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É roles"""
        if self.db_type == 'postgresql':
            query = """
                CREATE TABLE IF NOT EXISTS roles (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100) UNIQUE NOT NULL,
                    description TEXT,
                    permissions TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """
        else:
            query = """
                CREATE TABLE IF NOT EXISTS roles (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL,
                    description TEXT,
                    permissions TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """

        await adapter.execute(query)

    async def _create_message_templates_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É message_templates"""
        if self.db_type == 'postgresql':
            query = """
                CREATE TABLE IF NOT EXISTS message_templates (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    subject VARCHAR(500),
                    content TEXT NOT NULL,
                    template_type VARCHAR(100) DEFAULT 'broadcast',
                    is_active BOOLEAN DEFAULT TRUE,
                    created_by INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """
        else:
            query = """
                CREATE TABLE IF NOT EXISTS message_templates (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    subject TEXT,
                    content TEXT NOT NULL,
                    template_type TEXT DEFAULT 'broadcast',
                    is_active BOOLEAN DEFAULT TRUE,
                    created_by INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """

        await adapter.execute(query)

    async def _create_audit_logs_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É audit_logs"""
        if self.db_type == 'postgresql':
            query = """
                CREATE TABLE IF NOT EXISTS audit_logs (
                    id SERIAL PRIMARY KEY,
                    admin_user_id INTEGER,
                    action VARCHAR(255) NOT NULL,
                    resource_type VARCHAR(100) NOT NULL,
                    resource_id INTEGER,
                    details TEXT,
                    ip_address VARCHAR(45),
                    user_agent TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """
        else:
            query = """
                CREATE TABLE IF NOT EXISTS audit_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    admin_user_id INTEGER,
                    action TEXT NOT NULL,
                    resource_type TEXT NOT NULL,
                    resource_id INTEGER,
                    details TEXT,
                    ip_address TEXT,
                    user_agent TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """

        await adapter.execute(query)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
production_db_manager = ProductionDatabaseManager()


async def initialize_production_database(database_url: str = None) -> Dict[str, Any]:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ production –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    if database_url:
        manager = ProductionDatabaseManager(database_url)
    else:
        manager = production_db_manager

    return await manager.initialize_production_database()
