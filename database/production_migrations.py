"""
Production –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º—ã PostgreSQL
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü admin_users –∏ –¥—Ä—É–≥–∏—Ö
"""
import logging
from database.db_adapter import DatabaseAdapter
from database.production_manager import ProductionDatabaseManager
from passlib.context import CryptContext

logger = logging.getLogger(__name__)

class ProductionMigrations:
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    
    async def run_critical_migrations(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è production"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è production...")
        
        adapter = DatabaseAdapter(self.database_url)
        await adapter.connect()
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É admin_users (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!)
            await self._create_admin_users_table(adapter)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            await self._create_roles_table(adapter)
            await self._create_message_templates_table(adapter)
            await self._create_scheduled_broadcasts_table(adapter)
            await self._create_audit_logs_table(adapter)
            await self._create_ab_tests_table(adapter)
            await self._create_broadcast_logs_table(adapter)
            await self._create_user_permissions_table(adapter)
            
            # –†–∞—Å—à–∏—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            await self._extend_users_table(adapter)
            await self._extend_broadcasts_table(adapter)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await self._insert_default_roles(adapter)
            await self._create_default_admin_user(adapter)
            await self._assign_default_telegram_roles(adapter)
            
            logger.info("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            raise
        finally:
            await adapter.disconnect()
    
    async def _create_admin_users_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_users...")
        query = """
            CREATE TABLE IF NOT EXISTS admin_users (
                id SERIAL PRIMARY KEY,
                username VARCHAR(255) UNIQUE NOT NULL,
                email VARCHAR(255) UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                role VARCHAR(100) NOT NULL DEFAULT 'moderator',
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_login TIMESTAMP,
                created_by INTEGER,
                FOREIGN KEY (created_by) REFERENCES admin_users (id)
            )
        """
        await adapter.execute(query)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_users —Å–æ–∑–¥–∞–Ω–∞")
    
    async def _create_roles_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–æ–ª–µ–π"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã roles...")
        query = """
            CREATE TABLE IF NOT EXISTS roles (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) UNIQUE NOT NULL,
                display_name VARCHAR(255) NOT NULL,
                permissions TEXT NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """
        await adapter.execute(query)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ roles —Å–æ–∑–¥–∞–Ω–∞")
    
    async def _create_message_templates_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã message_templates...")
        query = """
            CREATE TABLE IF NOT EXISTS message_templates (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                content TEXT NOT NULL,
                parse_mode VARCHAR(50) DEFAULT 'HTML',
                category VARCHAR(100) DEFAULT 'general',
                is_active BOOLEAN DEFAULT TRUE,
                created_by INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (created_by) REFERENCES admin_users (id)
            )
        """
        await adapter.execute(query)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ message_templates —Å–æ–∑–¥–∞–Ω–∞")
    
    async def _create_scheduled_broadcasts_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã scheduled_broadcasts...")
        query = """
            CREATE TABLE IF NOT EXISTS scheduled_broadcasts (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                template_id INTEGER,
                message_text TEXT,
                parse_mode VARCHAR(50) DEFAULT 'HTML',
                scheduled_at TIMESTAMP NOT NULL,
                status VARCHAR(50) DEFAULT 'pending',
                target_users VARCHAR(100) DEFAULT 'all',
                sent_count INTEGER DEFAULT 0,
                failed_count INTEGER DEFAULT 0,
                created_by INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                started_at TIMESTAMP,
                completed_at TIMESTAMP,
                error_message TEXT,
                FOREIGN KEY (template_id) REFERENCES message_templates (id),
                FOREIGN KEY (created_by) REFERENCES admin_users (id)
            )
        """
        await adapter.execute(query)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ scheduled_broadcasts —Å–æ–∑–¥–∞–Ω–∞")
    
    async def _create_audit_logs_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã audit_logs...")
        query = """
            CREATE TABLE IF NOT EXISTS audit_logs (
                id SERIAL PRIMARY KEY,
                admin_user_id INTEGER,
                action VARCHAR(255) NOT NULL,
                resource_type VARCHAR(100) NOT NULL,
                resource_id INTEGER,
                details TEXT,
                ip_address VARCHAR(45),
                user_agent TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (admin_user_id) REFERENCES admin_users (id)
            )
        """
        await adapter.execute(query)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ audit_logs —Å–æ–∑–¥–∞–Ω–∞")
    
    async def _create_ab_tests_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É A/B —Ç–µ—Å—Ç–æ–≤"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ab_tests...")
        query = """
            CREATE TABLE IF NOT EXISTS ab_tests (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                variant_a_content TEXT NOT NULL,
                variant_b_content TEXT NOT NULL,
                target_users VARCHAR(100) DEFAULT 'all',
                status VARCHAR(50) DEFAULT 'draft',
                variant_a_sent INTEGER DEFAULT 0,
                variant_b_sent INTEGER DEFAULT 0,
                variant_a_clicks INTEGER DEFAULT 0,
                variant_b_clicks INTEGER DEFAULT 0,
                created_by INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                started_at TIMESTAMP,
                completed_at TIMESTAMP,
                FOREIGN KEY (created_by) REFERENCES admin_users (id)
            )
        """
        await adapter.execute(query)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ ab_tests —Å–æ–∑–¥–∞–Ω–∞")
    
    async def _create_broadcast_logs_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã broadcast_logs...")
        query = """
            CREATE TABLE IF NOT EXISTS broadcast_logs (
                id SERIAL PRIMARY KEY,
                broadcast_id INTEGER NOT NULL,
                user_id BIGINT NOT NULL,
                status VARCHAR(50) NOT NULL,
                message TEXT,
                error_details TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (broadcast_id) REFERENCES broadcast_messages (id)
            )
        """
        await adapter.execute(query)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        await adapter.execute("""
            CREATE INDEX IF NOT EXISTS idx_broadcast_logs_broadcast_id
            ON broadcast_logs (broadcast_id)
        """)
        await adapter.execute("""
            CREATE INDEX IF NOT EXISTS idx_broadcast_logs_status
            ON broadcast_logs (broadcast_id, status)
        """)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ broadcast_logs —Å–æ–∑–¥–∞–Ω–∞")
    
    async def _create_user_permissions_table(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_permissions...")
        query = """
            CREATE TABLE IF NOT EXISTS user_permissions (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                permission VARCHAR(255) NOT NULL,
                granted_by INTEGER,
                granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES admin_users (id),
                FOREIGN KEY (granted_by) REFERENCES admin_users (id),
                UNIQUE(user_id, permission)
            )
        """
        await adapter.execute(query)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_permissions —Å–æ–∑–¥–∞–Ω–∞")
    
    async def _extend_users_table(self, adapter: DatabaseAdapter):
        """–†–∞—Å—à–∏—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users...")
        columns_to_add = [
            ("role", "VARCHAR(100) DEFAULT 'user'"),
            ("unlimited_access", "BOOLEAN DEFAULT FALSE"),
            ("notes", "TEXT"),
            ("blocked", "BOOLEAN DEFAULT FALSE"),
            ("bot_blocked", "BOOLEAN DEFAULT FALSE"),
            ("blocked_at", "TIMESTAMP"),
            ("blocked_by", "INTEGER"),
            ("referrer_id", "INTEGER"),
            ("registration_source", "VARCHAR(100) DEFAULT 'bot'")
        ]
        
        for column_name, column_def in columns_to_add:
            try:
                await adapter.execute(f"ALTER TABLE users ADD COLUMN {column_name} {column_def}")
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column_name}")
            except Exception as e:
                if "already exists" in str(e).lower() or "duplicate column" in str(e).lower():
                    logger.debug(f"–ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
    
    async def _extend_broadcasts_table(self, adapter: DatabaseAdapter):
        """–†–∞—Å—à–∏—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
        logger.info("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã broadcast_messages...")
        columns_to_add = [
            ("template_id", "INTEGER"),
            ("parse_mode", "VARCHAR(50) DEFAULT 'HTML'"),
            ("target_users", "VARCHAR(100) DEFAULT 'all'"),
            ("created_by", "INTEGER"),
            ("ab_test_id", "INTEGER"),
            ("scheduled_at", "TIMESTAMP"),
            ("started_at", "TIMESTAMP"),
            ("error_message", "TEXT")
        ]
        
        for column_name, column_def in columns_to_add:
            try:
                await adapter.execute(f"ALTER TABLE broadcast_messages ADD COLUMN {column_name} {column_def}")
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column_name}")
            except Exception as e:
                if "already exists" in str(e).lower() or "duplicate column" in str(e).lower():
                    logger.debug(f"–ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
    
    async def _insert_default_roles(self, adapter: DatabaseAdapter):
        """–í—Å—Ç–∞–≤–∏—Ç—å —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        logger.info("–í—Å—Ç–∞–≤–∫–∞ —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        roles = [
            {
                'name': 'super_admin',
                'display_name': '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'permissions': '["*"]',
                'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã'
            },
            {
                'name': 'admin',
                'display_name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'permissions': '["users.view", "users.edit", "broadcasts.create", "broadcasts.send", "statistics.view", "templates.manage"]',
                'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏'
            },
            {
                'name': 'developer',
                'display_name': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                'permissions': '["statistics.view", "broadcasts.create", "templates.manage", "system.logs"]',
                'description': '–î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é'
            },
            {
                'name': 'moderator',
                'display_name': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                'permissions': '["users.view", "statistics.view"]',
                'description': '–¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö'
            }
        ]
        
        for role in roles:
            query = """
                INSERT INTO roles (name, display_name, permissions, description)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (name) DO NOTHING
            """
            await adapter.execute(query, (role['name'], role['display_name'], role['permissions'], role['description']))
        
        logger.info("‚úÖ –†–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—Ç–∞–≤–ª–µ–Ω—ã")
    
    async def _create_default_admin_user(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        result = await adapter.fetch_one("SELECT COUNT(*) FROM admin_users")
        count = result[0] if result else 0
        
        if count == 0:
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_password = "admin123"
            password_hash = self.pwd_context.hash(default_password)
            
            query = """
                INSERT INTO admin_users (username, email, password_hash, role, is_active)
                VALUES ($1, $2, $3, $4, $5)
            """
            
            await adapter.execute(query, ("admin", "admin@localhost", password_hash, "super_admin", True))
            
            logger.warning(f"–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin / {default_password}")
            logger.warning("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!")
        else:
            logger.info("–ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    
    async def _assign_default_telegram_roles(self, adapter: DatabaseAdapter):
        """–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        user_roles = {
            5699315855: 'developer',      # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
            7610418399: 'senior_admin',   # –°—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω
            792247608: 'admin'            # –ê–¥–º–∏–Ω
        }
        
        for user_id, role in user_roles.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            result = await adapter.fetch_one("SELECT user_id FROM users WHERE user_id = $1", (user_id,))
            
            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await adapter.execute("UPDATE users SET role = $1 WHERE user_id = $2", (role, user_id))
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {role}")
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ä–æ–ª—å—é {role} –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏")


async def run_production_migrations(database_url: str):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å production –º–∏–≥—Ä–∞—Ü–∏–∏"""
    migrations = ProductionMigrations(database_url)
    await migrations.run_critical_migrations()
    logger.info("‚úÖ –í—Å–µ production –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")


if __name__ == "__main__":
    import asyncio
    import os
    
    database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999!@findertool-hyvrte:5432/findertool_prod')
    asyncio.run(run_production_migrations(database_url))
