"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ —á–∏—Å—Ç–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–ª–∞—Ç–µ–∂–µ–π
"""

import asyncio
import logging
import os
import shutil
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
import aiosqlite
from pathlib import Path

logger = logging.getLogger(__name__)

class DatabaseResetManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ —á–∏—Å—Ç–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
    
    def __init__(self, db_path: str = "database/bot_database.db"):
        self.db_path = db_path
        self.backup_dir = "database/backups"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        Path(self.backup_dir).mkdir(parents=True, exist_ok=True)
    
    async def reset_to_clean_state(self, keep_admin_users: bool = True) -> bool:
        """
        –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ —á–∏—Å—Ç–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è production
        –ò–°–ü–†–ê–í–õ–Ø–ï–¢ –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–ª–∞—Ç–µ–∂–µ–π
        
        Args:
            keep_admin_users: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
        """
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ —á–∏—Å—Ç–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é...")
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
            backup_path = await self.create_backup("before_reset")
            logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            admin_users = []
            if keep_admin_users:
                admin_users = await self._get_admin_users()
                logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(admin_users)} –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            await self._clear_all_tables()
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
            await self._recreate_tables()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
            if admin_users:
                await self._restore_admin_users(admin_users)
                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(admin_users)} –∞–¥–º–∏–Ω–æ–≤")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self._initialize_production_data()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞ –∫ —á–∏—Å—Ç–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
            logger.info("üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π - —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def _get_admin_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                cursor = await db.execute("""
                    SELECT user_id, username, first_name, last_name, 
                           is_admin, is_super_admin, created_at
                    FROM users 
                    WHERE is_admin = TRUE OR is_super_admin = TRUE
                """)
                rows = await cursor.fetchall()
                return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
            return []
    
    async def _restore_admin_users(self, admin_users: List[Dict]):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                for admin in admin_users:
                    await db.execute("""
                        INSERT OR REPLACE INTO users 
                        (user_id, username, first_name, last_name, 
                         is_admin, is_super_admin, created_at, 
                         is_subscribed, subscription_end, free_requests_used)
                        VALUES (?, ?, ?, ?, ?, ?, ?, FALSE, NULL, 0)
                    """, (
                        admin['user_id'], admin['username'], admin['first_name'],
                        admin['last_name'], admin['is_admin'], admin['is_super_admin'],
                        admin['created_at']
                    ))
                await db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
    
    async def _clear_all_tables(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""
        tables_to_clear = [
            'payments', 'user_requests', 'broadcast_messages', 
            'user_feedback', 'channel_search_cache'
        ]
        
        async with aiosqlite.connect(self.db_path) as db:
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
            await db.execute("DELETE FROM users WHERE is_admin = FALSE AND is_super_admin = FALSE")
            
            # –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            for table in tables_to_clear:
                try:
                    await db.execute(f"DELETE FROM {table}")
                    logger.debug(f"–û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É {table}: {e}")
            
            await db.commit()
            logger.info("üßπ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã")
    
    async def _recreate_tables(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü"""
        try:
            from database.models import Database
            
            db = Database()
            await db.create_tables_if_not_exist()
            logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
    
    async def _initialize_production_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è production"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS system_settings (
                        key TEXT PRIMARY KEY,
                        value TEXT NOT NULL,
                        description TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await db.execute("""
                    INSERT OR REPLACE INTO system_settings (key, value, description)
                    VALUES 
                    ('database_version', '1.0.0', '–í–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'),
                    ('reset_date', ?, '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞'),
                    ('production_mode', 'true', '–†–µ–∂–∏–º production'),
                    ('maintenance_mode', 'false', '–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'),
                    ('payment_stats_fixed', 'true', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π')
                """, (datetime.now().isoformat(),))
                
                await db.commit()
                logger.info("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def create_backup(self, suffix: str = None) -> str:
        """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"backup_{timestamp}"
            if suffix:
                backup_name += f"_{suffix}"
            backup_name += ".db"
            
            backup_path = os.path.join(self.backup_dir, backup_name)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if os.path.exists(self.db_path):
                shutil.copy2(self.db_path, backup_path)
                logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.db_path}")
                return ""
            
            return backup_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
            raise
    
    async def get_reset_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞"""
        try:
            stats = {
                'database_exists': os.path.exists(self.db_path),
                'database_size_mb': 0,
                'tables_count': 0,
                'users_count': 0,
                'admin_users_count': 0,
                'payments_count': 0,
                'reset_date': None
            }
            
            if not stats['database_exists']:
                return stats
            
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_size = os.path.getsize(self.db_path)
            stats['database_size_mb'] = round(db_size / (1024 * 1024), 2)
            
            async with aiosqlite.connect(self.db_path) as db:
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
                cursor = await db.execute("""
                    SELECT COUNT(*) FROM sqlite_master WHERE type='table'
                """)
                row = await cursor.fetchone()
                stats['tables_count'] = row[0] if row else 0
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                try:
                    cursor = await db.execute("SELECT COUNT(*) FROM users")
                    row = await cursor.fetchone()
                    stats['users_count'] = row[0] if row else 0
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤
                    cursor = await db.execute("""
                        SELECT COUNT(*) FROM users 
                        WHERE is_admin = TRUE OR is_super_admin = TRUE
                    """)
                    row = await cursor.fetchone()
                    stats['admin_users_count'] = row[0] if row else 0
                except:
                    pass
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π
                try:
                    cursor = await db.execute("SELECT COUNT(*) FROM payments")
                    row = await cursor.fetchone()
                    stats['payments_count'] = row[0] if row else 0
                except:
                    pass
                
                # –î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞
                try:
                    cursor = await db.execute("""
                        SELECT value FROM system_settings WHERE key = 'reset_date'
                    """)
                    row = await cursor.fetchone()
                    stats['reset_date'] = row[0] if row else None
                except:
                    pass
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–±—Ä–æ—Å–∞
async def reset_database_clean():
    """–ë—ã—Å—Ç—Ä—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ —á–∏—Å—Ç–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
    reset_manager = DatabaseResetManager()
    success = await reset_manager.reset_to_clean_state(keep_admin_users=True)
    
    if success:
        stats = await reset_manager.get_reset_statistics()
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:")
        logger.info(f"  - –†–∞–∑–º–µ—Ä –ë–î: {stats.get('database_size_mb', 0)} MB")
        logger.info(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users_count', 0)}")
        logger.info(f"  - –ê–¥–º–∏–Ω–æ–≤: {stats.get('admin_users_count', 0)}")
        logger.info(f"  - –ü–ª–∞—Ç–µ–∂–µ–π: {stats.get('payments_count', 0)}")
    
    return success

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–±—Ä–æ—Å–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    asyncio.run(reset_database_clean())
