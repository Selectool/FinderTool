"""
–ú–∏–≥—Ä–∞—Ü–∏—è 010: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã broadcasts
–°–æ–∑–¥–∞–Ω–∞: 2025-08-04 23:12:00
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—É broadcasts –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ä–∞—Å—Å—ã–ª–æ–∫
"""
from database.migration_manager import Migration
from database.db_adapter import DatabaseAdapter
import logging

logger = logging.getLogger(__name__)

class Migration010(Migration):
    def __init__(self):
        super().__init__("010", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã broadcasts")
    
    async def up(self, adapter: DatabaseAdapter):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã broadcasts...")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—É broadcasts
            await self._add_missing_columns(adapter)
            
            logger.info("‚úÖ –°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã broadcasts –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ broadcasts: {e}")
            raise
    
    async def _add_missing_columns(self, adapter: DatabaseAdapter):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—É broadcasts"""
        
        # –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        columns_to_add = [
            ("message_text", "TEXT"),
            ("title", "VARCHAR(255)"),
            ("status", "VARCHAR(50) DEFAULT 'pending'"),
            ("parse_mode", "VARCHAR(50) DEFAULT 'HTML'"),
            ("target_users", "VARCHAR(100) DEFAULT 'all'"),
            ("created_by", "INTEGER"),
            ("scheduled_time", "TIMESTAMP"),
            ("started_at", "TIMESTAMP"),
            ("completed_at", "TIMESTAMP"),
            ("error_message", "TEXT"),
            ("sent_count", "INTEGER DEFAULT 0"),
            ("failed_count", "INTEGER DEFAULT 0")
        ]
        
        for column_name, column_def in columns_to_add:
            try:
                await adapter.execute(f"""
                    ALTER TABLE broadcasts 
                    ADD COLUMN {column_name} {column_def}
                """)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü broadcasts.{column_name}")
            except Exception as e:
                if any(phrase in str(e).lower() for phrase in ["already exists", "duplicate column", "column already exists"]):
                    logger.info(f"‚ÑπÔ∏è –°—Ç–æ–ª–±–µ—Ü broadcasts.{column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ broadcasts.{column_name}: {e}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ message –≤ –Ω–æ–≤—ã–π message_text (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–±–µ—Ü message
            if adapter.db_type == 'postgresql':
                result = await adapter.execute("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'broadcasts' 
                    AND column_name = 'message'
                    AND table_schema = 'public'
                """)
                
                if result:
                    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ message –≤ message_text
                    await adapter.execute("""
                        UPDATE broadcasts 
                        SET message_text = message 
                        WHERE message_text IS NULL AND message IS NOT NULL
                    """)
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ message –≤ message_text")
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        indexes = [
            ("idx_broadcasts_status_new", "broadcasts", "status"),
            ("idx_broadcasts_created_by_new", "broadcasts", "created_by"),
            ("idx_broadcasts_target_users_new", "broadcasts", "target_users"),
            ("idx_broadcasts_created_at_new", "broadcasts", "created_at")
        ]
        
        for index_name, table_name, column_name in indexes:
            try:
                await adapter.execute(f"""
                    CREATE INDEX IF NOT EXISTS {index_name} 
                    ON {table_name} ({column_name})
                """)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å {index_name}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {e}")
    
    async def down(self, adapter: DatabaseAdapter):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.warning("‚ö†Ô∏è –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 010 –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω - –º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        pass

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π
Migration = Migration010
