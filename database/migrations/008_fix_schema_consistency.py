"""
–ú–∏–≥—Ä–∞—Ü–∏—è 008: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã –ë–î
–°–æ–∑–¥–∞–Ω–∞: 2025-08-04 22:57:00
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏, –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏ —Å—Ö–µ–º—ã
"""
from database.migration_manager import Migration
from database.db_adapter import DatabaseAdapter
import logging

logger = logging.getLogger(__name__)

class Migration008(Migration):
    def __init__(self):
        super().__init__("008", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã –ë–î (–≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏, —Å—Ç–æ–ª–±—Ü—ã)")
    
    async def up(self, adapter: DatabaseAdapter):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î...")
        
        try:
            # 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ users
            await self._fix_users_table(adapter)
            
            # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ payments
            await self._fix_payments_table(adapter)
            
            # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
            await self._fix_foreign_keys(adapter)
            
            # 4. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
            await self._create_missing_indexes(adapter)
            
            logger.info("‚úÖ –°—Ö–µ–º–∞ –ë–î —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –ë–î: {e}")
            raise
    
    async def _fix_users_table(self, adapter: DatabaseAdapter):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É users"""
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É users...")
        
        # –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        columns_to_add = [
            ("subscription_end", "TIMESTAMP"),
            ("last_request", "TIMESTAMP"),
            ("last_payment_date", "TIMESTAMP"),
            ("payment_provider", "TEXT"),
            ("unlimited_access", "BOOLEAN DEFAULT FALSE"),
            ("blocked_at", "TIMESTAMP"),
            ("language_code", "VARCHAR(10) DEFAULT 'ru'"),
            ("is_premium", "BOOLEAN DEFAULT FALSE"),
            ("subscription_active", "BOOLEAN DEFAULT FALSE"),
            ("free_requests_used", "INTEGER DEFAULT 0"),
            ("total_requests", "INTEGER DEFAULT 0"),
            ("last_activity", "TIMESTAMP DEFAULT CURRENT_TIMESTAMP"),
            ("notes", "TEXT"),
            ("blocked_by", "INTEGER"),
            ("referrer_id", "INTEGER"),
            ("registration_source", "VARCHAR(100) DEFAULT 'bot'")
        ]
        
        for column_name, column_def in columns_to_add:
            try:
                await adapter.execute(f"ALTER TABLE users ADD COLUMN {column_name} {column_def}")
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü users.{column_name}")
            except Exception as e:
                if any(phrase in str(e).lower() for phrase in ["already exists", "duplicate column", "column already exists"]):
                    logger.info(f"‚ÑπÔ∏è –°—Ç–æ–ª–±–µ—Ü users.{column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ users.{column_name}: {e}")
    
    async def _fix_payments_table(self, adapter: DatabaseAdapter):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É payments"""
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É payments...")
        
        # –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        columns_to_add = [
            ("provider", "TEXT DEFAULT 'yookassa'"),
            ("payment_method", "VARCHAR(100)"),
            ("metadata", "JSONB" if adapter.db_type == 'postgresql' else "TEXT")
        ]
        
        for column_name, column_def in columns_to_add:
            try:
                await adapter.execute(f"ALTER TABLE payments ADD COLUMN {column_name} {column_def}")
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü payments.{column_name}")
            except Exception as e:
                if any(phrase in str(e).lower() for phrase in ["already exists", "duplicate column", "column already exists"]):
                    logger.info(f"‚ÑπÔ∏è –°—Ç–æ–ª–±–µ—Ü payments.{column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ payments.{column_name}: {e}")
    
    async def _fix_foreign_keys(self, adapter: DatabaseAdapter):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏"""
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏...")
        
        if adapter.db_type == 'postgresql':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
            foreign_keys_to_check = [
                ("requests", "user_id", "users", "user_id"),
                ("payments", "user_id", "users", "user_id"),
                ("broadcast_logs", "broadcast_id", "broadcast_messages", "id"),
                ("scheduled_broadcasts", "template_id", "message_templates", "id"),
                ("scheduled_broadcasts", "created_by", "admin_users", "id"),
                ("audit_logs", "admin_user_id", "admin_users", "id")
            ]
            
            for table, column, ref_table, ref_column in foreign_keys_to_check:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                    table_exists = await self._table_exists(adapter, table)
                    ref_table_exists = await self._table_exists(adapter, ref_table)
                    
                    if table_exists and ref_table_exists:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞
                        fk_exists = await self._foreign_key_exists(adapter, table, column, ref_table, ref_column)
                        if not fk_exists:
                            # –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
                            constraint_name = f"fk_{table}_{column}_{ref_table}_{ref_column}"
                            await adapter.execute(f"""
                                ALTER TABLE {table} 
                                ADD CONSTRAINT {constraint_name} 
                                FOREIGN KEY ({column}) REFERENCES {ref_table} ({ref_column})
                            """)
                            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á {constraint_name}")
                        else:
                            logger.info(f"‚ÑπÔ∏è –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á {table}.{column} -> {ref_table}.{ref_column} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} –∏–ª–∏ {ref_table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ {table}.{column}: {e}")
    
    async def _create_missing_indexes(self, adapter: DatabaseAdapter):
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã"""
        logger.info("üîß –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã...")
        
        indexes = [
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            ("idx_users_created_at", "users", "created_at"),
            ("idx_users_subscription", "users", "is_subscribed"),
            ("idx_users_role", "users", "role"),
            ("idx_users_blocked", "users", "blocked"),
            ("idx_users_last_activity", "users", "last_activity"),
            
            # –ó–∞–ø—Ä–æ—Å—ã
            ("idx_requests_user_created", "requests", "user_id, created_at"),
            ("idx_requests_created_at", "requests", "created_at"),
            
            # –ü–ª–∞—Ç–µ–∂–∏
            ("idx_payments_user_id", "payments", "user_id"),
            ("idx_payments_status", "payments", "status"),
            ("idx_payments_created_at", "payments", "created_at"),
            ("idx_payments_payment_id", "payments", "payment_id"),
            
            # –†–∞—Å—Å—ã–ª–∫–∏
            ("idx_broadcasts_status", "broadcast_messages", "sent_count"),
            ("idx_broadcasts_created_at", "broadcast_messages", "created_at"),
            
            # –ê–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            ("idx_admin_users_username", "admin_users", "username"),
            ("idx_admin_users_email", "admin_users", "email"),
            ("idx_admin_users_role", "admin_users", "role"),
            
            # –õ–æ–≥–∏ –∞—É–¥–∏—Ç–∞
            ("idx_audit_logs_admin_user", "audit_logs", "admin_user_id"),
            ("idx_audit_logs_created_at", "audit_logs", "created_at"),
            ("idx_audit_logs_action", "audit_logs", "action")
        ]
        
        for index_name, table_name, columns in indexes:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                table_exists = await self._table_exists(adapter, table_name)
                if table_exists:
                    await adapter.execute(f"""
                        CREATE INDEX IF NOT EXISTS {index_name} 
                        ON {table_name} ({columns})
                    """)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å {index_name}")
                else:
                    logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å {index_name}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {e}")
    
    async def _table_exists(self, adapter: DatabaseAdapter, table_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if adapter.db_type == 'postgresql':
                result = await adapter.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = $1
                    )
                """, (table_name,))
                return bool(result)
            else:  # SQLite
                result = await adapter.execute("""
                    SELECT name FROM sqlite_master 
                    WHERE type='table' AND name=?
                """, (table_name,))
                return result is not None
        except Exception:
            return False
    
    async def _foreign_key_exists(self, adapter: DatabaseAdapter, table: str, column: str, ref_table: str, ref_column: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞"""
        try:
            if adapter.db_type == 'postgresql':
                result = await adapter.execute("""
                    SELECT EXISTS (
                        SELECT 1 FROM information_schema.table_constraints tc
                        JOIN information_schema.key_column_usage kcu 
                        ON tc.constraint_name = kcu.constraint_name
                        JOIN information_schema.constraint_column_usage ccu 
                        ON ccu.constraint_name = tc.constraint_name
                        WHERE tc.constraint_type = 'FOREIGN KEY'
                        AND tc.table_name = $1
                        AND kcu.column_name = $2
                        AND ccu.table_name = $3
                        AND ccu.column_name = $4
                    )
                """, (table, column, ref_table, ref_column))
                return bool(result)
            return False  # –î–ª—è SQLite –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        except Exception:
            return False
    
    async def down(self, adapter: DatabaseAdapter):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.warning("‚ö†Ô∏è –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 008 –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        # –û—Ç–∫–∞—Ç —ç—Ç–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–µ–Ω –∏ –º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        pass

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π
Migration = Migration008
