"""
–ú–∏–≥—Ä–∞—Ü–∏—è 009: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º production_database_manager
–°–æ–∑–¥–∞–Ω–∞: 2025-08-04 23:05:00
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–≤–∏—á–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –∏ –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ –≤ production_database_manager
"""
from database.migration_manager import Migration
from database.db_adapter import DatabaseAdapter
import logging

logger = logging.getLogger(__name__)

class Migration009(Migration):
    def __init__(self):
        super().__init__("009", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º production_database_manager")
    
    async def up(self, adapter: DatabaseAdapter):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã production_database_manager...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ production_database_manager
            await self._fix_production_tables(adapter)
            
            logger.info("‚úÖ –ü—Ä–æ–±–ª–µ–º—ã production_database_manager –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è production_database_manager: {e}")
            raise
    
    async def _fix_production_tables(self, adapter: DatabaseAdapter):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ production_database_manager"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        tables_to_check = ['user_requests']
        
        for table_name in tables_to_check:
            table_exists = await self._table_exists(adapter, table_name)
            if table_exists:
                logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É {table_name}...")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
                if table_name == 'user_requests':
                    await self._fix_user_requests_table(adapter)
    
    async def _fix_user_requests_table(self, adapter: DatabaseAdapter):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É user_requests"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            await adapter.execute("""
                ALTER TABLE user_requests 
                DROP CONSTRAINT IF EXISTS user_requests_user_id_fkey
            """)
            
            # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            await adapter.execute("DROP TABLE IF EXISTS user_requests")
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
            await adapter.execute("""
                CREATE TABLE IF NOT EXISTS user_requests (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    request_type VARCHAR(100),
                    request_data TEXT,
                    response_data TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    processing_time FLOAT,
                    status VARCHAR(50) DEFAULT 'completed',
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            """)
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_requests –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è user_requests: {e}")
    
    async def _table_exists(self, adapter: DatabaseAdapter, table_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if adapter.db_type == 'postgresql':
                result = await adapter.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = $1
                    )
                """, (table_name,))
                return bool(result)
            else:  # SQLite
                result = await adapter.execute("""
                    SELECT name FROM sqlite_master 
                    WHERE type='table' AND name=?
                """, (table_name,))
                return result is not None
        except Exception:
            return False
    
    async def down(self, adapter: DatabaseAdapter):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.warning("‚ö†Ô∏è –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 009 –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        pass

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π
Migration = Migration009
