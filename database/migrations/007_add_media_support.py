"""
–ú–∏–≥—Ä–∞—Ü–∏—è 007: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞—Å—Å—ã–ª–∫–∏
"""

from database.db_adapter import DatabaseAdapter


class Migration007:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É broadcasts"""

    description = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞—Å—Å—ã–ª–∫–∏ - –∫–æ–ª–æ–Ω–∫–∏ message_type, media_file, media_type, media_caption"
    
    async def up(self, adapter: DatabaseAdapter):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ 007: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É broadcasts
        media_columns = [
            ("message_type", "VARCHAR(50) DEFAULT 'text'"),
            ("media_file", "TEXT"),
            ("media_type", "VARCHAR(50)"),
            ("media_caption", "TEXT")
        ]
        
        for column_name, column_type in media_columns:
            try:
                if adapter.db_type == 'sqlite':
                    query = f"ALTER TABLE broadcasts ADD COLUMN {column_name} {column_type.replace('VARCHAR', 'TEXT')}"
                else:  # PostgreSQL
                    query = f"ALTER TABLE broadcasts ADD COLUMN {column_name} {column_type}"
                
                await adapter.execute(query)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column_name} –≤ —Ç–∞–±–ª–∏—Ü—É broadcasts")
                
            except Exception as e:
                if "already exists" in str(e).lower() or "duplicate column" in str(e).lower():
                    print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ broadcasts")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ scheduled_broadcasts –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã scheduled_broadcasts
            if adapter.db_type == 'sqlite':
                check_query = "SELECT name FROM sqlite_master WHERE type='table' AND name='scheduled_broadcasts'"
            else:  # PostgreSQL
                check_query = "SELECT table_name FROM information_schema.tables WHERE table_name='scheduled_broadcasts'"
            
            result = await adapter.fetch_one(check_query)
            
            if result:
                print("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ scheduled_broadcasts...")
                
                for column_name, column_type in media_columns:
                    try:
                        if adapter.db_type == 'sqlite':
                            query = f"ALTER TABLE scheduled_broadcasts ADD COLUMN {column_name} {column_type.replace('VARCHAR', 'TEXT')}"
                        else:  # PostgreSQL
                            query = f"ALTER TABLE scheduled_broadcasts ADD COLUMN {column_name} {column_type}"
                        
                        await adapter.execute(query)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column_name} –≤ —Ç–∞–±–ª–∏—Ü—É scheduled_broadcasts")
                        
                    except Exception as e:
                        if "already exists" in str(e).lower() or "duplicate column" in str(e).lower():
                            print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ scheduled_broadcasts")
                        else:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ {column_name} –≤ scheduled_broadcasts: {e}")
            else:
                print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ scheduled_broadcasts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã scheduled_broadcasts: {e}")
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 007 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    async def down(self, adapter: DatabaseAdapter):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        print("üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 007: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...")
        
        # –í SQLite –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∫–æ–ª–æ–Ω–∫–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        if adapter.db_type == 'sqlite':
            print("‚ö†Ô∏è SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫. –û—Ç–∫–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return
        
        # –î–ª—è PostgreSQL —É–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        media_columns = ["message_type", "media_file", "media_type", "media_caption"]
        
        for column_name in media_columns:
            try:
                await adapter.execute(f"ALTER TABLE broadcasts DROP COLUMN IF EXISTS {column_name}")
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column_name} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã broadcasts")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
        
        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ scheduled_broadcasts
        try:
            for column_name in media_columns:
                try:
                    await adapter.execute(f"ALTER TABLE scheduled_broadcasts DROP COLUMN IF EXISTS {column_name}")
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column_name} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã scheduled_broadcasts")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ {column_name} –∏–∑ scheduled_broadcasts: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π scheduled_broadcasts: {e}")
        
        print("‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 007 –∑–∞–≤–µ—Ä—à–µ–Ω")


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π
Migration = Migration007
