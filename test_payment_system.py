#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã –ÆKassa
Production-ready —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import logging
import json
from datetime import datetime

from database.models import Database
from services.payment_service import create_payment_service
from config import (
    YOOKASSA_PROVIDER_TOKEN, YOOKASSA_CURRENCY, YOOKASSA_PROVIDER_DATA,
    SUBSCRIPTION_PRICE, YOOKASSA_MODE
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_payment_service_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("\n" + "="*60)
    print("üîß –¢–ï–°–¢: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π")
    print("="*60)
    
    try:
        db = Database()
        await db.init_db()
        
        payment_service = create_payment_service(
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency=YOOKASSA_CURRENCY,
            provider_data=YOOKASSA_PROVIDER_DATA,
            db=db
        )
        
        print(f"‚úÖ –°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   - –†–µ–∂–∏–º: {YOOKASSA_MODE}")
        print(f"   - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {payment_service.is_test_mode}")
        print(f"   - –í–∞–ª—é—Ç–∞: {payment_service.currency}")
        print(f"   - –¢–æ–∫–µ–Ω: {payment_service.provider_token[:20]}...{payment_service.provider_token[-10:]}")
        
        return payment_service, db
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None, None


async def test_invoice_creation(payment_service, db):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞"""
    print("\n" + "="*60)
    print("üìÑ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞")
    print("="*60)
    
    try:
        test_user_id = 123456789
        amount = SUBSCRIPTION_PRICE * 100  # –í –∫–æ–ø–µ–π–∫–∞—Ö
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.create_user(test_user_id, "test_user", "Test", "User")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
        invoice_data = await payment_service.create_invoice_data(
            user_id=test_user_id,
            amount=amount,
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ Channel Finder Bot - {SUBSCRIPTION_PRICE}‚ÇΩ/–º–µ—Å—è—Ü",
            subscription_months=1
        )
        
        print(f"‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {invoice_data['title']}")
        print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {invoice_data['description']}")
        print(f"   - –°—É–º–º–∞: {invoice_data['prices'][0].amount} –∫–æ–ø–µ–µ–∫ ({invoice_data['prices'][0].amount/100:.2f} ‚ÇΩ)")
        print(f"   - –í–∞–ª—é—Ç–∞: {invoice_data['currency']}")
        print(f"   - Payload: {invoice_data['payload']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º provider_data
        if invoice_data['provider_data']:
            provider_data = json.loads(invoice_data['provider_data'])
            print(f"   - Provider data: {json.dumps(provider_data, ensure_ascii=False, indent=4)}")
        
        return invoice_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None


async def test_database_operations(db):
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*60)
    print("üóÑÔ∏è –¢–ï–°–¢: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    print("="*60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        test_payment_id = "test-payment-12345"
        test_user_id = 123456789
        
        await db.create_payment(
            user_id=test_user_id,
            amount=34900,
            currency="RUB",
            payment_id=test_payment_id,
            invoice_payload=f"subscription_1m_{test_payment_id}",
            subscription_months=1
        )
        print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = await db.get_payment(payment_id=test_payment_id)
        if payment:
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print(f"   - ID: {payment['payment_id']}")
            print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment['user_id']}")
            print(f"   - –°—É–º–º–∞: {payment['amount']} –∫–æ–ø–µ–µ–∫")
            print(f"   - –°—Ç–∞—Ç—É—Å: {payment['status']}")
        else:
            print(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        success = await db.complete_payment(
            payment_id=test_payment_id,
            provider_payment_id="yookassa-test-12345"
        )
        
        if success:
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
            is_subscribed = await db.check_subscription(test_user_id)
            if is_subscribed:
                print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                print(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("\n" + "="*60)
    print("‚öôÔ∏è –¢–ï–°–¢: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
    print("="*60)
    
    try:
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   - –†–µ–∂–∏–º –ÆKassa: {YOOKASSA_MODE}")
        print(f"   - –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {SUBSCRIPTION_PRICE} ‚ÇΩ")
        print(f"   - –í–∞–ª—é—Ç–∞: {YOOKASSA_CURRENCY}")
        print(f"   - –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if YOOKASSA_PROVIDER_TOKEN else '–ù–µ—Ç'}")
        print(f"   - Provider data —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if YOOKASSA_PROVIDER_DATA else '–ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º provider_data
        if YOOKASSA_PROVIDER_DATA:
            provider_data = json.loads(YOOKASSA_PROVIDER_DATA)
            print(f"   - Provider data –≤–∞–ª–∏–¥–µ–Ω: –î–∞")
            print(f"   - –¢–æ–≤–∞—Ä –≤ —á–µ–∫–µ: {provider_data['receipt']['items'][0]['description']}")
            print(f"   - –°—É–º–º–∞ –≤ —á–µ–∫–µ: {provider_data['receipt']['items'][0]['amount']['value']} {provider_data['receipt']['items'][0]['amount']['currency']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_ok = await test_configuration()
    
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    payment_service, db = await test_payment_service_initialization()
    
    if not payment_service or not db:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
        return
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
    invoice_data = await test_invoice_creation(payment_service, db)
    
    # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db_ok = await test_database_operations(db)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", config_ok),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞", payment_service is not None),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞", invoice_data is not None),
        ("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î", db_ok)
    ]
    
    passed = sum(1 for _, result in tests if result)
    total = len(tests)
    
    for test_name, result in tests:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:.<30} {status}")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")


if __name__ == "__main__":
    asyncio.run(main())
