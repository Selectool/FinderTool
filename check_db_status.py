#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
"""
import asyncio
import os
import sys

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["ENVIRONMENT"] = "production"
os.environ["PYTHONPATH"] = "/app"

async def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database.db_adapter import DatabaseAdapter
        
        database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999!@findertool-hyvrte:5432/findertool_prod')
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {database_url}")
        
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        tables_query = """
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
        """
        
        tables = await adapter.fetch_all(tables_query)
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        table_names = []
        if tables:
            for table in tables:
                if isinstance(table, (list, tuple)):
                    table_names.append(table[0])
                elif isinstance(table, dict):
                    table_names.append(table['table_name'])
                else:
                    table_names.append(str(table))

        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(table_names)}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        critical_tables = [
            'users',
            'broadcast_messages', 
            'admin_users',
            'roles',
            'message_templates'
        ]
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        for table in critical_tables:
            if table in table_names:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                count_query = f"SELECT COUNT(*) FROM {table}"
                result = await adapter.fetch_one(count_query)
                count = result[0] if result else 0
                print(f"‚úÖ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            else:
                print(f"‚ùå {table}: –ù–ï –ù–ê–ô–î–ï–ù–ê")
        
        print(f"\nüìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î:")
        for table in table_names:
            print(f"   ‚Ä¢ {table}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ admin_users
        if 'admin_users' in table_names:
            print(f"\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã admin_users:")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
            columns_query = """
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'admin_users' 
                ORDER BY ordinal_position;
            """
            columns = await adapter.fetch_all(columns_query)

            print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã admin_users:")
            for col in columns:
                if isinstance(col, (list, tuple)):
                    print(f"   ‚Ä¢ {col[0]} ({col[1]}) - nullable: {col[2]}")
                elif isinstance(col, dict):
                    print(f"   ‚Ä¢ {col['column_name']} ({col['data_type']}) - nullable: {col['is_nullable']}")
                else:
                    print(f"   ‚Ä¢ {col}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_query = "SELECT username, role, is_active, created_at FROM admin_users"
            users = await adapter.fetch_all(users_query)

            print(f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ admin_users ({len(users)}):")
            for user in users:
                if isinstance(user, (list, tuple)):
                    print(f"   ‚Ä¢ {user[0]} ({user[1]}) - –∞–∫—Ç–∏–≤–µ–Ω: {user[2]} - —Å–æ–∑–¥–∞–Ω: {user[3]}")
                elif isinstance(user, dict):
                    print(f"   ‚Ä¢ {user['username']} ({user['role']}) - –∞–∫—Ç–∏–≤–µ–Ω: {user['is_active']} - —Å–æ–∑–¥–∞–Ω: {user['created_at']}")
                else:
                    print(f"   ‚Ä¢ {user}")
        
        await adapter.disconnect()
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
    success = asyncio.run(check_database())
    
    if success:
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ admin_users –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python fix_admin_table.py")
        print("2. –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –µ—Å—Ç—å, –Ω–æ –ø—É—Å—Ç–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python fix_admin_table.py")
        print("3. –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î")
    
    sys.exit(0 if success else 1)
