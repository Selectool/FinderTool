#!/usr/bin/env python3
"""
Production-ready –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UniversalDatabase –¥–ª—è PostgreSQL
"""

import re
import os

def fix_universal_database():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å PostgreSQL –≤ UniversalDatabase"""
    
    file_path = 'database/universal_database.py'
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º backup
    with open(f'{file_path}.backup', 'w', encoding='utf-8') as f:
        f.write(content)
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è PostgreSQL
    fixes = [
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ result[0] –Ω–∞ _extract_count –¥–ª—è COUNT –∑–∞–ø—Ä–æ—Å–æ–≤
        (r'(\w+_result)\[0\]\s+if\s+\1\s+else\s+0', r'self._extract_count(\1)'),
        (r'return\s+(\w+)\[0\]\s+if\s+\1\s+else\s+0', r'return self._extract_count(\1)'),
        (r'(\w+)\s*=\s*(\w+)\[0\]\s+if\s+\2\s+else\s+0', r'\1 = self._extract_count(\2)'),
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ result[0] –≤ COUNT –∑–∞–ø—Ä–æ—Å–∞—Ö
        (r'(count_result|total_result|users_result|subs_result|active_result)\[0\]', r'self._extract_count(\1)'),
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ —Å result
        (r'if\s+(\w+):\s*\n\s*#[^\n]*\n\s*if\s+hasattr\(\1,\s*\'__getitem__\'\)[^}]+count\s*=\s*\1\[0\][^}]+else:[^}]+count\s*=\s*\1', 
         r'if \1:\n                count = self._extract_count(\1)'),
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        (r'if\s+result\s+is\s+not\s+None:\s*\n\s*#[^{]+\{\s*\n[^}]+result\[0\][^}]+\}', 
         r'if result is not None:\n                count = self._extract_count(result)'),
    ]
    
    changes_made = 0
    for pattern, replacement in fixes:
        new_content = re.sub(pattern, replacement, content, flags=re.MULTILINE | re.DOTALL)
        if new_content != content:
            matches = len(re.findall(pattern, content, flags=re.MULTILINE | re.DOTALL))
            changes_made += matches
            content = new_content
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {matches} –≤—Ö–æ–∂–¥–µ–Ω–∏–π")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    specific_fixes = [
        # get_users_count
        (r'result\s*=\s*await\s+self\.adapter\.fetch_one\("SELECT COUNT\(\*\) FROM users"\)\s*\n\s*await\s+self\.adapter\.disconnect\(\)\s*\n\s*return\s+result\[0\]\s+if\s+result\s+else\s+0',
         'result = await self.adapter.fetch_one("SELECT COUNT(*) FROM users")\n            await self.adapter.disconnect()\n            return self._extract_count(result)'),
        
        # get_active_users_count
        (r'result\s*=\s*await\s+self\.adapter\.fetch_one\(query\)\s*\n\s*await\s+self\.adapter\.disconnect\(\)\s*\n\s*return\s+result\[0\]\s+if\s+result\s+else\s+0',
         'result = await self.adapter.fetch_one(query)\n            await self.adapter.disconnect()\n            return self._extract_count(result)'),
        
        # get_subscribers_count
        (r'result\s*=\s*await\s+self\.adapter\.fetch_one\(query\)\s*\n\s*await\s+self\.adapter\.disconnect\(\)\s*\n\s*return\s+result\[0\]\s+if\s+result\s+else\s+0',
         'result = await self.adapter.fetch_one(query)\n            await self.adapter.disconnect()\n            return self._extract_count(result)'),
    ]
    
    for pattern, replacement in specific_fixes:
        new_content = re.sub(pattern, replacement, content, flags=re.MULTILINE | re.DOTALL)
        if new_content != content:
            changes_made += 1
            content = new_content
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"\nüéâ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {changes_made}")
    print(f"üìÅ Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}.backup")
    return changes_made

def apply_manual_fixes():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
    
    file_path = 'database/universal_database.py'
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –†—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–π–º–∞–ª regex
    manual_fixes = [
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º get_stats –º–µ—Ç–æ–¥
        ('stats[\'total_users\'] = total_users_result[0] if total_users_result else 0',
         'stats[\'total_users\'] = self._extract_count(total_users_result)'),
        
        ('stats[\'active_subscribers\'] = active_subs_result[0] if active_subs_result else 0',
         'stats[\'active_subscribers\'] = self._extract_count(active_subs_result)'),
        
        ('stats[\'requests_today\'] = requests_today_result[0] if requests_today_result else 0',
         'stats[\'requests_today\'] = self._extract_count(requests_today_result)'),
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
        ('return result[0] if result else 0',
         'return self._extract_count(result)'),
    ]
    
    changes_made = 0
    for old_text, new_text in manual_fixes:
        if old_text in content:
            content = content.replace(old_text, new_text)
            changes_made += 1
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {old_text[:50]}...")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"üîß –†—É—á–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {changes_made}")
    return changes_made

if __name__ == "__main__":
    print("üöÄ Production-ready –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UniversalDatabase –¥–ª—è PostgreSQL...")
    
    auto_changes = fix_universal_database()
    manual_changes = apply_manual_fixes()
    
    total_changes = auto_changes + manual_changes
    
    if total_changes > 0:
        print(f"\n‚úÖ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {total_changes}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("\n‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: python -c \"from database.migration_manager import MigrationManager; import asyncio; asyncio.run(MigrationManager().migrate())\"")
    print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: python run_admin.py")
