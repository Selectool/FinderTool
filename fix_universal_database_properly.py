#!/usr/bin/env python3
"""
–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UniversalDatabase
–î–æ–±–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–ª–∞—Ç–µ–∂–µ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
"""

import os
import re

def add_payment_methods_to_universal_database():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–ª–∞—Ç–µ–∂–µ–π –≤ UniversalDatabase"""
    
    universal_file = "database/universal_database.py"
    
    if not os.path.exists(universal_file):
        print(f"‚ùå –§–∞–π–ª {universal_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(universal_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = f"{universal_file}.backup2"
    with open(backup_file, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    
    # –ú–µ—Ç–æ–¥—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    payment_methods = '''
    # ========== –ú–ï–¢–û–î–´ –ü–õ–ê–¢–ï–ñ–ï–ô ==========
    
    async def create_payment(self, user_id: int, amount: int, currency: str = "RUB",
                           payment_id: str = None, invoice_payload: str = None,
                           subscription_months: int = 1) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            await self.adapter.connect()
            
            if self.adapter.db_type == 'sqlite':
                query = """
                    INSERT INTO payments (user_id, payment_id, amount, currency,
                                        invoice_payload, subscription_months)
                    VALUES (?, ?, ?, ?, ?, ?)
                """
                params = (user_id, payment_id, amount, currency, invoice_payload, subscription_months)
            else:  # PostgreSQL
                query = """
                    INSERT INTO payments (user_id, payment_id, amount, currency,
                                        invoice_payload, subscription_months)
                    VALUES ($1, $2, $3, $4, $5, $6)
                    RETURNING id
                """
                params = (user_id, payment_id, amount, currency, invoice_payload, subscription_months)
            
            result = await self.adapter.execute(query, params)
            return str(result) if result else "1"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            raise
        finally:
            try:
                await self.adapter.disconnect()
            except:
                pass

    async def get_payment(self, payment_id: str = None, db_id: int = None) -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –ø–æ ID"""
        try:
            await self.adapter.connect()
            
            if payment_id:
                if self.adapter.db_type == 'sqlite':
                    query = "SELECT * FROM payments WHERE payment_id = ?"
                    params = (payment_id,)
                else:  # PostgreSQL
                    query = "SELECT * FROM payments WHERE payment_id = $1"
                    params = (payment_id,)
            elif db_id:
                if self.adapter.db_type == 'sqlite':
                    query = "SELECT * FROM payments WHERE id = ?"
                    params = (db_id,)
                else:  # PostgreSQL
                    query = "SELECT * FROM payments WHERE id = $1"
                    params = (db_id,)
            else:
                return None
            
            result = await self.adapter.fetch_one(query, params)
            return dict(result) if result else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
        finally:
            try:
                await self.adapter.disconnect()
            except:
                pass

    async def complete_payment(self, payment_id: str, provider_payment_id: str = None):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
        try:
            await self.adapter.connect()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            payment = await self.get_payment(payment_id=payment_id)
            if not payment:
                logger.error(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if self.adapter.db_type == 'sqlite':
                query = """
                    UPDATE payments 
                    SET status = 'completed', provider_payment_id = ?, completed_at = ?
                    WHERE payment_id = ?
                """
                params = (provider_payment_id, datetime.now(), payment_id)
            else:  # PostgreSQL
                query = """
                    UPDATE payments 
                    SET status = 'completed', provider_payment_id = $1, completed_at = $2
                    WHERE payment_id = $3
                """
                params = (provider_payment_id, datetime.now(), payment_id)
            
            await self.adapter.execute(query, params)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            end_date = datetime.now() + timedelta(days=30 * payment['subscription_months'])
            
            if self.adapter.db_type == 'sqlite':
                sub_query = """
                    UPDATE users
                    SET is_subscribed = TRUE, subscription_end = ?,
                        last_payment_date = ?, payment_provider = 'yookassa'
                    WHERE user_id = ?
                """
                sub_params = (end_date, datetime.now(), payment['user_id'])
            else:  # PostgreSQL
                sub_query = """
                    UPDATE users
                    SET is_subscribed = TRUE, subscription_end = $1,
                        last_payment_date = $2, payment_provider = 'yookassa'
                    WHERE user_id = $3
                """
                sub_params = (end_date, datetime.now(), payment['user_id'])
            
            await self.adapter.execute(sub_query, sub_params)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
        finally:
            try:
                await self.adapter.disconnect()
            except:
                pass

    async def get_user_payments(self, user_id: int) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.adapter.connect()
            
            if self.adapter.db_type == 'sqlite':
                query = """
                    SELECT * FROM payments
                    WHERE user_id = ?
                    ORDER BY created_at DESC
                """
                params = (user_id,)
            else:  # PostgreSQL
                query = """
                    SELECT * FROM payments
                    WHERE user_id = $1
                    ORDER BY created_at DESC
                """
                params = (user_id,)
            
            results = await self.adapter.fetch_all(query, params)
            return [dict(row) for row in results] if results else []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []
        finally:
            try:
                await self.adapter.disconnect()
            except:
                pass

    async def update_payment_status(self, payment_id: str, status: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            await self.adapter.connect()
            
            if self.adapter.db_type == 'sqlite':
                query = "UPDATE payments SET status = ? WHERE payment_id = ?"
                params = (status, payment_id)
            else:  # PostgreSQL
                query = "UPDATE payments SET status = $1 WHERE payment_id = $2"
                params = (status, payment_id)
            
            await self.adapter.execute(query, params)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
        finally:
            try:
                await self.adapter.disconnect()
            except:
                pass
'''
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞ UniversalDatabase (–ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π —Å –æ—Ç—Å—Ç—É–ø–æ–º)
    lines = content.split('\n')
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
    insert_position = -1
    for i in range(len(lines) - 1, -1, -1):
        line = lines[i]
        if line.strip() and line.startswith('    ') and ('def ' in line or 'async def ' in line):
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
            for j in range(i + 1, len(lines)):
                next_line = lines[j]
                if (next_line.strip() and 
                    not next_line.startswith('    ') and 
                    not next_line.startswith('\t')):
                    insert_position = j
                    break
            if insert_position == -1:
                insert_position = len(lines)
            break
    
    if insert_position == -1:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –º–µ—Ç–æ–¥–æ–≤")
        return False
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã
    new_lines = lines[:insert_position] + payment_methods.split('\n') + lines[insert_position:]
    new_content = '\n'.join(new_lines)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(universal_file, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ UniversalDatabase")
    return True

if __name__ == "__main__":
    try:
        success = add_payment_methods_to_universal_database()
        
        if success:
            print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("üìã –î–æ–±–∞–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
            print("   ‚Ä¢ create_payment")
            print("   ‚Ä¢ get_payment") 
            print("   ‚Ä¢ complete_payment")
            print("   ‚Ä¢ get_user_payments")
            print("   ‚Ä¢ update_payment_status")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
            print("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
            print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π")
        else:
            print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
