#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è production –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from database.production_manager import ProductionDatabaseManager
from services.payment_cleanup import PaymentCleanupService
from database.universal_database import UniversalDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_production_database_manager():
    """–¢–µ—Å—Ç ProductionDatabaseManager"""
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ProductionDatabaseManager...")
    
    try:
        db_manager = ProductionDatabaseManager()
        
        # –¢–µ—Å—Ç get_stats
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_stats...")
        stats = await db_manager.get_stats()
        logger.info(f"‚úÖ get_stats: {stats}")
        
        # –¢–µ—Å—Ç get_detailed_stats
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_detailed_stats...")
        detailed_stats = await db_manager.get_detailed_stats()
        logger.info(f"‚úÖ get_detailed_stats: {detailed_stats}")
        
        # –¢–µ—Å—Ç get_users_paginated
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_users_paginated...")
        users = await db_manager.get_users_paginated(page=1, per_page=10)
        logger.info(f"‚úÖ get_users_paginated: –Ω–∞–π–¥–µ–Ω–æ {users['total']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –¢–µ—Å—Ç get_broadcasts_paginated
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_broadcasts_paginated...")
        broadcasts = await db_manager.get_broadcasts_paginated(page=1, per_page=10)
        logger.info(f"‚úÖ get_broadcasts_paginated: –Ω–∞–π–¥–µ–Ω–æ {broadcasts['total']} —Ä–∞—Å—Å—ã–ª–æ–∫")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ProductionDatabaseManager: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        return False

async def test_payment_cleanup_service():
    """–¢–µ—Å—Ç PaymentCleanupService"""
    logger.info("üßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaymentCleanupService...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä UniversalDatabase –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        db = UniversalDatabase()
        cleanup_service = PaymentCleanupService(db)
        
        # –¢–µ—Å—Ç get_cleanup_statistics
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_cleanup_statistics...")
        stats = await cleanup_service.get_cleanup_statistics()
        logger.info(f"‚úÖ get_cleanup_statistics: {stats}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ PaymentCleanupService: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("=" * 60)
    logger.info("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRODUCTION –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    logger.info("=" * 60)
    
    success_count = 0
    total_tests = 2
    
    # –¢–µ—Å—Ç ProductionDatabaseManager
    if await test_production_database_manager():
        success_count += 1
    
    # –¢–µ—Å—Ç PaymentCleanupService
    if await test_payment_cleanup_service():
        success_count += 1
    
    logger.info("=" * 60)
    logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_tests:
        logger.info("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
