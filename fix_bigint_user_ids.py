#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö user_id —Å INTEGER –Ω–∞ BIGINT
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "value out of int32 range" –¥–ª—è –±–æ–ª—å—à–∏—Ö Telegram user_id
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from database.universal_database import UniversalDatabase
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BigIntFixer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö user_id"""
    
    def __init__(self):
        self.db = UniversalDatabase()
        
    async def fix_all_bigint_issues(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å BIGINT"""
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö user_id...")
            
            await self.db.adapter.connect()
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É broadcasts
            await self.fix_broadcasts_table()
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É scheduled_broadcasts
            await self.fix_scheduled_broadcasts_table()
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É broadcast_logs (—É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å BIGINT)
            await self.check_broadcast_logs_table()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
            await self.check_users_table()
            
            await self.db.adapter.disconnect()
            logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            traceback.print_exc()
            
    async def fix_broadcasts_table(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É broadcasts"""
        logger.info("üì¢ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É broadcasts...")
        
        try:
            # –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø created_by –Ω–∞ BIGINT
            await self.db.adapter.execute("""
                ALTER TABLE broadcasts 
                ALTER COLUMN created_by TYPE BIGINT
            """)
            logger.info("‚úÖ –ü–æ–ª–µ created_by –≤ broadcasts –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ BIGINT")
        except Exception as e:
            if "does not exist" in str(e).lower():
                logger.info("‚ÑπÔ∏è –ü–æ–ª–µ created_by –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ broadcasts")
            elif "already" in str(e).lower() or "bigint" in str(e).lower():
                logger.info("‚ÑπÔ∏è –ü–æ–ª–µ created_by —É–∂–µ –∏–º–µ–µ—Ç —Ç–∏–ø BIGINT")
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è created_by –≤ broadcasts: {e}")
                
    async def fix_scheduled_broadcasts_table(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É scheduled_broadcasts"""
        logger.info("üìÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É scheduled_broadcasts...")
        
        try:
            # –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø created_by –Ω–∞ BIGINT
            await self.db.adapter.execute("""
                ALTER TABLE scheduled_broadcasts 
                ALTER COLUMN created_by TYPE BIGINT
            """)
            logger.info("‚úÖ –ü–æ–ª–µ created_by –≤ scheduled_broadcasts –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ BIGINT")
        except Exception as e:
            if "does not exist" in str(e).lower():
                logger.info("‚ÑπÔ∏è –ü–æ–ª–µ created_by –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ scheduled_broadcasts")
            elif "already" in str(e).lower() or "bigint" in str(e).lower():
                logger.info("‚ÑπÔ∏è –ü–æ–ª–µ created_by —É–∂–µ –∏–º–µ–µ—Ç —Ç–∏–ø BIGINT")
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è created_by –≤ scheduled_broadcasts: {e}")
                
    async def check_broadcast_logs_table(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É broadcast_logs"""
        logger.info("üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É broadcast_logs...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø user_id
            result = await self.db.adapter.fetch_one("""
                SELECT data_type 
                FROM information_schema.columns 
                WHERE table_name = 'broadcast_logs' 
                AND column_name = 'user_id'
            """)
            
            if result:
                data_type = result.get('data_type')
                logger.info(f"–¢–∏–ø user_id –≤ broadcast_logs: {data_type}")
                if data_type != 'bigint':
                    await self.db.adapter.execute("""
                        ALTER TABLE broadcast_logs 
                        ALTER COLUMN user_id TYPE BIGINT
                    """)
                    logger.info("‚úÖ –ü–æ–ª–µ user_id –≤ broadcast_logs –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ BIGINT")
            else:
                logger.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ broadcast_logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª–µ user_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ broadcast_logs: {e}")
            
    async def check_users_table(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É users"""
        logger.info("üë• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø user_id
            result = await self.db.adapter.fetch_one("""
                SELECT data_type 
                FROM information_schema.columns 
                WHERE table_name = 'users' 
                AND column_name = 'user_id'
            """)
            
            if result:
                data_type = result.get('data_type')
                logger.info(f"–¢–∏–ø user_id –≤ users: {data_type}")
                if data_type != 'bigint':
                    await self.db.adapter.execute("""
                        ALTER TABLE users 
                        ALTER COLUMN user_id TYPE BIGINT
                    """)
                    logger.info("‚úÖ –ü–æ–ª–µ user_id –≤ users –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ BIGINT")
            else:
                logger.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª–µ user_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ users: {e}")
            
    async def test_bigint_fix(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ BIGINT"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ BIGINT...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –±–æ–ª—å—à–∏–º user_id
            test_user_id = 5699315855  # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π user_id
            
            broadcast_id = await self.db.create_broadcast(
                title="–¢–µ—Å—Ç BIGINT",
                message_text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                target_users="all",
                created_by=test_user_id
            )
            
            if broadcast_id:
                logger.info(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –°–æ–∑–¥–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} —Å user_id {test_user_id}")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
                await self.db.adapter.execute("DELETE FROM broadcasts WHERE id = $1", broadcast_id)
                logger.info("üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É")
                
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–û–í –î–ê–ù–ù–´–• USER_ID")
    print("=" * 50)
    
    fixer = BigIntFixer()
    await fixer.fix_all_bigint_issues()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    await fixer.test_bigint_fix()
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –±–æ–ª—å—à–∏–º–∏ user_id")
    print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")

if __name__ == "__main__":
    asyncio.run(main())
