#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_users –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞
"""
import subprocess
import sys
import os
import time
import signal
import asyncio

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["ENVIRONMENT"] = "production"
os.environ["PYTHONPATH"] = "/app"
os.environ["PYTHONUNBUFFERED"] = "1"

class AdminTableFixer:
    def __init__(self):
        self.bot_process = None
        self.admin_process = None
        self.running = True
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
        self.running = False
        self.stop_services()
        sys.exit(0)
    
    def kill_processes_safe(self, process_patterns):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            for pattern in process_patterns:
                try:
                    subprocess.run(["pkill", "-f", pattern], capture_output=True)
                except FileNotFoundError:
                    try:
                        result = subprocess.run([
                            "ps", "aux"
                        ], capture_output=True, text=True)
                        
                        for line in result.stdout.split('\n'):
                            if pattern in line and 'ps aux' not in line:
                                parts = line.split()
                                if len(parts) > 1:
                                    pid = parts[1]
                                    try:
                                        subprocess.run(["kill", pid], capture_output=True)
                                        print(f"üî™ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {pid}: {pattern}")
                                    except:
                                        pass
                    except:
                        pass
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    def stop_services(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        if self.bot_process and self.bot_process.poll() is None:
            print("ü§ñ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
            self.bot_process.terminate()
            try:
                self.bot_process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                self.bot_process.kill()
                
        if self.admin_process and self.admin_process.poll() is None:
            print("üåê –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...")
            self.admin_process.terminate()
            try:
                self.admin_process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                self.admin_process.kill()
        
        self.kill_processes_safe([
            "python main.py",
            "python run_admin.py",
            "python bypass_admin.py"
        ])
    
    async def fix_admin_table(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É admin_users"""
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_users...")
        try:
            from database.db_adapter import DatabaseAdapter
            from passlib.context import CryptContext
            
            database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999!@findertool-hyvrte:5432/findertool_prod')
            adapter = DatabaseAdapter(database_url)
            await adapter.connect()
            
            pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ admin_users
                check_table_query = """
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = 'admin_users'
                    );
                """
                result = await adapter.fetch_one(check_table_query)
                table_exists = result[0] if result else False
                
                if not table_exists:
                    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_users...")
                    create_table_query = """
                        CREATE TABLE admin_users (
                            id SERIAL PRIMARY KEY,
                            username VARCHAR(255) UNIQUE NOT NULL,
                            email VARCHAR(255) UNIQUE NOT NULL,
                            password_hash TEXT NOT NULL,
                            role VARCHAR(100) NOT NULL DEFAULT 'moderator',
                            is_active BOOLEAN DEFAULT TRUE,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            last_login TIMESTAMP,
                            created_by INTEGER,
                            FOREIGN KEY (created_by) REFERENCES admin_users (id)
                        )
                    """
                    await adapter.execute(create_table_query)
                    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_users —Å–æ–∑–¥–∞–Ω–∞")
                else:
                    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_users —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                count_query = "SELECT COUNT(*) FROM admin_users"
                result = await adapter.fetch_one(count_query)
                count = result[0] if result else 0
                
                if count == 0:
                    print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
                    default_password = "admin123"
                    password_hash = pwd_context.hash(default_password)
                    
                    insert_query = """
                        INSERT INTO admin_users (username, email, password_hash, role, is_active)
                        VALUES ($1, $2, $3, $4, $5)
                    """
                    
                    await adapter.execute(insert_query, ("admin", "admin@localhost", password_hash, "super_admin", True))
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin / {default_password}")
                    print("‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!")
                else:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {count} –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                test_query = "SELECT username, role FROM admin_users WHERE username = $1"
                result = await adapter.fetch_one(test_query, ("admin",))
                
                if result:
                    print(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {result[0]} —Å —Ä–æ–ª—å—é {result[1]}")
                else:
                    print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                await adapter.disconnect()
                print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_users –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
                await adapter.disconnect()
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return False
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            self.bot_process = subprocess.Popen(
                [sys.executable, "main.py"],
                env=os.environ.copy(),
                cwd="/app"
            )
            print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {self.bot_process.pid})")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    def start_admin(self):
        """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            print("üåê –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
            
            admin_env = os.environ.copy()
            admin_env.update({
                "ADMIN_ALLOWED_HOSTS": "185.207.66.201,findertool.dokploy.com,localhost,127.0.0.1,0.0.0.0",
                "ADMIN_CORS_ORIGINS": "http://185.207.66.201:8080,https://findertool.dokploy.com,http://localhost:8080,http://127.0.0.1:8080",
                "ADMIN_HOST": "0.0.0.0",
                "ADMIN_PORT": "8080"
            })
            
            self.admin_process = subprocess.Popen(
                [sys.executable, "run_admin.py"],
                env=admin_env,
                cwd="/app"
            )
            print(f"‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ (PID: {self.admin_process.pid})")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            return False
    
    def monitor_services(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        print("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://185.207.66.201:8080")
        print("üîë –õ–æ–≥–∏–Ω: admin / admin123")
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_users –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
        
        while self.running:
            try:
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
                bot_status = "RUNNING" if (self.bot_process and self.bot_process.poll() is None) else "STOPPED"
                admin_status = "RUNNING" if (self.admin_process and self.admin_process.poll() is None) else "STOPPED"
                
                timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
                print(f"{timestamp} - Bot: {bot_status}, Admin: {admin_status}")
                
                if (self.bot_process and self.bot_process.poll() is not None and 
                    self.admin_process and self.admin_process.poll() is not None):
                    print("‚ùå –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å!")
                    break
                    
                time.sleep(30)
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(30)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_users...")
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_users")
        print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ")
        
        signal.signal(signal.SIGTERM, self.signal_handler)
        signal.signal(signal.SIGINT, self.signal_handler)
        
        try:
            self.stop_services()
            time.sleep(3)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É admin_users
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_users...")
            fix_success = asyncio.run(self.fix_admin_table())
            
            if not fix_success:
                print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫")
                return False
            
            if not self.start_bot():
                return False
            
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
            time.sleep(10)
            
            if not self.start_admin():
                self.stop_services()
                return False
            
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
            time.sleep(5)
            
            print("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
            print("ü§ñ Telegram –±–æ—Ç: –∞–∫—Ç–∏–≤–µ–Ω")
            print("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://185.207.66.201:8080")
            print("üîë –õ–æ–≥–∏–Ω: admin / admin123")
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_users –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞!")
            
            self.monitor_services()
            
        except KeyboardInterrupt:
            print("\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.stop_services()
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    manager = AdminTableFixer()
    manager.run()
