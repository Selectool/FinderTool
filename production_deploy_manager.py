#!/usr/bin/env python3
"""
Production Deploy Manager
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è–º–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import subprocess
import sys
import os
import time
import logging
import json
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

class ProductionDeployManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–ø–ª–æ–µ–≤ production"""
    
    def __init__(self):
        self.backup_dir = Path("/app/data/deploy_backups")
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        
    async def create_pre_deploy_backup(self):
        """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º"""
        logger.info("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º...")
        
        try:
            from database.db_adapter import DatabaseAdapter
            
            database_url = os.getenv('DATABASE_URL')
            adapter = DatabaseAdapter(database_url)
            await adapter.connect()
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            critical_tables = [
                'users', 'broadcast_messages', 'admin_users', 
                'audit_logs', 'message_templates', 'scheduled_broadcasts'
            ]
            
            backup_data = {
                "timestamp": datetime.now().isoformat(),
                "deploy_type": "pre_deploy_backup",
                "tables": {}
            }
            
            for table in critical_tables:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    if adapter.db_type == 'sqlite':
                        check_query = "SELECT name FROM sqlite_master WHERE type='table' AND name=?"
                    else:  # PostgreSQL
                        check_query = "SELECT table_name FROM information_schema.tables WHERE table_name = $1"
                    
                    result = await adapter.fetch_one(check_query, (table,))
                    
                    if result:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                        data = await adapter.fetch_all(f"SELECT * FROM {table}")
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                        table_data = []
                        if data:
                            for row in data:
                                if isinstance(row, dict):
                                    row_dict = {}
                                    for key, value in row.items():
                                        if isinstance(value, datetime):
                                            row_dict[key] = value.isoformat()
                                        else:
                                            row_dict[key] = value
                                    table_data.append(row_dict)
                                elif isinstance(row, (tuple, list)):
                                    row_list = []
                                    for value in row:
                                        if isinstance(value, datetime):
                                            row_list.append(value.isoformat())
                                        else:
                                            row_list.append(value)
                                    table_data.append(row_list)
                        
                        backup_data["tables"][table] = {
                            "count": len(table_data),
                            "data": table_data
                        }
                        
                        logger.info(f"‚úÖ {table}: {len(table_data)} –∑–∞–ø–∏—Å–µ–π")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø
            backup_file = self.backup_dir / f"pre_deploy_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            backup_file.write_text(json.dumps(backup_data, indent=2, ensure_ascii=False))
            
            await adapter.disconnect()
            
            logger.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {backup_file}")
            return backup_file
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return None
    
    async def apply_migrations_safely(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"""
        logger.info("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        try:
            from database.migration_manager import MigrationManager
            
            database_url = os.getenv('DATABASE_URL')
            manager = MigrationManager(database_url)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ –º–∏–≥—Ä–∞—Ü–∏–π
            logger.info("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:")
            await manager.status()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            await manager.migrate()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π
            logger.info("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:")
            await manager.status()
            
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False
    
    def restart_services_with_supervisor(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ Supervisor"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ Supervisor...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
            subprocess.run([
                "supervisorctl", "-c", "/app/supervisord_production.conf", "stop", "all"
            ], capture_output=True, timeout=30)
            
            time.sleep(5)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
            result = subprocess.run([
                "supervisorctl", "-c", "/app/supervisord_production.conf", "start", "all"
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                time.sleep(10)
                status_result = subprocess.run([
                    "supervisorctl", "-c", "/app/supervisord_production.conf", "status"
                ], capture_output=True, text=True, timeout=10)
                
                if status_result.returncode == 0:
                    logger.info("üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:")
                    for line in status_result.stdout.strip().split('\n'):
                        if line.strip():
                            logger.info(f"   {line}")
                
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Supervisor: {e}")
            return False
    
    async def verify_deployment(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–µ–ø–ª–æ—è"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–µ–ø–ª–æ—è...")
        
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            from database.db_adapter import DatabaseAdapter
            
            database_url = os.getenv('DATABASE_URL')
            adapter = DatabaseAdapter(database_url)
            await adapter.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            critical_tables = ['users', 'admin_users', 'broadcast_messages']
            for table in critical_tables:
                try:
                    count = await adapter.fetch_one(f"SELECT COUNT(*) FROM {table}")
                    count_value = count[0] if count else 0
                    checks.append(f"‚úÖ {table}: {count_value} –∑–∞–ø–∏—Å–µ–π")
                except Exception as e:
                    checks.append(f"‚ùå {table}: –æ—à–∏–±–∫–∞ - {e}")
            
            await adapter.disconnect()
            
        except Exception as e:
            checks.append(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        import httpx
        
        endpoints = [
            "http://127.0.0.1:8080/health",
            "http://127.0.0.1:8080/api/health"
        ]
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            for endpoint in endpoints:
                try:
                    response = await client.get(endpoint)
                    if response.status_code == 200:
                        checks.append(f"‚úÖ {endpoint}: OK")
                    else:
                        checks.append(f"‚ö†Ô∏è {endpoint}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                except Exception as e:
                    checks.append(f"‚ùå {endpoint}: –æ—à–∏–±–∫–∞ - {e}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–ª–æ—è:")
        for check in checks:
            logger.info(f"   {check}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        failed_checks = [check for check in checks if check.startswith("‚ùå")]
        if failed_checks:
            logger.error(f"‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏: {len(failed_checks)} –ø—Ä–æ–±–ª–µ–º")
            return False
        else:
            logger.info("‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return True
    
    async def run_production_deploy(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å production –¥–µ–ø–ª–æ–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Production Deploy...")
        
        deploy_start_time = datetime.now()
        
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
            backup_file = await self.create_pre_deploy_backup()
            if not backup_file:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–µ–ø–ª–æ–π")
                return False
            
            # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            if not await self.apply_migrations_safely():
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–µ–ø–ª–æ–π")
                return False
            
            # 3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            if not self.restart_services_with_supervisor():
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–µ–ø–ª–æ–π")
                return False
            
            # 4. –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            await asyncio.sleep(30)
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–µ–ø–ª–æ—è
            if not await self.verify_deployment():
                logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è –Ω–µ –ø—Ä–æ—à–ª–∞")
                return False
            
            deploy_duration = datetime.now() - deploy_start_time
            
            logger.info("üéâ PRODUCTION DEPLOY –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–µ–ø–ª–æ—è: {deploy_duration}")
            logger.info(f"üì¶ –ë—ç–∫–∞–ø: {backup_file}")
            logger.info("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://185.207.66.201:8080")
            logger.info("üîë –õ–æ–≥–∏–Ω: admin / admin123")
            logger.info("üìä –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º Supervisor")
            logger.info("üîÑ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    deploy_manager = ProductionDeployManager()
    success = await deploy_manager.run_production_deploy()
    
    if not success:
        logger.error("‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
    else:
        logger.info("‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
