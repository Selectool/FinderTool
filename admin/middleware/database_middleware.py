"""
Production-ready Database Middleware –¥–ª—è FastAPI
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import logging
import time
import os
from typing import Callable
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware

from database.universal_database import UniversalDatabase

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_environment():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å fallback"""
    try:
        return os.getenv("ENVIRONMENT", "production")
    except Exception:
        return "production"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
_ENVIRONMENT_CACHE = None

def get_cached_environment():
    """–ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    global _ENVIRONMENT_CACHE
    if _ENVIRONMENT_CACHE is None:
        _ENVIRONMENT_CACHE = get_environment()
    return _ENVIRONMENT_CACHE

logger = logging.getLogger(__name__)

class DatabaseConnectionMiddleware(BaseHTTPMiddleware):
    """
    Production-ready middleware –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    - Graceful handling –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    """
    
    def __init__(self, app, database_url: str):
        super().__init__(app)
        self.database_url = database_url
        self.db_instance = None
        self.connection_errors = 0
        self.last_error_time = 0
        self.max_connection_errors = 5
        self.error_reset_interval = 300  # 5 –º–∏–Ω—É—Ç
        
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ë–î"""
        start_time = time.time()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db = await self._get_database_instance()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self._ensure_healthy_connection(db)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ë–î –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            request.state.db = db
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = await call_next(request)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            if self.connection_errors > 0:
                self.connection_errors = 0
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            return response
            
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self._handle_database_error(e)
            
            # –°–æ–∑–¥–∞–µ–º fallback response
            return await self._create_error_response(request, e)
            
        finally:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = time.time() - start_time
            if execution_time > 1.0:  # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                logger.warning(f"‚è±Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î: {execution_time:.2f}s –¥–ª—è {request.url.path}")
    
    async def _get_database_instance(self) -> UniversalDatabase:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_instance:
            self.db_instance = UniversalDatabase(self.database_url)
            logger.debug("üîß –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UniversalDatabase")
        
        return self.db_instance
    
    async def _ensure_healthy_connection(self, db: UniversalDatabase):
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–¥–æ—Ä–æ–≤–æ–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not db.adapter.connection or db.adapter.connection.is_closed():
                logger.debug("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                await db.adapter.connect()
            
            # –ü—Ä–æ—Å—Ç–æ–π health check
            await db.adapter.fetch_one("SELECT 1 as health_check")
            
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ë–î: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            try:
                await db.adapter.connect()
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
            except Exception as reconnect_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {reconnect_error}")
                raise
    
    async def _handle_database_error(self, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        current_time = time.time()

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.connection_errors += 1
        self.last_error_time = current_time

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        try:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö #{self.connection_errors}: {error}")
        except Exception as log_error:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º print
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö #{self.connection_errors}: {error}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_error}")

        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if self.connection_errors >= self.max_connection_errors:
            try:
                logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ë–î ({self.connection_errors}), —Å–±—Ä–æ—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            except:
                print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ë–î ({self.connection_errors}), —Å–±—Ä–æ—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")

            if self.db_instance:
                try:
                    await self.db_instance.adapter.disconnect()
                except:
                    pass
                self.db_instance = None
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if current_time - self.last_error_time > self.error_reset_interval:
            self.connection_errors = 0
            logger.info("üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ë–î")
    
    async def _create_error_response(self, request: Request, error: Exception) -> Response:
        """–°–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
        from fastapi.responses import JSONResponse
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if "connection" in str(error).lower() or "closed" in str(error).lower():
            error_message = "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            status_code = 503  # Service Unavailable
        else:
            error_message = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            status_code = 500
        
        # –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
        if request.url.path.startswith("/api/"):
            return JSONResponse(
                status_code=status_code,
                content={
                    "error": error_message,
                    "details": "Database connection issue" if status_code == 503 else "Internal server error",
                    "timestamp": time.time()
                }
            )
        
        # –î–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML
        from fastapi.responses import HTMLResponse
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; text-align: center; padding: 50px; }}
                .error {{ color: #d32f2f; }}
                .retry {{ margin-top: 20px; }}
            </style>
        </head>
        <body>
            <h1 class="error">‚ö†Ô∏è {error_message}</h1>
            <p>–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.</p>
            <div class="retry">
                <button onclick="window.location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        </body>
        </html>
        """
        
        return HTMLResponse(content=html_content, status_code=status_code)

class DatabaseHealthCheck:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.db = UniversalDatabase(database_url)
    
    async def check_health(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await self.db.adapter.connect()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            result = await self.db.adapter.fetch_one("SELECT 1 as test, NOW() as current_time")
            
            response_time = time.time() - start_time
            
            return {
                "status": "healthy",
                "response_time_ms": round(response_time * 1000, 2),
                "database_time": str(result.get("current_time")) if result else None,
                "connection_status": "active",
                "timestamp": time.time()
            }
            
        except Exception as e:
            return {
                "status": "unhealthy",
                "error": str(e),
                "connection_status": "failed",
                "timestamp": time.time()
            }
        
        finally:
            try:
                await self.db.adapter.disconnect()
            except:
                pass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è health checks
_health_checker = None

def get_health_checker(database_url: str = None) -> DatabaseHealthCheck:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä health checker"""
    global _health_checker
    if not _health_checker and database_url:
        _health_checker = DatabaseHealthCheck(database_url)
    return _health_checker
