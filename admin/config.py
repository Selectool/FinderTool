"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""
import os
import sys
import logging
from pathlib import Path
from dotenv import load_dotenv

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ .env —Ñ–∞–π–ª–∞
if ENVIRONMENT == "development":
    env_file = ".env.development"
elif ENVIRONMENT == "production":
    env_file = ".env"
else:
    env_file = ".env"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if os.path.exists(env_file):
    load_dotenv(env_file)
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {env_file}")
else:
    load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π .env
    print(f"‚ö†Ô∏è  –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .env")

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º ENVIRONMENT –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ .env
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É—á–µ—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
if ENVIRONMENT == "development":
    DEFAULT_SECRET_KEY = "your-super-secret-key-change-in-production"
    DEFAULT_DEBUG = "True"
    DEFAULT_HOST = "127.0.0.1"
else:
    DEFAULT_SECRET_KEY = "your-super-secret-key-change-in-production"
    DEFAULT_DEBUG = "False"
    DEFAULT_HOST = "0.0.0.0"

SECRET_KEY = os.getenv("ADMIN_SECRET_KEY", DEFAULT_SECRET_KEY)
DEBUG = os.getenv("ADMIN_DEBUG", DEFAULT_DEBUG).lower() == "true"
HOST = os.getenv("ADMIN_HOST", DEFAULT_HOST)
PORT = int(os.getenv("ADMIN_PORT", "8080"))

# JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É—á–µ—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
if ENVIRONMENT == "development":
    DEFAULT_JWT_SECRET = "your-jwt-secret-key-change-in-production"
    DEFAULT_ACCESS_EXPIRE = "60"  # 1 —á–∞—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    DEFAULT_REFRESH_EXPIRE = "30"  # 30 –¥–Ω–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
else:
    DEFAULT_JWT_SECRET = SECRET_KEY
    DEFAULT_ACCESS_EXPIRE = "30"  # 30 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
    DEFAULT_REFRESH_EXPIRE = "7"  # 7 –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω

JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY", DEFAULT_JWT_SECRET)
JWT_ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")
JWT_ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("JWT_ACCESS_TOKEN_EXPIRE_MINUTES", DEFAULT_ACCESS_EXPIRE))
JWT_REFRESH_TOKEN_EXPIRE_DAYS = int(os.getenv("JWT_REFRESH_TOKEN_EXPIRE_DAYS", DEFAULT_REFRESH_EXPIRE))

# ============ SECURITY VALIDATION ============
def validate_security_keys():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è production-ready —Å–∏—Å—Ç–µ–º—ã"""
    import secrets
    import hashlib

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å JWT –∫–ª—é—á–∞
    if len(JWT_SECRET_KEY) < 32:
        if ENVIRONMENT == "production":
            raise ValueError("JWT_SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è production!")
        else:
            print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: JWT_SECRET_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è production")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ production
    default_patterns = [
        "dev-", "test-", "auto-generated", "change-in-production",
        "your-", "secret-key", "jwt-secret"
    ]

    if ENVIRONMENT == "production":
        for pattern in default_patterns:
            if pattern in JWT_SECRET_KEY.lower() or pattern in SECRET_KEY.lower():
                raise ValueError(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω '{pattern}' –≤ –∫–ª—é—á–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! "
                               f"–ò–∑–º–µ–Ω–∏—Ç–µ –∫–ª—é—á–∏ –¥–ª—è production!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é –∫–ª—é—á–µ–π
    jwt_entropy = len(set(JWT_SECRET_KEY))
    if jwt_entropy < 16:
        if ENVIRONMENT == "production":
            raise ValueError("JWT_SECRET_KEY –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é —ç–Ω—Ç—Ä–æ–ø–∏—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á.")
        else:
            print(f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: JWT_SECRET_KEY –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é —ç–Ω—Ç—Ä–æ–ø–∏—é ({jwt_entropy} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)")

    print(f"üîê –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {'‚úÖ –ü–†–û–ô–î–ï–ù–ê' if ENVIRONMENT != 'production' or jwt_entropy >= 16 else '‚ùå –ü–†–û–í–ê–õ–ï–ù–ê'}")

# –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
validate_security_keys()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ PostgreSQL)
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("DATABASE_URL –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞! –£–∫–∞–∂–∏—Ç–µ PostgreSQL URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not (DATABASE_URL.startswith('postgresql://') or DATABASE_URL.startswith('postgres://')):
    raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PostgreSQL. DATABASE_URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'postgresql://' –∏–ª–∏ 'postgres://'.")

# –†–∞—Å—Å—ã–ª–∫–∏
BROADCAST_RATE_LIMIT = int(os.getenv("BROADCAST_RATE_LIMIT", "30"))  # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
BROADCAST_BATCH_SIZE = int(os.getenv("BROADCAST_BATCH_SIZE", "100"))
BROADCAST_RETRY_ATTEMPTS = int(os.getenv("BROADCAST_RETRY_ATTEMPTS", "3"))

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
NOTIFICATION_WEBHOOK_URL = os.getenv("NOTIFICATION_WEBHOOK_URL", "")
NOTIFICATION_EMAIL_SMTP = os.getenv("NOTIFICATION_EMAIL_SMTP", "")

# Telegram Bot (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫)
BOT_TOKEN = os.getenv("BOT_TOKEN", "")

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
if ENVIRONMENT == "development":
    DEFAULT_ALLOWED_HOSTS = "127.0.0.1,localhost"
    DEFAULT_CORS_ORIGINS = "http://localhost:8080,http://127.0.0.1:8080"
else:
    DEFAULT_ALLOWED_HOSTS = "*"
    DEFAULT_CORS_ORIGINS = "https://your-domain.com"

ALLOWED_HOSTS = os.getenv("ADMIN_ALLOWED_HOSTS", DEFAULT_ALLOWED_HOSTS).split(",")
CORS_ORIGINS = os.getenv("ADMIN_CORS_ORIGINS", DEFAULT_CORS_ORIGINS).split(",")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL = os.getenv("ADMIN_LOG_LEVEL", "INFO")
LOG_FILE = os.getenv("ADMIN_LOG_FILE", "admin.log")

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è
DEFAULT_PAGE_SIZE = int(os.getenv("DEFAULT_PAGE_SIZE", "50"))
MAX_PAGE_SIZE = int(os.getenv("MAX_PAGE_SIZE", "200"))

# –§–∞–π–ª—ã
UPLOAD_DIR = os.getenv("UPLOAD_DIR", "uploads")
MAX_UPLOAD_SIZE = int(os.getenv("MAX_UPLOAD_SIZE", "10485760"))  # 10MB

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SKIP_SSL_VERIFY = os.getenv("SKIP_SSL_VERIFY", "False").lower() == "true"
ENABLE_DEBUG_ROUTES = os.getenv("ENABLE_DEBUG_ROUTES", "False").lower() == "true"
MOCK_PAYMENTS = os.getenv("MOCK_PAYMENTS", "False").lower() == "true"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(UPLOAD_DIR, exist_ok=True)

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
def validate_config():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        from admin.utils.config_validator import ConfigValidator, auto_fix_dev_config

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_dict = {
            "ENVIRONMENT": ENVIRONMENT,
            "BOT_TOKEN": BOT_TOKEN,
            "API_ID": os.getenv("API_ID"),
            "API_HASH": os.getenv("API_HASH"),
            "ADMIN_USER_ID": os.getenv("ADMIN_USER_ID"),
            "ADMIN_SECRET_KEY": SECRET_KEY,
            "ADMIN_HOST": HOST,
            "ADMIN_PORT": PORT,
            "ADMIN_DEBUG": DEBUG,
            "ADMIN_ALLOWED_HOSTS": ",".join(ALLOWED_HOSTS),
            "ADMIN_CORS_ORIGINS": ",".join(CORS_ORIGINS),
            "JWT_SECRET_KEY": JWT_SECRET_KEY,
            "JWT_ALGORITHM": JWT_ALGORITHM,
            "JWT_ACCESS_TOKEN_EXPIRE_MINUTES": JWT_ACCESS_TOKEN_EXPIRE_MINUTES,
            "JWT_REFRESH_TOKEN_EXPIRE_DAYS": JWT_REFRESH_TOKEN_EXPIRE_DAYS,
            "DATABASE_URL": DATABASE_URL,
            "YOOKASSA_MODE": os.getenv("YOOKASSA_MODE", "TEST"),
            "YOOKASSA_SHOP_ID": os.getenv("YOOKASSA_SHOP_ID"),
            "YOOKASSA_SECRET_KEY": os.getenv("YOOKASSA_SECRET_KEY"),
            "SKIP_SSL_VERIFY": SKIP_SSL_VERIFY,
            "ENABLE_DEBUG_ROUTES": ENABLE_DEBUG_ROUTES,
            "MOCK_PAYMENTS": MOCK_PAYMENTS,
        }

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if ENVIRONMENT == "development":
            config_dict = auto_fix_dev_config(config_dict)
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            globals()["SECRET_KEY"] = config_dict["ADMIN_SECRET_KEY"]
            globals()["JWT_SECRET_KEY"] = config_dict["JWT_SECRET_KEY"]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validator = ConfigValidator(ENVIRONMENT)
        is_valid = validator.validate_all(config_dict)

        # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
        report = validator.get_report()
        if report:
            print("üîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
            print(report)
            print("-" * 50)

        if not is_valid and ENVIRONMENT == "production":
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –í –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú–ï!")
            print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
            sys.exit(1)

    except ImportError:
        print("‚ö†Ô∏è  –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
validate_config()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
print(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {ENVIRONMENT}")
print(f"üè† –•–æ—Å—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {HOST}:{PORT}")
print(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–≤–∫–ª—é—á–µ–Ω' if DEBUG else '–≤—ã–∫–ª—é—á–µ–Ω'}")
if ENVIRONMENT == "development":
    print("üîë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
