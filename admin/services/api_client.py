"""
Production-ready API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∏ —É–¥–∞–ª–µ–Ω–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏
"""
import os
import asyncio
import logging
from typing import Optional, Dict, Any, List, Union
from datetime import datetime, timedelta
import httpx
from fastapi import HTTPException, status
import ssl

logger = logging.getLogger(__name__)


class APIClientConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.environment = os.getenv("ENVIRONMENT", "development")
        self.base_url = os.getenv("API_BASE_URL", "http://127.0.0.1:8080")
        self.fallback_url = os.getenv("API_FALLBACK_URL", "http://185.207.66.201:8080")
        self.timeout = float(os.getenv("API_TIMEOUT", "30"))
        self.retry_attempts = int(os.getenv("API_RETRY_ATTEMPTS", "3"))
        self.ssl_verify = os.getenv("API_SSL_VERIFY", "True").lower() == "true"
        self.use_local_auth = os.getenv("API_USE_LOCAL_AUTH", "True").lower() == "true"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        if self.environment == "production":
            self.ssl_verify = True
            self.timeout = 60
            self.retry_attempts = 5
        
        logger.info(f"üîß API Client Config: env={self.environment}, base={self.base_url}, ssl_verify={self.ssl_verify}")


class ProductionAPIClient:
    """Production-ready API –∫–ª–∏–µ–Ω—Ç —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏"""
    
    def __init__(self):
        self.config = APIClientConfig()
        self._health_cache: Dict[str, Dict[str, Any]] = {}
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        self.ssl_context = None
        if self.config.ssl_verify and self.config.environment == "production":
            self.ssl_context = ssl.create_default_context()
            self.ssl_context.check_hostname = True
            self.ssl_context.verify_mode = ssl.CERT_REQUIRED
    
    async def _check_endpoint_health(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint"""
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º health check, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if self.config.environment == "development" and url == self.config.base_url:
            logger.debug(f"üîß –ü—Ä–æ–ø—É—Å–∫–∞–µ–º health check –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ endpoint: {url}")
            return True

        cache_key = f"health_{url}"
        now = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self._health_cache:
            cache_data = self._health_cache[cache_key]
            if now - cache_data["timestamp"] < timedelta(seconds=self._cache_ttl):
                return cache_data["healthy"]

        try:
            async with httpx.AsyncClient(
                timeout=5.0,
                verify=self.config.ssl_verify
            ) as client:
                response = await client.get(f"{url}/health", timeout=5.0)
                healthy = response.status_code == 200

                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._health_cache[cache_key] = {
                    "healthy": healthy,
                    "timestamp": now
                }

                return healthy

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Health check failed for {url}: {e}")
            # –ö—ç—à–∏—Ä—É–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è
            self._health_cache[cache_key] = {
                "healthy": False,
                "timestamp": now - timedelta(seconds=self._cache_ttl - 60)
            }
            return False
    
    async def _get_available_endpoints(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        endpoints = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
        if await self._check_endpoint_health(self.config.base_url):
            endpoints.append(self.config.base_url)
            logger.debug(f"‚úÖ Primary endpoint available: {self.config.base_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback endpoint
        if self.config.fallback_url and self.config.fallback_url != self.config.base_url:
            if await self._check_endpoint_health(self.config.fallback_url):
                endpoints.append(self.config.fallback_url)
                logger.debug(f"‚úÖ Fallback endpoint available: {self.config.fallback_url}")
        
        if not endpoints:
            logger.error("‚ùå No healthy endpoints available")
        
        return endpoints
    
    async def _make_request(
        self,
        method: str,
        endpoint: str,
        data: Optional[Dict[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> httpx.Response:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        
        available_endpoints = await self._get_available_endpoints()
        
        if not available_endpoints:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="–í—Å–µ API —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )
        
        last_exception = None
        
        for attempt in range(self.config.retry_attempts):
            for base_url in available_endpoints:
                try:
                    url = f"{base_url}{endpoint}"
                    
                    async with httpx.AsyncClient(
                        timeout=self.config.timeout,
                        verify=self.config.ssl_verify
                    ) as client:
                        
                        if method.upper() == "GET":
                            response = await client.get(url, headers=headers, **kwargs)
                        elif method.upper() == "POST":
                            response = await client.post(url, json=data, headers=headers, **kwargs)
                        elif method.upper() == "PUT":
                            response = await client.put(url, json=data, headers=headers, **kwargs)
                        elif method.upper() == "DELETE":
                            response = await client.delete(url, headers=headers, **kwargs)
                        else:
                            raise ValueError(f"Unsupported HTTP method: {method}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                        logger.debug(f"‚úÖ API request successful: {method} {url} -> {response.status_code}")
                        return response
                        
                except httpx.TimeoutException as e:
                    last_exception = e
                    logger.warning(f"‚è±Ô∏è Timeout for {base_url}: attempt {attempt + 1}/{self.config.retry_attempts}")
                    
                except httpx.ConnectError as e:
                    last_exception = e
                    logger.warning(f"üîå Connection error for {base_url}: {e}")
                    # –ü–æ–º–µ—á–∞–µ–º endpoint –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
                    cache_key = f"health_{base_url}"
                    self._health_cache[cache_key] = {
                        "healthy": False,
                        "timestamp": datetime.now()
                    }
                    
                except Exception as e:
                    last_exception = e
                    logger.error(f"‚ùå Unexpected error for {base_url}: {e}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt < self.config.retry_attempts - 1:
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
        
        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        logger.error(f"‚ùå All API requests failed after {self.config.retry_attempts} attempts")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(last_exception)}"
        )
    
    async def authenticate(self, username: str, password: str) -> Dict[str, Any]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if self.config.environment == "development":
            try:
                logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è {username}")
                return await self._local_authenticate(username, password)
            except Exception as e:
                logger.error(f"‚ùå Local auth failed: {e}")
                raise HTTPException(
                    status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                    detail="–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                )

        # API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        try:
            response = await self._make_request(
                "POST",
                "/api/auth/login",
                data={"username": username, "password": password}
            )

            if response.status_code == 200:
                return response.json()
            elif response.status_code == 401:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
                )
            else:
                raise HTTPException(
                    status_code=response.status_code,
                    detail=f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.text}"
                )

        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå Authentication failed: {e}")
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
    
    async def _local_authenticate(self, username: str, password: str) -> Dict[str, Any]:
        """–õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
        try:
            from ..auth.auth import authenticate_user, create_tokens
            from database.universal_database import UniversalDatabase
            
            db = UniversalDatabase()
            user = await authenticate_user(db, username, password)
            
            if not user:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
                )
            
            if not user["is_active"]:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                )
            
            tokens = create_tokens(user)
            logger.info(f"‚úÖ Local authentication successful for user: {username}")
            return tokens
            
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå Local authentication error: {e}")
            raise


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
api_client = ProductionAPIClient()
