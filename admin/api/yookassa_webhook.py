"""
API endpoint –¥–ª—è webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa
"""
import logging
from fastapi import APIRouter, Request, HTTPException, Depends
from fastapi.responses import JSONResponse

from database.universal_database import UniversalDatabase
from services.yookassa_webhook import create_webhook_handler
from config import YOOKASSA_MODE

logger = logging.getLogger(__name__)
router = APIRouter()


async def get_database_instance():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = UniversalDatabase()
    await db.init_db()
    return db


@router.post("/yookassa/webhook")
async def yookassa_webhook(request: Request, db: UniversalDatabase = Depends(get_database_instance)):
    """
    Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        payload = body.decode('utf-8')
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = dict(request.headers)
        signature = headers.get('x-yookassa-signature', '')
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –ÆKassa:")
        logger.info(f"  - –†–µ–∂–∏–º: {YOOKASSA_MODE}")
        logger.info(f"  - –†–∞–∑–º–µ—Ä payload: {len(payload)} –±–∞–π—Ç")
        logger.info(f"  - –ü–æ–¥–ø–∏—Å—å: {signature[:20]}..." if signature else "  - –ü–æ–¥–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü–∞—Ä—Å–∏–º JSON
        import json
        try:
            notification_data = json.loads(payload)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            raise HTTPException(status_code=400, detail="Invalid JSON")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤
        webhook_handler = create_webhook_handler(db=db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        if signature and not webhook_handler.verify_signature(payload, signature):
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            raise HTTPException(status_code=401, detail="Invalid signature")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await webhook_handler.handle_payment_notification(notification_data)
        
        if success:
            logger.info("‚úÖ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return JSONResponse(
                status_code=200,
                content={"status": "success", "message": "Webhook processed successfully"}
            )
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            raise HTTPException(status_code=500, detail="Webhook processing failed")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@router.get("/yookassa/webhook/test")
async def test_webhook_endpoint():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook'–∞
    """
    return JSONResponse(
        status_code=200,
        content={
            "status": "ok",
            "message": "–ÆKassa webhook endpoint is working",
            "mode": YOOKASSA_MODE,
            "timestamp": "2025-07-27T17:52:00Z"
        }
    )


@router.post("/yookassa/webhook/test")
async def test_webhook_processing(request: Request, db: UniversalDatabase = Depends(get_database_instance)):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        body = await request.body()
        payload = body.decode('utf-8')
        
        import json
        notification_data = json.loads(payload)
        
        logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤
        webhook_handler = create_webhook_handler(db=db)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await webhook_handler.handle_payment_notification(notification_data)
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "success" if success else "error",
                "message": "Test webhook processed",
                "processed": success
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": str(e)
            }
        )
