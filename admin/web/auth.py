"""
–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
from fastapi import APIRouter, Request, Form, HTTPException, status, Depends, Cookie, Query
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from typing import Optional
import httpx
import logging
import os
from datetime import datetime

from ..auth.auth import verify_token
from ..auth.models import TokenData
from ..services.api_client import api_client

templates = Jinja2Templates(directory="admin/templates")
router = APIRouter()
logger = logging.getLogger(__name__)


async def get_current_user_from_cookie(access_token: Optional[str] = Cookie(None)) -> Optional[TokenData]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie"""
    if not access_token:
        return None

    token_data = verify_token(access_token)
    return token_data


@router.get("/login", response_class=HTMLResponse)
async def login_page(
    request: Request,
    current_user: Optional[TokenData] = Depends(get_current_user_from_cookie)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ dashboard
    if current_user:
        return RedirectResponse(url="/dashboard", status_code=302)

    return templates.TemplateResponse("auth/login.html", {"request": request})


@router.post("/login")
async def login_submit(
    request: Request,
    username: str = Form(...),
    password: str = Form(...)
):
    """
    Production-ready –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∏ —É–¥–∞–ª–µ–Ω–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å fallback
    """

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è –∞—É–¥–∏—Ç–∞
    client_ip = request.client.host if request.client else "unknown"
    user_agent = request.headers.get("user-agent", "unknown")

    logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={username}, IP={client_ip}")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º production-ready API –∫–ª–∏–µ–Ω—Ç
        token_data = await api_client.authenticate(username, password)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è cookies
        is_production = os.getenv("ENVIRONMENT") == "production"
        secure_cookies = is_production

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
        redirect_response = RedirectResponse(url="/dashboard", status_code=302)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ cookies —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        redirect_response.set_cookie(
            key="access_token",
            value=token_data["access_token"],
            httponly=True,
            secure=secure_cookies,
            samesite="strict" if is_production else "lax",
            max_age=token_data.get("expires_in", 1800)
        )

        redirect_response.set_cookie(
            key="refresh_token",
            value=token_data["refresh_token"],
            httponly=True,
            secure=secure_cookies,
            samesite="strict" if is_production else "lax",
            max_age=7 * 24 * 60 * 60  # 7 –¥–Ω–µ–π
        )

        # –¢–æ–∫–µ–Ω –¥–ª—è JavaScript (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        redirect_response.set_cookie(
            key="js_access_token",
            value=token_data["access_token"],
            httponly=False,  # JavaScript –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
            secure=secure_cookies,  # HTTPS –≤ production
            samesite="strict" if is_production else "lax",
            max_age=token_data.get("expires_in", 1800)
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={username}, IP={client_ip}")

        return redirect_response

    except HTTPException as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTTP –æ—à–∏–±–∫–∏ –æ—Ç API –∫–ª–∏–µ–Ω—Ç–∞
        error_detail = e.detail
        status_code = e.status_code

        if status_code == 401:
            error_detail = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
            logger.warning(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={username}, IP={client_ip}")
        elif status_code == 503:
            error_detail = "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.error(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –≤—Ö–æ–¥–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={username}, IP={client_ip}")
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {status_code} - {error_detail}")

        return templates.TemplateResponse(
            "auth/login.html",
            {
                "request": request,
                "error": error_detail,
                "username": username
            }
        )

    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}", exc_info=True)

        return templates.TemplateResponse(
            "auth/login.html",
            {
                "request": request,
                "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "username": username
            }
        )


@router.get("/logout")
async def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    response = RedirectResponse(url="/", status_code=302)
    response.delete_cookie("access_token")
    response.delete_cookie("refresh_token")
    response.delete_cookie("js_access_token")
    response.delete_cookie("csrf_token")
    return response

@router.get("/token-login")
async def token_login(token: str = Query(...), request: Request = None):
    """
    Secure –∞–≤—Ç–æ–ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Telegram –±–æ—Ç–∞
    Production-ready endpoint —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–æ—Ç–∞
        from bot.handlers.admin_access import token_manager
        from admin.security.production_auth import security_manager

        logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ token login —Å —Ç–æ–∫–µ–Ω–æ–º: {token[:20]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –±–æ—Ç–∞
        temp_payload = token_manager.verify_token(token)

        if not temp_payload:
            logger.warning("‚ö†Ô∏è –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
            return HTMLResponse(
                content="""
                <html>
                    <head><title>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞</title></head>
                    <body style="font-family: Arial; text-align: center; padding: 50px;">
                        <h1>üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
                        <p>–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.</p>
                        <p>–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin –≤ –±–æ—Ç–µ.</p>
                        <a href="https://t.me/FinderTool_bot">ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É</a>
                    </body>
                </html>
                """,
                status_code=403
            )

        user_id = temp_payload.get('user_id')
        username = temp_payload.get('username')

        logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_USER_IDS', '').split(",") if id.strip()]

        if user_id not in admin_ids:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return HTMLResponse(
                content="""
                <html>
                    <head><title>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</title></head>
                    <body style="font-family: Arial; text-align: center; padding: 50px;">
                        <h1>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</h1>
                        <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏.</p>
                        <a href="https://t.me/FinderTool_bot">ü§ñ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É</a>
                    </body>
                </html>
                """,
                status_code=403
            )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        access_token = security_manager.generate_jwt_token(user_id, "access")
        refresh_token = security_manager.generate_jwt_token(user_id, "refresh")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSRF —Ç–æ–∫–µ–Ω
        csrf_token = security_manager.generate_csrf_token(user_id)

        # –û—Ç–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
        token_manager._remove_token(user_id, token)

        logger.info(f"üéâ –£—Å–ø–µ—à–Ω—ã–π –∞–≤—Ç–æ–ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} (@{username})")

        # –°–æ–∑–¥–∞–µ–º response —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
        response = RedirectResponse(url="/dashboard", status_code=302)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º secure cookies
        response.set_cookie(
            key="access_token",
            value=access_token,
            max_age=3600,  # 1 —á–∞—Å
            httponly=True,
            secure=True if os.getenv('ENVIRONMENT') == 'production' else False,
            samesite="lax"
        )

        response.set_cookie(
            key="refresh_token",
            value=refresh_token,
            max_age=2592000,  # 30 –¥–Ω–µ–π
            httponly=True,
            secure=True if os.getenv('ENVIRONMENT') == 'production' else False,
            samesite="lax"
        )

        response.set_cookie(
            key="csrf_token",
            value=csrf_token,
            max_age=3600,  # 1 —á–∞—Å
            httponly=False,  # –ù—É–∂–µ–Ω –¥–ª—è JavaScript
            secure=True if os.getenv('ENVIRONMENT') == 'production' else False,
            samesite="lax"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è JavaScript (–±–µ–∑ httponly)
        response.set_cookie(
            key="js_access_token",
            value=access_token,
            max_age=3600,  # 1 —á–∞—Å
            httponly=False,  # JavaScript –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å
            secure=True if os.getenv('ENVIRONMENT') == 'production' else False,
            samesite="lax"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –∞—É–¥–∏—Ç–∞
        try:
            from database.universal_database import UniversalDatabase
            db = UniversalDatabase()
            await db.log_admin_action(
                admin_id=user_id,
                action="secure_token_login",
                details={
                    "username": username,
                    "login_method": "telegram_token",
                    "ip_address": request.client.host if request and request.client else "unknown",
                    "user_agent": request.headers.get("user-agent") if request else "unknown",
                    "timestamp": datetime.now().isoformat()
                }
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –∞—É–¥–∏—Ç–∞: {e}")

        return response

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ token login: {e}")
        return HTMLResponse(
            content="""
            <html>
                <head><title>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</title></head>
                <body style="font-family: Arial; text-align: center; padding: 50px;">
                    <h1>‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h1>
                    <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.</p>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin –≤ –±–æ—Ç–µ.</p>
                    <a href="https://t.me/FinderTool_bot">ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É</a>
                </body>
            </html>
            """,
            status_code=500
        )
