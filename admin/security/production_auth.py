"""
Production-Ready Security –¥–ª—è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
JWT Authentication, Rate Limiting, CSRF Protection
Senior Developer —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import hashlib
import hmac
import logging
import secrets
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from functools import wraps

import jwt
from fastapi import HTTPException, Request, Depends, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import RedirectResponse
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

from config import SECRET_KEY, JWT_SECRET_KEY, ADMIN_USER_IDS

logger = logging.getLogger(__name__)

# Rate Limiter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
limiter = Limiter(key_func=get_remote_address)

# Security —Å—Ö–µ–º–∞ –¥–ª—è JWT
security = HTTPBearer()

class ProductionSecurityManager:
    """Production-ready –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.jwt_secret = JWT_SECRET_KEY or SECRET_KEY
        self.algorithm = "HS256"
        self.access_token_expire = 3600  # 1 —á–∞—Å
        self.refresh_token_expire = 2592000  # 30 –¥–Ω–µ–π
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
        self.active_sessions: Dict[str, Dict[str, Any]] = {}
        
        # Blacklist –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        self.token_blacklist: set = set()
        
        # –°—á–µ—Ç—á–∏–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
        self.failed_attempts: Dict[str, List[float]] = {}
        
        # CSRF —Ç–æ–∫–µ–Ω—ã
        self.csrf_tokens: Dict[str, Dict[str, Any]] = {}
    
    def generate_jwt_token(self, user_id: int, token_type: str = "access") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            now = datetime.utcnow()
            
            if token_type == "access":
                expire = now + timedelta(seconds=self.access_token_expire)
            elif token_type == "refresh":
                expire = now + timedelta(seconds=self.refresh_token_expire)
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞: {token_type}")
            
            payload = {
                "user_id": user_id,
                "type": token_type,
                "iat": now,
                "exp": expire,
                "jti": secrets.token_urlsafe(16),  # JWT ID –¥–ª—è –æ—Ç–∑—ã–≤–∞
                "iss": "telegram-bot-admin",  # Issuer
                "aud": "admin-panel"  # Audience
            }
            
            token = jwt.encode(payload, self.jwt_secret, algorithm=self.algorithm)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            self._store_active_session(user_id, token, payload)
            
            logger.info(f"üîê –°–æ–∑–¥–∞–Ω {token_type} —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return token
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞: {e}")
            raise
    
    def verify_jwt_token(self, token: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º blacklist
            if token in self.token_blacklist:
                logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–æ–∑–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
                return None
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            payload = jwt.decode(
                token, 
                self.jwt_secret, 
                algorithms=[self.algorithm],
                audience="admin-panel",
                issuer="telegram-bot-admin"
            )
            
            user_id = payload.get("user_id")
            jti = payload.get("jti")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            if not self._verify_active_session(user_id, jti):
                logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞: {user_id}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self._verify_admin_permissions(user_id):
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: {user_id}")
                return None
            
            return payload
            
        except jwt.ExpiredSignatureError:
            logger.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
            return None
        except jwt.InvalidTokenError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    def _store_active_session(self, user_id: int, token: str, payload: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        jti = payload.get("jti")
        if user_id not in self.active_sessions:
            self.active_sessions[user_id] = {}
        
        self.active_sessions[user_id][jti] = {
            "token": token,
            "created_at": time.time(),
            "expires_at": payload.get("exp").timestamp() if payload.get("exp") else 0,
            "type": payload.get("type"),
            "last_activity": time.time()
        }
    
    def _verify_active_session(self, user_id: int, jti: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        if user_id not in self.active_sessions:
            return False
        
        session = self.active_sessions[user_id].get(jti)
        if not session:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if session["expires_at"] < time.time():
            self._remove_session(user_id, jti)
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        session["last_activity"] = time.time()
        return True
    
    def _verify_admin_permissions(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        admin_ids = [int(id.strip()) for id in ADMIN_USER_IDS.split(",") if id.strip()]
        return user_id in admin_ids
    
    def _remove_session(self, user_id: int, jti: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if user_id in self.active_sessions and jti in self.active_sessions[user_id]:
            del self.active_sessions[user_id][jti]
            if not self.active_sessions[user_id]:
                del self.active_sessions[user_id]
    
    def revoke_token(self, token: str) -> bool:
        """–û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ blacklist
            self.token_blacklist.add(token)
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            payload = jwt.decode(
                token, 
                self.jwt_secret, 
                algorithms=[self.algorithm],
                options={"verify_exp": False}  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞
            )
            
            user_id = payload.get("user_id")
            jti = payload.get("jti")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            self._remove_session(user_id, jti)
            
            logger.info(f"üîê –¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def revoke_all_user_tokens(self, user_id: int) -> int:
        """–û—Ç–∑—ã–≤ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        count = 0
        
        if user_id in self.active_sessions:
            sessions = self.active_sessions[user_id].copy()
            
            for jti, session in sessions.items():
                token = session["token"]
                self.token_blacklist.add(token)
                count += 1
            
            del self.active_sessions[user_id]
        
        logger.info(f"üîê –û—Ç–æ–∑–≤–∞–Ω–æ {count} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return count
    
    def generate_csrf_token(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSRF —Ç–æ–∫–µ–Ω–∞"""
        csrf_token = secrets.token_urlsafe(32)
        
        self.csrf_tokens[csrf_token] = {
            "user_id": user_id,
            "created_at": time.time(),
            "expires_at": time.time() + 3600  # 1 —á–∞—Å
        }
        
        return csrf_token
    
    def verify_csrf_token(self, csrf_token: str, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF —Ç–æ–∫–µ–Ω–∞"""
        if csrf_token not in self.csrf_tokens:
            return False
        
        token_data = self.csrf_tokens[csrf_token]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if token_data["expires_at"] < time.time():
            del self.csrf_tokens[csrf_token]
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if token_data["user_id"] != user_id:
            return False
        
        return True
    
    def check_rate_limit(self, identifier: str, max_attempts: int = 5, window: int = 300) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting"""
        current_time = time.time()
        
        if identifier not in self.failed_attempts:
            self.failed_attempts[identifier] = []
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        self.failed_attempts[identifier] = [
            attempt for attempt in self.failed_attempts[identifier]
            if current_time - attempt < window
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.failed_attempts[identifier]) >= max_attempts:
            logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è {identifier}")
            return False
        
        return True
    
    def record_failed_attempt(self, identifier: str):
        """–ó–∞–ø–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
        if identifier not in self.failed_attempts:
            self.failed_attempts[identifier] = []
        
        self.failed_attempts[identifier].append(time.time())
    
    def cleanup_expired_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        current_time = time.time()
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
        for user_id in list(self.active_sessions.keys()):
            sessions = self.active_sessions[user_id]
            expired_sessions = [
                jti for jti, session in sessions.items()
                if session["expires_at"] < current_time
            ]
            
            for jti in expired_sessions:
                del sessions[jti]
            
            if not sessions:
                del self.active_sessions[user_id]
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö CSRF —Ç–æ–∫–µ–Ω–æ–≤
        expired_csrf = [
            token for token, data in self.csrf_tokens.items()
            if data["expires_at"] < current_time
        ]
        
        for token in expired_csrf:
            del self.csrf_tokens[token]
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        for identifier in list(self.failed_attempts.keys()):
            self.failed_attempts[identifier] = [
                attempt for attempt in self.failed_attempts[identifier]
                if current_time - attempt < 3600  # –•—Ä–∞–Ω–∏–º 1 —á–∞—Å
            ]
            
            if not self.failed_attempts[identifier]:
                del self.failed_attempts[identifier]
    
    def get_security_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            "active_sessions": sum(len(sessions) for sessions in self.active_sessions.values()),
            "blacklisted_tokens": len(self.token_blacklist),
            "csrf_tokens": len(self.csrf_tokens),
            "failed_attempts_ips": len(self.failed_attempts),
            "total_failed_attempts": sum(len(attempts) for attempts in self.failed_attempts.values())
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_manager = ProductionSecurityManager()

# Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
async def get_current_admin(credentials: HTTPAuthorizationCredentials = Depends(security)) -> Dict[str, Any]:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    token = credentials.credentials
    payload = security_manager.verify_jwt_token(token)
    
    if not payload:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    return payload

# Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CSRF —Ç–æ–∫–µ–Ω–∞
async def verify_csrf(request: Request, current_admin: Dict = Depends(get_current_admin)) -> bool:
    """Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CSRF —Ç–æ–∫–µ–Ω–∞"""
    if request.method in ["POST", "PUT", "DELETE", "PATCH"]:
        csrf_token = request.headers.get("X-CSRF-Token")
        
        if not csrf_token:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="CSRF —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
        
        user_id = current_admin.get("user_id")
        
        if not security_manager.verify_csrf_token(csrf_token, user_id):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω"
            )
    
    return True

# Rate limiting decorator
def rate_limit(max_calls: int = 10, window: int = 60):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è rate limiting"""
    def decorator(func):
        @wraps(func)
        async def wrapper(request: Request, *args, **kwargs):
            client_ip = get_remote_address(request)
            
            if not security_manager.check_rate_limit(client_ip, max_calls, window):
                raise HTTPException(
                    status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                    detail="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            
            try:
                return await func(request, *args, **kwargs)
            except HTTPException as e:
                if e.status_code in [401, 403]:
                    security_manager.record_failed_attempt(client_ip)
                raise
        
        return wrapper
    return decorator

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    'security_manager', 
    'get_current_admin', 
    'verify_csrf', 
    'rate_limit',
    'limiter'
]
