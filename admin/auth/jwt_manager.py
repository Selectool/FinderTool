"""
Production-ready JWT Token Manager
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- Token blacklisting
- Session management
- Key rotation (–¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π)
- Proper error handling
"""

import time
import secrets
import hashlib
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, Set, List
from jose import JWTError, jwt
import logging
from dataclasses import dataclass
from threading import Lock

from ..config import JWT_SECRET_KEY, JWT_ALGORITHM, JWT_ACCESS_TOKEN_EXPIRE_MINUTES, JWT_REFRESH_TOKEN_EXPIRE_DAYS, ENVIRONMENT

logger = logging.getLogger(__name__)

@dataclass
class TokenInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ"""
    user_id: int
    username: str
    role: str
    token_type: str
    jti: str  # JWT ID –¥–ª—è –æ—Ç–∑—ã–≤–∞
    issued_at: datetime
    expires_at: datetime
    last_activity: datetime

class ProductionJWTManager:
    """Production-ready –º–µ–Ω–µ–¥–∂–µ—Ä JWT —Ç–æ–∫–µ–Ω–æ–≤"""
    
    def __init__(self):
        self.secret_key = JWT_SECRET_KEY
        self.algorithm = JWT_ALGORITHM
        self.access_token_expire_minutes = JWT_ACCESS_TOKEN_EXPIRE_MINUTES
        self.refresh_token_expire_days = JWT_REFRESH_TOKEN_EXPIRE_DAYS
        
        # Thread-safe —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        self._lock = Lock()
        self._active_sessions: Dict[str, TokenInfo] = {}  # jti -> TokenInfo
        self._user_sessions: Dict[int, Set[str]] = {}     # user_id -> set of jti
        self._blacklisted_tokens: Set[str] = set()        # –û—Ç–æ–∑–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._stats = {
            'tokens_created': 0,
            'tokens_verified': 0,
            'tokens_revoked': 0,
            'failed_verifications': 0
        }
        
        logger.info(f"üîê JWT Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {ENVIRONMENT}")
        self._validate_configuration()
    
    def _validate_configuration(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JWT"""
        if len(self.secret_key) < 32:
            if ENVIRONMENT == "production":
                raise ValueError("JWT_SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è production!")
            logger.warning("‚ö†Ô∏è  JWT_SECRET_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è production")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        unsafe_patterns = ["dev-", "test-", "auto-generated", "change-in-production"]
        if ENVIRONMENT == "production":
            for pattern in unsafe_patterns:
                if pattern in self.secret_key.lower():
                    raise ValueError(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω '{pattern}' –≤ JWT_SECRET_KEY –¥–ª—è production!")
        
        logger.info("‚úÖ JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
    
    def create_token_pair(self, user_id: int, username: str, role: str = "admin") -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã access + refresh —Ç–æ–∫–µ–Ω–æ–≤"""
        with self._lock:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ JTI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                access_jti = secrets.token_urlsafe(16)
                refresh_jti = secrets.token_urlsafe(16)
                
                now = datetime.utcnow()
                
                # Access token
                access_expire = now + timedelta(minutes=self.access_token_expire_minutes)
                access_payload = {
                    "sub": str(user_id),
                    "username": username,
                    "role": role,
                    "type": "access",
                    "jti": access_jti,
                    "iat": now,
                    "exp": access_expire,
                    "iss": "telegram-bot-admin",
                    "aud": "admin-panel"
                }
                
                # Refresh token
                refresh_expire = now + timedelta(days=self.refresh_token_expire_days)
                refresh_payload = {
                    "sub": str(user_id),
                    "username": username,
                    "role": role,
                    "type": "refresh",
                    "jti": refresh_jti,
                    "iat": now,
                    "exp": refresh_expire,
                    "iss": "telegram-bot-admin",
                    "aud": "admin-panel"
                }
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                access_token = jwt.encode(access_payload, self.secret_key, algorithm=self.algorithm)
                refresh_token = jwt.encode(refresh_payload, self.secret_key, algorithm=self.algorithm)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö
                access_info = TokenInfo(
                    user_id=user_id,
                    username=username,
                    role=role,
                    token_type="access",
                    jti=access_jti,
                    issued_at=now,
                    expires_at=access_expire,
                    last_activity=now
                )
                
                refresh_info = TokenInfo(
                    user_id=user_id,
                    username=username,
                    role=role,
                    token_type="refresh",
                    jti=refresh_jti,
                    issued_at=now,
                    expires_at=refresh_expire,
                    last_activity=now
                )
                
                self._active_sessions[access_jti] = access_info
                self._active_sessions[refresh_jti] = refresh_info
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–µ—Å—Å–∏—è–º
                if user_id not in self._user_sessions:
                    self._user_sessions[user_id] = set()
                self._user_sessions[user_id].add(access_jti)
                self._user_sessions[user_id].add(refresh_jti)
                
                self._stats['tokens_created'] += 2
                
                logger.info(f"üîê –°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
                
                return {
                    "access_token": access_token,
                    "refresh_token": refresh_token,
                    "token_type": "bearer",
                    "expires_in": self.access_token_expire_minutes * 60,
                    "refresh_expires_in": self.refresh_token_expire_days * 24 * 60 * 60
                }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
                raise
    
    def verify_token(self, token: str, expected_type: str = "access") -> Optional[TokenInfo]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞"""
        with self._lock:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º blacklist
                token_hash = hashlib.sha256(token.encode()).hexdigest()
                if token_hash in self._blacklisted_tokens:
                    logger.warning("‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–æ–∑–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
                    self._stats['failed_verifications'] += 1
                    return None
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
                payload = jwt.decode(
                    token,
                    self.secret_key,
                    algorithms=[self.algorithm],
                    audience="admin-panel",
                    issuer="telegram-bot-admin"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
                if payload.get("type") != expected_type:
                    logger.warning(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞: –æ–∂–∏–¥–∞–ª—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {payload.get('type')}")
                    self._stats['failed_verifications'] += 1
                    return None
                
                jti = payload.get("jti")
                if not jti or jti not in self._active_sessions:
                    logger.warning("‚ö†Ô∏è  –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö")
                    self._stats['failed_verifications'] += 1
                    return None
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
                token_info = self._active_sessions[jti]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                token_info.last_activity = datetime.utcnow()
                
                self._stats['tokens_verified'] += 1
                
                logger.debug(f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è {token_info.username}")
                return token_info
                
            except jwt.ExpiredSignatureError:
                logger.warning("‚ö†Ô∏è  JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
                self._stats['failed_verifications'] += 1
                return None
            except jwt.JWTError as e:
                logger.warning(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω: {e}")
                self._stats['failed_verifications'] += 1
                return None
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞: {e}")
                self._stats['failed_verifications'] += 1
                return None
    
    def revoke_token(self, token: str) -> bool:
        """–û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞"""
        with self._lock:
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ blacklist
                token_hash = hashlib.sha256(token.encode()).hexdigest()
                self._blacklisted_tokens.add(token_hash)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JTI –∏–∑ —Ç–æ–∫–µ–Ω–∞
                try:
                    payload = jwt.decode(token, self.secret_key, algorithms=[self.algorithm], options={"verify_exp": False})
                    jti = payload.get("jti")
                    user_id = int(payload.get("sub", 0))
                    
                    if jti and jti in self._active_sessions:
                        del self._active_sessions[jti]
                        
                        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
                        if user_id in self._user_sessions:
                            self._user_sessions[user_id].discard(jti)
                            if not self._user_sessions[user_id]:
                                del self._user_sessions[user_id]
                    
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞
                
                self._stats['tokens_revoked'] += 1
                logger.info("üîê –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
                return False
    
    def revoke_user_sessions(self, user_id: int) -> int:
        """–û—Ç–∑—ã–≤ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._lock:
            try:
                if user_id not in self._user_sessions:
                    return 0
                
                user_jtis = self._user_sessions[user_id].copy()
                revoked_count = 0
                
                for jti in user_jtis:
                    if jti in self._active_sessions:
                        del self._active_sessions[jti]
                        revoked_count += 1
                
                del self._user_sessions[user_id]
                self._stats['tokens_revoked'] += revoked_count
                
                logger.info(f"üîê –û—Ç–æ–∑–≤–∞–Ω–æ {revoked_count} —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return revoked_count
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                return 0
    
    def cleanup_expired_sessions(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        with self._lock:
            try:
                now = datetime.utcnow()
                expired_jtis = []
                
                for jti, token_info in self._active_sessions.items():
                    if token_info.expires_at < now:
                        expired_jtis.append(jti)
                
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
                for jti in expired_jtis:
                    token_info = self._active_sessions[jti]
                    del self._active_sessions[jti]
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
                    user_id = token_info.user_id
                    if user_id in self._user_sessions:
                        self._user_sessions[user_id].discard(jti)
                        if not self._user_sessions[user_id]:
                            del self._user_sessions[user_id]
                
                if expired_jtis:
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_jtis)} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
                
                return len(expired_jtis)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: {e}")
                return 0
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            return {
                **self._stats,
                'active_sessions': len(self._active_sessions),
                'active_users': len(self._user_sessions),
                'blacklisted_tokens': len(self._blacklisted_tokens)
            }

    def clear_all_sessions(self) -> int:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–¥–ª—è —Å–º–µ–Ω—ã –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)"""
        with self._lock:
            try:
                session_count = len(self._active_sessions)
                self._active_sessions.clear()
                self._user_sessions.clear()
                self._blacklisted_tokens.clear()

                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {session_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
                return session_count

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
                return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
jwt_manager = ProductionJWTManager()
