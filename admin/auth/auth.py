"""
JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å production-ready —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞–º–∏
"""
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import HTTPException, status
import json
import logging

from ..config import JWT_SECRET_KEY, JWT_ALGORITHM, JWT_ACCESS_TOKEN_EXPIRE_MINUTES, JWT_REFRESH_TOKEN_EXPIRE_DAYS
from .models import TokenData
from .jwt_manager import jwt_manager

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å"""
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à –ø–∞—Ä–æ–ª—è"""
    return pwd_context.hash(password)


def create_access_token(data: Dict[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    """–°–æ–∑–¥–∞—Ç—å access —Ç–æ–∫–µ–Ω (DEPRECATED - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ jwt_manager.create_token_pair)"""
    logger.warning("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ create_access_token. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è jwt_manager.create_token_pair")

    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    user_id = data.get("sub", 0)
    username = data.get("username", "unknown")
    role = data.get("role", "admin")

    try:
        user_id = int(user_id)
    except (ValueError, TypeError):
        user_id = 0

    token_pair = jwt_manager.create_token_pair(user_id, username, role)
    return token_pair["access_token"]


def create_refresh_token(data: Dict[str, Any]) -> str:
    """–°–æ–∑–¥–∞—Ç—å refresh —Ç–æ–∫–µ–Ω (DEPRECATED - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ jwt_manager.create_token_pair)"""
    logger.warning("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—ã–π –º–µ—Ç–æ–¥ create_refresh_token. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è jwt_manager.create_token_pair")

    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    user_id = data.get("sub", 0)
    username = data.get("username", "unknown")
    role = data.get("role", "admin")

    try:
        user_id = int(user_id)
    except (ValueError, TypeError):
        user_id = 0

    token_pair = jwt_manager.create_token_pair(user_id, username, role)
    return token_pair["refresh_token"]


def create_token_pair(user_id: int, username: str, role: str = "admin") -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤ (access + refresh) - –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –ú–ï–¢–û–î"""
    return jwt_manager.create_token_pair(user_id, username, role)


def verify_token(token: str, token_type: str = "access") -> Optional[TokenData]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º production-ready –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        logger.info(f"üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Ç–∏–ø–∞ {token_type}: {token[:20]}...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π JWT –º–µ–Ω–µ–¥–∂–µ—Ä
        token_info = jwt_manager.verify_token(token, token_type)

        if not token_info:
            logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ JWT –º–µ–Ω–µ–¥–∂–µ—Ä–µ")
            return None

        logger.info(f"üîç –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞: user_id={token_info.user_id}, username={token_info.username}, role={token_info.role}")

        token_data = TokenData(
            user_id=token_info.user_id,
            username=token_info.username,
            role=token_info.role
        )

        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è {token_info.username}")
        return token_data

    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


def revoke_token(token: str) -> bool:
    """–û—Ç–æ–∑–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"""
    return jwt_manager.revoke_token(token)


def revoke_user_sessions(user_id: int) -> int:
    """–û—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return jwt_manager.revoke_user_sessions(user_id)


def get_jwt_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É JWT"""
    return jwt_manager.get_stats()


def create_tokens(user: Dict[str, Any]) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    access_token_expires = timedelta(minutes=JWT_ACCESS_TOKEN_EXPIRE_MINUTES)
    
    token_data = {
        "sub": str(user["id"]),
        "username": user["username"],
        "role": user["role"]
    }
    
    access_token = create_access_token(
        data=token_data,
        expires_delta=access_token_expires
    )
    
    refresh_token = create_refresh_token(data=token_data)
    
    return {
        "access_token": access_token,
        "refresh_token": refresh_token,
        "token_type": "bearer",
        "expires_in": JWT_ACCESS_TOKEN_EXPIRE_MINUTES * 60
    }


async def authenticate_user(db, username: str, password: str) -> Optional[Dict[str, Any]]:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_admin_user_by_username(username)
    if not user:
        return None
    
    if not verify_password(password, user["password_hash"]):
        return None
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await db.update_admin_user_login(user["id"])
    
    return user


def require_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return True


def check_permission(user_role: str, required_permission: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤
    role_permissions = {
        "super_admin": ["*"],  # –í—Å–µ –ø—Ä–∞–≤–∞
        "admin": [
            "users.view", "users.edit", "users.delete",
            "broadcasts.view", "broadcasts.create", "broadcasts.edit", "broadcasts.delete",
            "statistics.view", "audit.view"
        ],
        "moderator": [
            "users.view", "broadcasts.view", "broadcasts.create",
            "statistics.view"
        ]
    }

    user_permissions = role_permissions.get(user_role, [])

    # –°—É–ø–µ—Ä –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
    if "*" in user_permissions:
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ
    return required_permission in user_permissions
