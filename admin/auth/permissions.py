"""
–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
Production-Ready Universal Authentication
"""
from functools import wraps
from typing import List, Optional
from fastapi import HTTPException, status, Depends, Request, Cookie
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import logging

from .auth import verify_token, check_permission
from .models import TokenData

logger = logging.getLogger(__name__)

# –°—Ö–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security = HTTPBearer(auto_error=False)  # auto_error=False –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ cookies


async def get_current_user_universal(
    request: Request,
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security),
    access_token: Optional[str] = Cookie(None)
) -> TokenData:
    """
    Production-Ready Universal Authentication
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ Authorization header –∏ cookies
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )

    token = None
    auth_method = None

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Authorization header
    if credentials and credentials.credentials:
        token = credentials.credentials
        auth_method = "Authorization header"
        logger.debug(f"üîê –¢–æ–∫–µ–Ω –∏–∑ Authorization header: {token[:20]}...")

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Cookie
    elif access_token:
        token = access_token
        auth_method = "Cookie"
        logger.debug(f"üîê –¢–æ–∫–µ–Ω –∏–∑ cookie: {token[:20]}...")

    if not token:
        logger.warning("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö, –Ω–∏ –≤ cookies")
        raise credentials_exception

    logger.info(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ({auth_method}): {token[:20]}...")

    token_data = verify_token(token)
    if token_data is None:
        logger.warning(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ({auth_method})")
        raise credentials_exception

    logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω ({auth_method}). –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {token_data.username}, —Ä–æ–ª—å: {token_data.role}")
    return token_data


async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)) -> TokenData:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ Authorization header)
    Deprecated: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_current_user_universal –¥–ª—è production
    """
    if not credentials:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Authorization header required",
            headers={"WWW-Authenticate": "Bearer"},
        )

    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )

    logger.info(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: {credentials.credentials[:20]}...")

    token_data = verify_token(credentials.credentials)
    if token_data is None:
        logger.warning("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        raise credentials_exception

    logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {token_data.username}, —Ä–æ–ª—å: {token_data.role}")
    return token_data


async def get_current_active_user(current_user: TokenData = Depends(get_current_user)) -> TokenData:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return current_user


def require_permissions(permissions: List[str]):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            current_user = None
            for key, value in kwargs.items():
                if isinstance(value, TokenData):
                    current_user = value
                    break
            
            if not current_user:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Authentication required"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            for permission in permissions:
                if not check_permission(current_user.role, permission):
                    raise HTTPException(
                        status_code=status.HTTP_403_FORBIDDEN,
                        detail=f"Permission denied: {permission}"
                    )
            
            return await func(*args, **kwargs)
        return wrapper
    return decorator


class PermissionChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å FastAPI"""

    def __init__(self, required_permissions: List[str]):
        self.required_permissions = required_permissions

    def __call__(self, current_user: TokenData = Depends(get_current_active_user)) -> TokenData:
        import logging
        logger = logging.getLogger(__name__)

        logger.info(f"üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.username} (—Ä–æ–ª—å: {current_user.role})")
        logger.info(f"üîí –¢—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–∞–≤–∞: {self.required_permissions}")

        for permission in self.required_permissions:
            has_permission = check_permission(current_user.role, permission)
            logger.info(f"üîí –ü—Ä–∞–≤–æ '{permission}': {'‚úÖ –ï–°–¢–¨' if has_permission else '‚ùå –ù–ï–¢'}")

            if not has_permission:
                logger.warning(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è {current_user.username}: –Ω–µ—Ç –ø—Ä–∞–≤–∞ {permission}")
                raise HTTPException(
                    status_code=status.HTTP_403_FORBIDDEN,
                    detail=f"Permission denied: {permission}"
                )

        logger.info(f"‚úÖ –í—Å–µ –ø—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –¥–ª—è {current_user.username}")
        return current_user


# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
RequireUserView = PermissionChecker(["users.view"])
RequireUserEdit = PermissionChecker(["users.edit"])
RequireBroadcastCreate = PermissionChecker(["broadcasts.create"])
RequireBroadcastSend = PermissionChecker(["broadcasts.send"])
RequireStatisticsView = PermissionChecker(["statistics.view"])
RequireTemplateManage = PermissionChecker(["templates.create", "templates.edit"])
RequireAuditView = PermissionChecker(["audit.view"])
RequireSuperAdmin = PermissionChecker(["*"])


def log_admin_action(action: str, resource_type: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞"""
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ request –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            current_user = None
            request = None
            db = None
            
            for key, value in kwargs.items():
                if isinstance(value, TokenData):
                    current_user = value
                elif isinstance(value, Request):
                    request = value
                elif hasattr(value, 'log_admin_action'):  # UniversalDatabase instance
                    db = value
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            result = await func(*args, **kwargs)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if current_user and db:
                try:
                    import json
                    details_dict = {
                        "function": func.__name__,
                        "args": str(args)[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        "result": "success"
                    }

                    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–µ—Ç–∞–ª–∏ –≤ JSON —Å—Ç—Ä–æ–∫—É
                    details_json = json.dumps(details_dict, ensure_ascii=False)

                    ip_address = None
                    user_agent = None

                    if request:
                        ip_address = request.client.host if request.client else None
                        user_agent = request.headers.get("user-agent")

                    await db.log_admin_action(
                        admin_user_id=current_user.user_id,
                        action=action,
                        resource_type=resource_type,
                        details=details_json,  # –ü–µ—Ä–µ–¥–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É
                        ip_address=ip_address,
                        user_agent=user_agent
                    )
                except Exception as e:
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            return result
        return wrapper
    return decorator


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
ALL_PERMISSIONS = [
    {"name": "users.view", "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "category": "users"},
    {"name": "users.edit", "description": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "category": "users"},
    {"name": "users.manage_subscription", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", "category": "users"},
    {"name": "broadcasts.create", "description": "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫", "category": "broadcasts"},
    {"name": "broadcasts.send", "description": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫", "category": "broadcasts"},
    {"name": "broadcasts.view", "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–æ–∫", "category": "broadcasts"},
    {"name": "templates.create", "description": "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤", "category": "templates"},
    {"name": "templates.edit", "description": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤", "category": "templates"},
    {"name": "templates.delete", "description": "–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤", "category": "templates"},
    {"name": "statistics.view", "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "category": "statistics"},
    {"name": "audit.view", "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", "category": "audit"},
    {"name": "system.logs", "description": "–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏", "category": "system"},
]
