#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

def test_environment():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['BOT_TOKEN', 'DATABASE_URL', 'ADMIN_HOST', 'ADMIN_PORT']
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}: {'*' * 10}...{value[-4:] if len(value) > 4 else value}")
        else:
            print(f"  ‚ùå {var}: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def test_files():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    files_to_check = [
        'app.py',
        'main.py', 
        'run_admin.py',
        'dokploy_launcher.py',
        'start_production.py'
    ]
    
    available_files = []
    
    for file in files_to_check:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}: –ù–∞–π–¥–µ–Ω")
            available_files.append(file)
        else:
            print(f"  ‚ùå {file}: –ù–µ –Ω–∞–π–¥–µ–Ω")
    
    return available_files

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    imports_to_test = [
        ('aiogram', 'Telegram Bot API'),
        ('fastapi', 'FastAPI Framework'),
        ('uvicorn', 'ASGI Server'),
        ('asyncpg', 'PostgreSQL Driver'),
        ('jwt', 'JWT Tokens'),
        ('aiosqlite', 'SQLite Driver')
    ]
    
    available_imports = []
    
    for module, description in imports_to_test:
        try:
            __import__(module)
            print(f"  ‚úÖ {module}: {description}")
            available_imports.append(module)
        except ImportError:
            print(f"  ‚ùå {module}: {description} - –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    return available_imports

def test_launch_options():
    """–¢–µ—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞"""
    print("\nüöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞:")
    
    launch_options = []
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ï–¥–∏–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if os.path.exists('app.py'):
        try:
            import app
            print("  ‚úÖ python app.py - –ï–¥–∏–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
            launch_options.append('app.py')
        except Exception as e:
            print(f"  ‚ö†Ô∏è python app.py - –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: Dokploy launcher
    if os.path.exists('dokploy_launcher.py'):
        print("  ‚úÖ python dokploy_launcher.py - Dokploy launcher")
        launch_options.append('dokploy_launcher.py')
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –†–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    if os.path.exists('main.py') and os.path.exists('run_admin.py'):
        print("  ‚úÖ python start_production.py - –†–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
        launch_options.append('start_production.py')
    
    # –í–∞—Ä–∏–∞–Ω—Ç 4: –¢–æ–ª—å–∫–æ –±–æ—Ç
    if os.path.exists('main.py'):
        print("  ‚úÖ python main.py - –¢–æ–ª—å–∫–æ Telegram –±–æ—Ç")
        launch_options.append('main.py')
    
    # –í–∞—Ä–∏–∞–Ω—Ç 5: –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if os.path.exists('run_admin.py'):
        print("  ‚úÖ python run_admin.py - –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        launch_options.append('run_admin.py')
    
    return launch_options

def recommend_launch_command():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞"""
    print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è Dokploy Run Command:")
    
    if os.path.exists('app.py'):
        print("  ü•á –õ–£–ß–®–ò–ô –í–´–ë–û–†: python app.py")
        print("     ‚Ä¢ –ï–¥–∏–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –±–æ—Ç–∞ + –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        print("     ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
        print("     ‚Ä¢ Production-ready –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
        print("     ‚Ä¢ Health checks –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    elif os.path.exists('dokploy_launcher.py'):
        print("  ü•à –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: python dokploy_launcher.py")
        print("     ‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π launcher")
        print("     ‚Ä¢ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞")
        print("     ‚Ä¢ Fallback –Ω–∞ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
    elif os.path.exists('start_production.py'):
        print("  ü•â LEGACY: python start_production.py")
        print("     ‚Ä¢ –†–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
        print("     ‚Ä¢ –ë–æ–ª—å—à–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
    else:
        print("  ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ó–ê–ü–£–°–ö–ê - Telegram Channel Finder Bot")
    print("üèóÔ∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railpack/Dokploy")
    print("=" * 60)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {os.getenv('ENVIRONMENT', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}")
    
    # –¢–µ—Å—Ç—ã
    env_ok = test_environment()
    available_files = test_files()
    available_imports = test_imports()
    launch_options = test_launch_options()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommend_launch_command()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 60)
    
    print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {'–û–ö' if env_ok else '–ü–†–û–ë–õ–ï–ú–´'}")
    print(f"üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(available_files)}")
    print(f"üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏: {len(available_imports)}")
    print(f"üöÄ –í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞: {len(launch_options)}")
    
    if env_ok and available_files and available_imports and launch_options:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£!")
        
        if 'app.py' in available_files:
            print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø DOKPLOY:")
            print("   Run Command: python app.py")
        else:
            print("\nüéØ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø DOKPLOY:")
            print("   Run Command: python dokploy_launcher.py")
            
    else:
        print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
