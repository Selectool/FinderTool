#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL-only —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_config_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        original_db_url = os.environ.get('DATABASE_URL')
        
        # –¢–µ—Å—Ç 1: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ DATABASE_URL
        if 'DATABASE_URL' in os.environ:
            del os.environ['DATABASE_URL']
        
        try:
            import config
            logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ DATABASE_URL")
            return False
        except ValueError as e:
            if "DATABASE_URL –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" in str(e):
                logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è DATABASE_URL")
            else:
                logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {e}")  # –õ—é–±–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - —Ö–æ—Ä–æ—à–æ
        
        # –¢–µ—Å—Ç 2: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
        os.environ['DATABASE_URL'] = 'sqlite:///test.db'
        
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
            if 'config' in sys.modules:
                del sys.modules['config']
            import config
            logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–ª—è SQLite URL")
            return False
        except ValueError as e:
            if "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PostgreSQL" in str(e):
                logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è SQLite URL")
            else:
                logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {e}")  # –õ—é–±–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è PostgreSQL - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        if original_db_url:
            os.environ['DATABASE_URL'] = original_db_url
        elif 'DATABASE_URL' in os.environ:
            del os.environ['DATABASE_URL']
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        if 'config' in sys.modules:
            del sys.modules['config']
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_database_adapter():
    """–¢–µ—Å—Ç DatabaseAdapter"""
    logger.info("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DatabaseAdapter...")
    
    try:
        from database.db_adapter import DatabaseAdapter
        
        # –¢–µ—Å—Ç 1: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
        try:
            adapter = DatabaseAdapter('sqlite:///test.db')
            logger.error("‚ùå DatabaseAdapter –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–ª—è SQLite URL")
            return False
        except ValueError as e:
            if "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PostgreSQL" in str(e):
                logger.info("‚úÖ DatabaseAdapter –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç URL")
            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False
        
        # –¢–µ—Å—Ç 2: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π PostgreSQL URL (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        database_url = os.getenv('DATABASE_URL')
        if database_url and database_url.startswith('postgresql'):
            try:
                adapter = DatabaseAdapter(database_url)
                logger.info("‚úÖ DatabaseAdapter –ø—Ä–∏–Ω–∏–º–∞–µ—Ç PostgreSQL URL")
                
                # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await adapter.connect()
                await adapter.disconnect()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL: {e}")
        else:
            logger.info("‚ÑπÔ∏è PostgreSQL URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ DatabaseAdapter: {e}")
        return False

async def test_production_manager():
    """–¢–µ—Å—Ç ProductionDatabaseManager"""
    logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ProductionDatabaseManager...")
    
    try:
        from database.production_manager import ProductionDatabaseManager
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
        original_db_url = os.environ.get('DATABASE_URL')
        
        # –£–±–∏—Ä–∞–µ–º DATABASE_URL –¥–ª—è —Ç–µ—Å—Ç–∞
        if 'DATABASE_URL' in os.environ:
            del os.environ['DATABASE_URL']
        
        try:
            manager = ProductionDatabaseManager()
            logger.error("‚ùå ProductionDatabaseManager –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É")
            return False
        except ValueError as e:
            if "DATABASE_URL –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" in str(e) or "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PostgreSQL" in str(e):
                logger.info("‚úÖ ProductionDatabaseManager –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç URL")
            else:
                logger.info(f"‚úÖ ProductionDatabaseManager –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç: {e}")  # –õ—é–±–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - —Ö–æ—Ä–æ—à–æ
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL
        if original_db_url:
            os.environ['DATABASE_URL'] = original_db_url
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ProductionDatabaseManager: {e}")
        return False

async def test_payment_cleanup():
    """–¢–µ—Å—Ç PaymentCleanupService"""
    logger.info("üßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaymentCleanupService...")
    
    try:
        from services.payment_cleanup import PaymentCleanupService
        from database.universal_database import UniversalDatabase
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        database_url = os.getenv('DATABASE_URL')
        if database_url and database_url.startswith('postgresql'):
            db = UniversalDatabase(database_url)
            cleanup_service = PaymentCleanupService(db)
            logger.info("‚úÖ PaymentCleanupService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.info("‚ÑπÔ∏è PostgreSQL URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å –∑–∞–≥–ª—É—à–∫–æ–π")
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            try:
                db = UniversalDatabase()
                logger.error("‚ùå UniversalDatabase –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É")
                return False
            except ValueError as e:
                if "DATABASE_URL –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" in str(e) or "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PostgreSQL" in str(e):
                    logger.info("‚úÖ UniversalDatabase –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç URL")
                else:
                    logger.info(f"‚úÖ UniversalDatabase –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç: {e}")  # –õ—é–±–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - —Ö–æ—Ä–æ—à–æ
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ PaymentCleanupService: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("=" * 60)
    logger.info("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POSTGRESQL-ONLY –°–ò–°–¢–ï–ú–´")
    logger.info("=" * 60)
    
    tests = [
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_config_validation),
        ("DatabaseAdapter", test_database_adapter),
        ("ProductionDatabaseManager", test_production_manager),
        ("PaymentCleanupService", test_payment_cleanup),
    ]
    
    success_count = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            if await test_func():
                success_count += 1
                logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            logger.error(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    logger.info("=" * 60)
    logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_tests:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! PostgreSQL-only —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
