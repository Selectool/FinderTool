#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
"""
import asyncio
import os
import sys

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["ENVIRONMENT"] = "production"
os.environ["PYTHONPATH"] = "/app"

async def simple_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import asyncpg
        
        database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999!@findertool-hyvrte:5432/findertool_prod')
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        
        # –ü–∞—Ä—Å–∏–º URL
        import urllib.parse
        parsed = urllib.parse.urlparse(database_url)
        
        conn = await asyncpg.connect(
            host=parsed.hostname,
            port=parsed.port or 5432,
            user=parsed.username,
            password=parsed.password,
            database=parsed.path[1:]  # —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–µ—à
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables_query = """
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
        """
        
        tables = await conn.fetch(tables_query)
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        table_names = [row['table_name'] for row in tables]
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        critical_tables = [
            'users',
            'broadcast_messages', 
            'admin_users',
            'roles',
            'message_templates'
        ]
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        for table in critical_tables:
            if table in table_names:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                count = await conn.fetchval(f"SELECT COUNT(*) FROM {table}")
                print(f"‚úÖ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            else:
                print(f"‚ùå {table}: –ù–ï –ù–ê–ô–î–ï–ù–ê")
        
        print(f"\nüìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î:")
        for table in table_names:
            print(f"   ‚Ä¢ {table}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ admin_users
        if 'admin_users' in table_names:
            print(f"\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã admin_users:")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await conn.fetch("SELECT username, role, is_active, created_at FROM admin_users")
            
            print(f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ admin_users ({len(users)}):")
            for user in users:
                print(f"   ‚Ä¢ {user['username']} ({user['role']}) - –∞–∫—Ç–∏–≤–µ–Ω: {user['is_active']} - —Å–æ–∑–¥–∞–Ω: {user['created_at']}")
        
        await conn.close()
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if 'admin_users' not in table_names:
            print("\nüéØ –ü–†–û–ë–õ–ï–ú–ê: –¢–∞–±–ª–∏—Ü–∞ admin_users –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            print("üîß –†–ï–®–ï–ù–ò–ï: –ó–∞–ø—É—Å—Ç–∏—Ç–µ python fix_admin_table.py")
            return False
        elif 'admin_users' in table_names:
            users_count = await conn.fetchval("SELECT COUNT(*) FROM admin_users") if 'admin_users' in table_names else 0
            if users_count == 0:
                print("\nüéØ –ü–†–û–ë–õ–ï–ú–ê: –¢–∞–±–ª–∏—Ü–∞ admin_users –ø—É—Å—Ç–∞!")
                print("üîß –†–ï–®–ï–ù–ò–ï: –ó–∞–ø—É—Å—Ç–∏—Ç–µ python fix_admin_table.py")
                return False
            else:
                print("\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_users –≤ –ø–æ—Ä—è–¥–∫–µ!")
                print("üöÄ –ú–û–ñ–ù–û –ó–ê–ü–£–°–ö–ê–¢–¨: python fix_admin_table.py (–¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)")
                return True
        
        return True
        
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å asyncpg –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ db_adapter...")
        return await fallback_check()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return False

async def fallback_check():
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ db_adapter"""
    try:
        from database.db_adapter import DatabaseAdapter
        
        database_url = os.getenv('DATABASE_URL')
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ db_adapter —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ admin_users
        try:
            result = await adapter.execute("SELECT COUNT(*) FROM admin_users")
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            users = await adapter.fetch_all("SELECT username, role FROM admin_users LIMIT 5")
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            
            await adapter.disconnect()
            return True
            
        except Exception as e:
            if "does not exist" in str(e):
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ admin_users –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")
                print("üîß –†–ï–®–ï–ù–ò–ï: –ó–∞–ø—É—Å—Ç–∏—Ç–µ python fix_admin_table.py")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ admin_users: {e}")
            
            await adapter.disconnect()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ fallback –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

if __name__ == "__main__":
    print("üîç –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
    success = asyncio.run(simple_check())
    
    if success:
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    
    sys.exit(0 if success else 1)
