#!/usr/bin/env python3
"""
Quick Fix –¥–ª—è DATABASE_URL –≤ Dokploy
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
"""

import os
import sys
import socket
import subprocess
from urllib.parse import urlparse

def find_working_postgres_host():
    """–ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ PostgreSQL —Ö–æ—Å—Ç–∞"""
    print("üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ PostgreSQL —Ö–æ—Å—Ç–∞...")
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ö–æ—Å—Ç–æ–≤ –≤ Dokploy (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    possible_hosts = [
        'findertool-db',  # –ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–´–ô - –≤–∏–¥–Ω–æ –≤ Dokploy UI
        'postgres',
        'postgresql',
        'db',
        'database',
        'localhost',
        '127.0.0.1',
        'postgres-inGABWIP0OB6grXZXTORS',  # –ü–æ ID —Å–µ—Ä–≤–∏—Å–∞
        'findertool-postgres'
    ]
    
    # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    username = 'findertool_user'
    password = 'Findertool1999!'
    database = 'findertool_prod'
    port = 5432
    
    working_hosts = []
    
    for host in possible_hosts:
        try:
            print(f"  üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {host}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS
            try:
                ip = socket.gethostbyname(host)
                print(f"    ‚úÖ DNS: {host} -> {ip}")
            except socket.gaierror:
                print(f"    ‚ùå DNS: {host} –Ω–µ —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((host, port))
            sock.close()
            
            if result != 0:
                print(f"    ‚ùå –ü–æ—Ä—Ç: {host}:{port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                continue
            
            print(f"    ‚úÖ –ü–æ—Ä—Ç: {host}:{port} –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
            test_url = f"postgresql://{username}:{password}@{host}:{port}/{database}"
            try:
                import psycopg2
                conn = psycopg2.connect(test_url)
                cursor = conn.cursor()
                cursor.execute("SELECT 1")
                cursor.close()
                conn.close()
                print(f"    ‚úÖ PostgreSQL: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                working_hosts.append((host, test_url))
            except Exception as e:
                print(f"    ‚ùå PostgreSQL: {e}")
                
        except Exception as e:
            print(f"    ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    return working_hosts

def show_current_config():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("üìä –¢–ï–ö–£–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print("-" * 30)
    
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        try:
            parsed = urlparse(database_url)
            print(f"–°—Ö–µ–º–∞: {parsed.scheme}")
            print(f"–•–æ—Å—Ç: {parsed.hostname}")
            print(f"–ü–æ—Ä—Ç: {parsed.port}")
            print(f"–ë–∞–∑–∞: {parsed.path[1:] if parsed.path else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {parsed.username}")
            print(f"–ü–æ–ª–Ω—ã–π URL: {database_url[:50]}...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    else:
        print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    print()

def show_docker_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Docker –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    print("üê≥ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û DOCKER –û–ö–†–£–ñ–ï–ù–ò–ò:")
    print("-" * 40)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º hostname
        hostname = socket.gethostname()
        print(f"Hostname: {hostname}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º /etc/hosts
        try:
            with open('/etc/hosts', 'r') as f:
                hosts = f.read()
                print("\n/etc/hosts:")
                for line in hosts.split('\n'):
                    if line.strip() and not line.startswith('#'):
                        print(f"  {line}")
        except:
            print("  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å /etc/hosts")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        try:
            result = subprocess.run(['ip', 'addr', 'show'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print("\n–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
                for line in result.stdout.split('\n'):
                    if 'inet ' in line and ('172.' in line or '192.' in line or '10.' in line):
                        print(f"  {line.strip()}")
        except:
            print("  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Docker –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    print()

def generate_dokploy_commands(working_hosts):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Dokploy"""
    if not working_hosts:
        print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥")
        return
    
    print("üîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í DOKPLOY:")
    print("-" * 40)
    
    best_host, best_url = working_hosts[0]
    
    print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ Dokploy –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    print(f"2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Environment)")
    print(f"3. –ò–∑–º–µ–Ω–∏—Ç–µ DATABASE_URL –Ω–∞:")
    print(f"   {best_url}")
    print(f"4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print()
    
    print("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ CLI:")
    print(f"export DATABASE_URL='{best_url}'")
    print()

def create_fixed_env_file(working_hosts):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not working_hosts:
        return
    
    best_host, best_url = working_hosts[0]
    
    env_content = f"""# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Dokploy
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {os.popen('date').read().strip()}

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î
DATABASE_URL={best_url}

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
ENVIRONMENT=production
DATABASE_TYPE=postgresql
SERVICE_TYPE=unified

# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ DATABASE_URL –≤—ã—à–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Dokploy
"""
    
    with open('fixed_database_url.env', 'w') as f:
        f.write(env_content)
    
    print(f"üíæ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª fixed_database_url.env —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º DATABASE_URL")
    print(f"üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ DATABASE_URL –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Dokploy")

def main():
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï DATABASE_URL")
    print("=" * 50)
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    show_current_config()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Docker –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    show_docker_info()
    
    # –ò—â–µ–º —Ä–∞–±–æ—á–∏–µ —Ö–æ—Å—Ç—ã
    working_hosts = find_working_postgres_host()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    if working_hosts:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(working_hosts)} —Ä–∞–±–æ—á–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:")
        for i, (host, url) in enumerate(working_hosts, 1):
            print(f"  {i}. {host}: {url}")
        
        print()
        generate_dokploy_commands(working_hosts)
        create_fixed_env_file(working_hosts)
        
        print("üéâ –ì–û–¢–û–í–û! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π DATABASE_URL –≤ Dokploy")
        
    else:
        print("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –†–ê–ë–û–ß–ò–• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô")
        print()
        print("üîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –≤ Dokploy")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π Docker —Å–µ—Ç–∏")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ PostgreSQL")
        print("4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Dokploy –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–µ—Ç–∏")

if __name__ == "__main__":
    main()
