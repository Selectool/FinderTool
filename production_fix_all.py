#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º production-—Å–µ—Ä–≤–µ—Ä–∞
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_subscribed
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def run_migration_fix():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    try:
        from database.unified_migration_manager import fix_migration_conflicts
        database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999@localhost:5432/findertool_prod')
        
        success = await fix_migration_conflicts(database_url)
        
        if success:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–∏–≥—Ä–∞—Ü–∏–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False


async def run_subscription_fix():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_subscribed"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_subscribed...")
    
    try:
        from database.db_adapter import DatabaseAdapter
        
        database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999@localhost:5432/findertool_prod')
        db_type = 'postgresql' if database_url.startswith('postgresql') else 'sqlite'
        
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            if db_type == 'postgresql':
                check_query = """
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'users' AND column_name = 'is_subscribed'
                """
            else:
                check_query = "PRAGMA table_info(users)"
            
            result = await adapter.fetch_all(check_query)
            
            if db_type == 'postgresql':
                has_column = len(result) > 0
            else:
                has_column = any(col[1] == 'is_subscribed' for col in result)
            
            if not has_column:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
                if db_type == 'postgresql':
                    add_query = "ALTER TABLE users ADD COLUMN IF NOT EXISTS is_subscribed BOOLEAN DEFAULT FALSE"
                else:
                    add_query = "ALTER TABLE users ADD COLUMN is_subscribed BOOLEAN DEFAULT FALSE"
                
                await adapter.execute(add_query)
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ is_subscribed –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            else:
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ is_subscribed —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            sync_query = """
                UPDATE users 
                SET is_subscribed = COALESCE(subscription_active, FALSE) 
                WHERE is_subscribed IS NULL OR is_subscribed != COALESCE(subscription_active, FALSE)
            """
            
            await adapter.execute(sync_query)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            return True
            
        finally:
            await adapter.disconnect()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏: {e}")
        return False


async def check_database_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database.db_adapter import DatabaseAdapter
        
        database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999@localhost:5432/findertool_prod')
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            essential_tables = ['users', 'requests', 'payments', 'schema_migrations']
            
            for table in essential_tables:
                try:
                    count_query = f"SELECT COUNT(*) FROM {table}"
                    result = await adapter.fetch_one(count_query)
                    count = result[0] if result else 0
                    print(f"   ‚úÖ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                except Exception as e:
                    print(f"   ‚ùå {table}: –æ—à–∏–±–∫–∞ - {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...")
            
            if adapter.db_type == 'postgresql':
                indexes_query = """
                    SELECT schemaname, tablename, indexname 
                    FROM pg_indexes 
                    WHERE schemaname = 'public'
                    ORDER BY tablename, indexname
                """
                indexes = await adapter.fetch_all(indexes_query)
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}")
            
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
            
        finally:
            await adapter.disconnect()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False


async def optimize_database():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database.db_adapter import DatabaseAdapter
        
        database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999@localhost:5432/findertool_prod')
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        try:
            if adapter.db_type == 'postgresql':
                # PostgreSQL –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                optimizations = [
                    "ANALYZE;",  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    "VACUUM;",   # –û—á–∏—â–∞–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                ]
                
                for opt_query in optimizations:
                    try:
                        await adapter.execute(opt_query)
                        print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {opt_query}")
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {opt_query}: {e}")
            
            print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
            
        finally:
            await adapter.disconnect()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    print("üöÄ Production Fix Tool - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        database_url = 'postgresql://findertool_user:Findertool1999@localhost:5432/findertool_prod'
        print(f"‚ö†Ô∏è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {database_url}")
    else:
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î: {database_url}")
    
    success_count = 0
    total_steps = 4
    
    # –≠—Ç–∞–ø 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    print(f"\nüìã –≠—Ç–∞–ø 1/{total_steps}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π")
    if await run_migration_fix():
        success_count += 1
    
    # –≠—Ç–∞–ø 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    print(f"\nüìã –≠—Ç–∞–ø 2/{total_steps}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_subscribed")
    if await run_subscription_fix():
        success_count += 1
    
    # –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    print(f"\nüìã –≠—Ç–∞–ø 3/{total_steps}: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    if await check_database_health():
        success_count += 1
    
    # –≠—Ç–∞–ø 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    print(f"\nüìã –≠—Ç–∞–ø 4/{total_steps}: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    if await optimize_database():
        success_count += 1
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_steps}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_steps - success_count}/{total_steps}")
    
    if success_count == total_steps:
        print("\nüéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:")
        print("   python main.py")
        return True
    elif success_count >= 2:
        print("\n‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å")
        print("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:")
        print("   python main.py")
        return True
    else:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
