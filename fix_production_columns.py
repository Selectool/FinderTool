#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ production –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å is_subscribed –∏ –¥—Ä—É–≥–∏–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
"""

import asyncio
import os
import sys
import logging
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from database.db_adapter import DatabaseAdapter

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def check_and_fix_columns():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üìä URL: {database_url.split('@')[0]}@***")
    
    db_type = 'postgresql' if database_url.startswith('postgresql') else 'sqlite'
    print(f"üóÑÔ∏è –¢–∏–ø –ë–î: {db_type}")
    
    try:
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        print("\nüìä –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        if db_type == 'postgresql':
            columns_query = """
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'users'
                ORDER BY ordinal_position
            """
        else:
            columns_query = "PRAGMA table_info(users)"
        
        columns = await adapter.fetch_all(columns_query)
        
        if not columns:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        print("üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:")
        column_names = []
        for col in columns:
            if db_type == 'postgresql':
                # col –º–æ–∂–µ—Ç –±—ã—Ç—å dict –∏–ª–∏ tuple, –ø—Ä–æ–≤–µ—Ä—è–µ–º
                if isinstance(col, dict):
                    column_name = col['column_name']
                    data_type = col['data_type']
                    is_nullable = col['is_nullable']
                else:
                    column_name = col[0]
                    data_type = col[1]
                    is_nullable = col[2]

                column_names.append(column_name)
                print(f"   - {column_name} ({data_type}) {'NULL' if is_nullable == 'YES' else 'NOT NULL'}")
            else:
                column_names.append(col[1])
                print(f"   - {col[1]} ({col[2]}) {'NULL' if col[3] == 0 else 'NOT NULL'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = {
            'is_subscribed': 'BOOLEAN DEFAULT FALSE',
            'unlimited_access': 'BOOLEAN DEFAULT FALSE',
            'notes': 'TEXT',
            'blocked': 'BOOLEAN DEFAULT FALSE',
            'bot_blocked': 'BOOLEAN DEFAULT FALSE',
            'blocked_at': 'TIMESTAMP',
            'blocked_by': 'INTEGER',
            'referrer_id': 'INTEGER',
            'registration_source': 'TEXT DEFAULT \'bot\'' if db_type == 'sqlite' else 'VARCHAR(100) DEFAULT \'bot\''
        }
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:")
        missing_columns = []
        for col_name, col_def in required_columns.items():
            if col_name in column_names:
                print(f"   - {col_name}: ‚úÖ –µ—Å—Ç—å")
            else:
                print(f"   - {col_name}: ‚ùå –Ω–µ—Ç")
                missing_columns.append((col_name, col_def))
        
        if not missing_columns:
            print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            print(f"\nüîß –≠—Ç–∞–ø 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ ({len(missing_columns)})...")
            
            for col_name, col_def in missing_columns:
                try:
                    if db_type == 'postgresql':
                        add_query = f"ALTER TABLE users ADD COLUMN IF NOT EXISTS {col_name} {col_def}"
                    else:
                        add_query = f"ALTER TABLE users ADD COLUMN {col_name} {col_def}"
                    
                    await adapter.execute(add_query)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col_name}")
                    
                except Exception as e:
                    if "already exists" in str(e).lower() or "duplicate column" in str(e).lower():
                        print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {col_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {col_name}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüîÑ –≠—Ç–∞–ø 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ subscription_active
        has_subscription_active = 'subscription_active' in column_names
        has_is_subscribed = 'is_subscribed' in column_names
        
        if has_subscription_active and has_is_subscribed:
            print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º is_subscribed —Å subscription_active...")
            
            if db_type == 'postgresql':
                sync_query = """
                    UPDATE users 
                    SET is_subscribed = COALESCE(subscription_active, FALSE)
                    WHERE is_subscribed IS NULL OR is_subscribed != COALESCE(subscription_active, FALSE)
                """
            else:
                sync_query = """
                    UPDATE users 
                    SET is_subscribed = COALESCE(subscription_active, 0)
                    WHERE is_subscribed IS NULL OR is_subscribed != COALESCE(subscription_active, 0)
                """
            
            try:
                result = await adapter.execute(sync_query)
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å subscription_active")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        
        elif has_is_subscribed:
            print("üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è is_subscribed...")
            
            default_query = """
                UPDATE users 
                SET is_subscribed = FALSE 
                WHERE is_subscribed IS NULL
            """
            
            try:
                await adapter.execute(default_query)
                print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        
        print(f"\nüìä –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            check_query = """
                SELECT 
                    COUNT(*) as total_users,
                    COUNT(CASE WHEN is_subscribed = TRUE THEN 1 END) as subscribed_users,
                    COUNT(CASE WHEN is_subscribed IS NULL THEN 1 END) as null_values
                FROM users
            """
            
            result = await adapter.fetch_one(check_query)
            if result:
                total, subscribed, nulls = result
                print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                print(f"   - –í—Å–µ–≥–æ: {total}")
                print(f"   - –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {subscribed}")
                print(f"   - NULL –∑–Ω–∞—á–µ–Ω–∏–π: {nulls}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
        
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        try:
            await adapter.disconnect()
        except:
            pass

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï PRODUCTION –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    success = await check_and_fix_columns()
    
    if success:
        print("\nüéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    else:
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
