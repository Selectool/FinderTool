#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from database.models import Database
from services.payment_cleanup import PaymentCleanupService, get_cleanup_service
from services.payment_service import YooKassaPaymentService
from utils.logging_config import setup_logging

logger = setup_logging()

class PaymentCleanupTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    def __init__(self):
        self.db = Database()
        self.cleanup_service = get_cleanup_service(self.db)
        self.payment_service = YooKassaPaymentService(
            provider_token="test_token",
            currency="RUB",
            provider_data={},
            db=self.db
        )
    
    async def setup_test_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 999999999
        await self.db.add_user(
            user_id=test_user_id,
            username="test_user",
            first_name="Test",
            last_name="User"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        import aiosqlite
        async with aiosqlite.connect(self.db.db_path) as db:
            # 1. –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ (–¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ)
            await db.execute("""
                INSERT INTO payments (user_id, payment_id, amount, currency, status, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (test_user_id, "success_payment_1", 34900, "RUB", "completed", datetime.now().isoformat()))
            
            # 2. –û–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ (–Ω–æ–≤—ã–π, –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–º–µ–Ω—è—Ç—å—Å—è)
            await db.execute("""
                INSERT INTO payments (user_id, payment_id, amount, currency, status, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (test_user_id, "pending_payment_1", 34900, "RUB", "pending", datetime.now().isoformat()))
            
            # 3. –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ (–¥–æ–ª–∂–µ–Ω –æ—Ç–º–µ–Ω—è—Ç—å—Å—è)
            expired_time = datetime.now() - timedelta(hours=1)  # 1 —á–∞—Å –Ω–∞–∑–∞–¥
            await db.execute("""
                INSERT INTO payments (user_id, payment_id, amount, currency, status, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (test_user_id, "expired_payment_1", 34900, "RUB", "pending", expired_time.isoformat()))
            
            # 4. –ï—â–µ –æ–¥–∏–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            expired_time2 = datetime.now() - timedelta(minutes=45)  # 45 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
            await db.execute("""
                INSERT INTO payments (user_id, payment_id, amount, currency, status, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (test_user_id, "expired_payment_2", 34900, "RUB", "pending", expired_time2.isoformat()))
            
            # 5. –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ (–Ω–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è)
            await db.execute("""
                INSERT INTO payments (user_id, payment_id, amount, currency, status, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (test_user_id, "cancelled_payment_1", 34900, "RUB", "cancelled", datetime.now().isoformat()))
            
            await db.commit()
        
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
    
    async def test_statistics_before_cleanup(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ –æ—á–∏—Å—Ç–∫–∏"""
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –î–û –æ—á–∏—Å—Ç–∫–∏...")
        
        stats = await self.payment_service.get_payment_statistics()
        
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –æ—á–∏—Å—Ç–∫–∏:")
        logger.info(f"  - –°–µ–≥–æ–¥–Ω—è: {stats['today']['count']} –ø–ª–∞—Ç–µ–∂–µ–π, {stats['today']['successful']} —É—Å–ø–µ—à–Ω—ã—Ö")
        logger.info(f"  - –í—Å–µ–≥–æ: {stats['total']['count']} –ø–ª–∞—Ç–µ–∂–µ–π, {stats['total']['successful']} —É—Å–ø–µ—à–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        assert stats['today']['successful'] == 1, f"–û–∂–∏–¥–∞–ª—Å—è 1 —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –ø–æ–ª—É—á–µ–Ω–æ {stats['today']['successful']}"
        assert stats['today']['count'] == 1, f"–û–∂–∏–¥–∞–ª—Å—è 1 –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –ø–æ–ª—É—á–µ–Ω–æ {stats['today']['count']}"
        
        logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return stats
    
    async def test_cleanup_process(self):
        """–¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏"""
        logger.info("üßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–∏—Å—Ç–∫–∏
        cleanup_stats = await self.cleanup_service.get_cleanup_statistics()
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {cleanup_stats}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        cleanup_result = await self.cleanup_service.cleanup_expired_invoices()
        
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:")
        logger.info(f"  - –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {cleanup_result['expired_found']}")
        logger.info(f"  - –û—Ç–º–µ–Ω–µ–Ω–æ: {cleanup_result['cancelled']}")
        logger.info(f"  - –û—à–∏–±–æ–∫: {cleanup_result['errors']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–æ 2 –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
        assert cleanup_result['expired_found'] >= 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º 2 –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞"
        assert cleanup_result['cancelled'] >= 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º—É–º 2 –ø–ª–∞—Ç–µ–∂–∞"
        
        logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return cleanup_result
    
    async def test_statistics_after_cleanup(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏"""
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏...")
        
        stats = await self.payment_service.get_payment_statistics()
        
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏:")
        logger.info(f"  - –°–µ–≥–æ–¥–Ω—è: {stats['today']['count']} –ø–ª–∞—Ç–µ–∂–µ–π, {stats['today']['successful']} —É—Å–ø–µ—à–Ω—ã—Ö")
        logger.info(f"  - –í—Å–µ–≥–æ: {stats['total']['count']} –ø–ª–∞—Ç–µ–∂–µ–π, {stats['total']['successful']} —É—Å–ø–µ—à–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (—Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏)
        assert stats['today']['successful'] == 1, f"–û–∂–∏–¥–∞–ª—Å—è 1 —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –ø–æ–ª—É—á–µ–Ω–æ {stats['today']['successful']}"
        assert stats['today']['count'] == 1, f"–û–∂–∏–¥–∞–ª—Å—è 1 –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –ø–æ–ª—É—á–µ–Ω–æ {stats['today']['count']}"
        
        logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return stats
    
    async def test_database_state(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        import aiosqlite
        async with aiosqlite.connect(self.db.db_path) as db:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            cursor = await db.execute("""
                SELECT status, COUNT(*) 
                FROM payments 
                WHERE user_id = 999999999
                GROUP BY status
            """)
            status_counts = dict(await cursor.fetchall())
            
            logger.info("–ü–ª–∞—Ç–µ–∂–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            for status, count in status_counts.items():
                logger.info(f"  - {status}: {count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            assert status_counts.get('completed', 0) == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
            assert status_counts.get('expired', 0) >= 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞"
            assert status_counts.get('pending', 0) >= 1, "–î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –º–∏–Ω–∏–º—É–º 1 –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂"
        
        logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    async def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        import aiosqlite
        async with aiosqlite.connect(self.db.db_path) as db:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await db.execute("DELETE FROM payments WHERE user_id = 999999999")
            await db.execute("DELETE FROM users WHERE user_id = 999999999")
            await db.commit()
        
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    
    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        logger.info("=" * 60)
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´ –û–ß–ò–°–¢–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô")
        logger.info("=" * 60)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.db.create_tables_if_not_exist()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await self.setup_test_data()
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ –æ—á–∏—Å—Ç–∫–∏
            stats_before = await self.test_statistics_before_cleanup()
            
            # –¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏
            cleanup_result = await self.test_cleanup_process()
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            stats_after = await self.test_statistics_after_cleanup()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.test_database_state()
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await self.cleanup_test_data()
            
            logger.info("=" * 60)
            logger.info("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            logger.info("=" * 60)
            logger.info("üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û:")
            logger.info("   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏")
            logger.info("   ‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—è—é—Ç—Å—è")
            logger.info("   ‚úÖ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            logger.info("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–µ—Ç—Å—è —á–∏—Å—Ç–æ–π")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                await self.cleanup_test_data()
            except:
                pass
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PaymentCleanupTester()
    success = await tester.run_full_test()
    
    if success:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production!")
        print("   –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–ª–∞—Ç–µ–∂–µ–π")
        sys.exit(0)
    else:
        print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        sys.exit(1)

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(main())
