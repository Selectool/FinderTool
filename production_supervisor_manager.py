#!/usr/bin/env python3
"""
Production Supervisor Manager
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ —á–µ—Ä–µ–∑ Supervisor
"""
import subprocess
import sys
import os
import time
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

class ProductionSupervisorManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Supervisor –¥–ª—è production"""
    
    def __init__(self):
        self.config_file = "/app/supervisord_production.conf"
        self.pid_file = "/tmp/supervisord.pid"
        self.sock_file = "/tmp/supervisor.sock"
        
    def install_supervisor(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Supervisor –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
        try:
            subprocess.run(["supervisord", "--version"], capture_output=True, check=True)
            logger.info("‚úÖ Supervisor —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Supervisor...")
            try:
                subprocess.run([sys.executable, "-m", "pip", "install", "supervisor"], check=True)
                logger.info("‚úÖ Supervisor —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            except subprocess.CalledProcessError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Supervisor: {e}")
                return False
    
    def create_directories(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        directories = [
            "/app/logs",
            "/app/data",
            "/app/data/backups",
            "/app/data/health_reports"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    def stop_existing_processes(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        processes_to_stop = [
            "python main.py",
            "python run_admin.py",
            "python start_with_migrations.py",
            "python production_migration_watcher.py",
            "python production_data_sync.py",
            "python production_health_monitor.py"
        ]
        
        for process_pattern in processes_to_stop:
            try:
                subprocess.run(["pkill", "-f", process_pattern], capture_output=True)
                logger.info(f"üî™ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {process_pattern}")
            except:
                pass
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π supervisord
        try:
            if Path(self.pid_file).exists():
                subprocess.run(["supervisorctl", "-c", self.config_file, "shutdown"], capture_output=True)
                time.sleep(2)
        except:
            pass
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ç—å supervisord –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            subprocess.run(["pkill", "-f", "supervisord"], capture_output=True)
        except:
            pass
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã
        for file_path in [self.pid_file, self.sock_file]:
            try:
                Path(file_path).unlink(missing_ok=True)
            except:
                pass
    
    def start_supervisor(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Supervisor"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Supervisor...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º supervisord
            result = subprocess.run([
                "supervisord", 
                "-c", self.config_file,
                "-n"  # –ù–µ –¥–µ–º–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                logger.info("‚úÖ Supervisor –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Supervisor: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.info("‚è±Ô∏è Supervisor –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Supervisor: {e}")
            return False
    
    def check_services_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            result = subprocess.run([
                "supervisorctl", "-c", self.config_file, "status"
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                logger.info("üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
                for line in result.stdout.strip().split('\n'):
                    if line.strip():
                        logger.info(f"   {line}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def restart_all_services(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            result = subprocess.run([
                "supervisorctl", "-c", self.config_file, "restart", "all"
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def show_logs(self, service_name=None, lines=50):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        if service_name:
            logger.info(f"üìÑ –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ {service_name} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫):")
            cmd = ["supervisorctl", "-c", self.config_file, "tail", "-f", service_name]
        else:
            logger.info(f"üìÑ –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:")
            cmd = ["supervisorctl", "-c", self.config_file, "tail", "-f"]
        
        try:
            subprocess.run(cmd, timeout=10)
        except subprocess.TimeoutExpired:
            pass
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def run_production_setup(self):
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ production –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Production –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å Supervisor...")
        
        # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Supervisor
        if not self.install_supervisor():
            return False
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.create_directories()
        
        # 3. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.stop_existing_processes()
        
        # 4. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        time.sleep(5)
        
        # 5. –ó–∞–ø—É—Å–∫ Supervisor
        if not self.start_supervisor():
            return False
        
        # 6. –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(10)
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        self.check_services_status()
        
        logger.info("üéâ Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
        logger.info("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://185.207.66.201:8080")
        logger.info("üîë –õ–æ–≥–∏–Ω: admin / admin123")
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º Supervisor")
        
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        command = sys.argv[1]
        manager = ProductionSupervisorManager()
        
        if command == "start":
            manager.run_production_setup()
        elif command == "status":
            manager.check_services_status()
        elif command == "restart":
            manager.restart_all_services()
        elif command == "logs":
            service = sys.argv[2] if len(sys.argv) > 2 else None
            manager.show_logs(service)
        elif command == "stop":
            manager.stop_existing_processes()
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: start, status, restart, logs [service], stop")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        manager = ProductionSupervisorManager()
        manager.run_production_setup()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
