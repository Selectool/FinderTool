"""
Throttling Middleware –¥–ª—è Telegram –±–æ—Ç–∞
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import logging
import time
from typing import Callable, Dict, Any, Awaitable, Optional
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, User, Message, CallbackQuery

logger = logging.getLogger(__name__)

class ThrottlingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(
        self, 
        rate_limit: float = 1.0,  # –°–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        key_prefix: str = "throttle"
    ):
        self.rate_limit = rate_limit
        self.key_prefix = key_prefix
        self.storage: Dict[int, float] = {}  # user_id -> last_request_time
        super().__init__()
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ throttling"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user: Optional[User] = data.get("event_from_user")
        
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º throttling
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º throttling
        if await self._check_throttling(user.id, event):
            # –ï—Å–ª–∏ throttling —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º handler
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.storage[user.id] = time.time()
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return await handler(event, data)
    
    async def _check_throttling(self, user_id: int, event: TelegramObject) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ throttling –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Returns True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        current_time = time.time()
        last_request_time = self.storage.get(user_id, 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if current_time - last_request_time < self.rate_limit:
            # Throttling —Å—Ä–∞–±–æ—Ç–∞–ª
            await self._handle_throttling(user_id, event)
            return True
        
        return False
    
    async def _handle_throttling(self, user_id: int, event: TelegramObject):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        
        logger.debug(f"üö´ Throttling –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if isinstance(event, Message):
            try:
                await event.answer(
                    "‚è± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.",
                    show_alert=False
                )
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å throttling —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        elif isinstance(event, CallbackQuery):
            try:
                await event.answer(
                    "‚è± –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
                    show_alert=True
                )
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å throttling callback: {e}")

class AdvancedThrottlingMiddleware(BaseMiddleware):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π throttling —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    
    def __init__(self):
        self.storage: Dict[str, float] = {}  # key -> last_request_time
        self.limits = {
            "message": 1.0,      # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            "callback": 0.5,     # 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É callback
            "search": 3.0,       # 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
            "payment": 10.0,     # 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–ª–∞—Ç–µ–∂–∞–º–∏
        }
        super().__init__()
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ throttling"""
        
        user: Optional[User] = data.get("event_from_user")
        
        if not user:
            return await handler(event, data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        action_type = self._get_action_type(event, data)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è throttling
        throttle_key = f"{user.id}:{action_type}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º throttling
        if await self._check_advanced_throttling(throttle_key, action_type, event):
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.storage[throttle_key] = time.time()
        
        return await handler(event, data)
    
    def _get_action_type(self, event: TelegramObject, data: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è throttling"""
        
        if isinstance(event, CallbackQuery):
            callback_data = event.data or ""
            
            if "search" in callback_data:
                return "search"
            elif "pay" in callback_data or "payment" in callback_data:
                return "payment"
            else:
                return "callback"
        
        elif isinstance(event, Message):
            text = event.text or ""
            
            if any(keyword in text.lower() for keyword in ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "search"]):
                return "search"
            else:
                return "message"
        
        return "message"
    
    async def _check_advanced_throttling(
        self, 
        throttle_key: str, 
        action_type: str, 
        event: TelegramObject
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ throttling"""
        
        current_time = time.time()
        last_request_time = self.storage.get(throttle_key, 0)
        rate_limit = self.limits.get(action_type, 1.0)
        
        if current_time - last_request_time < rate_limit:
            await self._handle_advanced_throttling(action_type, event)
            return True
        
        return False
    
    async def _handle_advanced_throttling(self, action_type: str, event: TelegramObject):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ throttling"""
        
        messages = {
            "search": "üîç –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–∏—Å–∫–æ–º (3 —Å–µ–∫)",
            "payment": "üí≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Å –ø–ª–∞—Ç–µ–∂–æ–º (10 —Å–µ–∫)",
            "callback": "‚è± –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ",
            "message": "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ –Ω–µ —Ç–∞–∫ —á–∞—Å—Ç–æ"
        }
        
        message = messages.get(action_type, "‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ")
        
        if isinstance(event, Message):
            try:
                await event.answer(message)
            except Exception:
                pass
        elif isinstance(event, CallbackQuery):
            try:
                await event.answer(message, show_alert=True)
            except Exception:
                pass
