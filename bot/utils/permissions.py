"""
Production-ready –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
"""
import logging
from functools import wraps
from typing import Callable, Any
from aiogram.types import Message, CallbackQuery

from config import DEVELOPER_IDS

logger = logging.getLogger(__name__)


class UserPermissions:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    @staticmethod
    def is_developer(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"""
        return user_id in DEVELOPER_IDS
    
    @staticmethod
    def is_admin(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        return UserPermissions.is_developer(user_id)
    
    @staticmethod
    def has_unlimited_access(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"""
        return UserPermissions.is_developer(user_id)


def developer_only(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"""
    @wraps(func)
    async def wrapper(message_or_callback: Any, *args, **kwargs):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º user_id
        if isinstance(message_or_callback, Message):
            user_id = message_or_callback.from_user.id
            send_method = message_or_callback.answer
        elif isinstance(message_or_callback, CallbackQuery):
            user_id = message_or_callback.from_user.id
            send_method = message_or_callback.message.answer
        else:
            logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(message_or_callback)}")
            return
        
        if not UserPermissions.is_developer(user_id):
            await send_method("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
            return
        
        logger.info(f"üîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {user_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É: {func.__name__}")
        return await func(message_or_callback, *args, **kwargs)
    
    return wrapper


def unlimited_access_check(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if UserPermissions.has_unlimited_access(user_id):
        logger.info(f"üîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {user_id} –ø–æ–ª—É—á–∏–ª –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")
        return True
    return False
