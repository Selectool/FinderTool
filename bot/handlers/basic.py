"""
–ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from database.universal_database import UniversalDatabase
from bot.keyboards.inline import get_main_menu, get_back_keyboard
from bot.keyboards.reply import get_main_menu_keyboard
from config import TEXTS, SUBSCRIPTION_PRICE, FREE_REQUESTS_LIMIT, DEVELOPER_IDS

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    user = message.from_user

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    user_data = await db.get_user(user.id)
    user_role = user_data.get('role', 'user') if user_data else 'user'

    await message.answer(
        TEXTS["start"].format(price=SUBSCRIPTION_PRICE),
        reply_markup=get_main_menu_keyboard(user_role),
        parse_mode="HTML"
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        TEXTS["help"],
        parse_mode="HTML"
    )


@router.message(Command("profile"))
async def cmd_profile(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user_data = await db.get_user(message.from_user.id)
    
    if not user_data:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    user_id = message.from_user.id
    from bot.utils.roles import TelegramUserPermissions

    user_role = await db.get_user_role(user_id)
    role_display = TelegramUserPermissions.get_role_display_name(user_role)
    has_unlimited = TelegramUserPermissions.has_unlimited_access(user_id, user_role)
    is_subscribed = await db.check_subscription(user_id)
    requests_left = max(0, FREE_REQUESTS_LIMIT - user_data['requests_used'])

    profile_text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: {user_data['user_id']}
üë§ –ò–º—è: {user_data['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['created_at'][:10]}
üé≠ –†–æ–ª—å: {role_display}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üîç –ó–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data['requests_used']}
"""

    if has_unlimited:
        profile_text += f"üîß <b>–°—Ç–∞—Ç—É—Å: {role_display.upper()}</b>\nüíé –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º"
    elif is_subscribed:
        profile_text += f"üíé –°—Ç–∞—Ç—É—Å: –ü–æ–¥–ø–∏—Å—á–∏–∫ –¥–æ {user_data['subscription_end'][:10]}"
    else:
        profile_text += f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {requests_left}"
    
    await message.answer(
        profile_text,
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )


@router.callback_query(F.data == "profile")
async def callback_profile(callback: CallbackQuery, db: UniversalDatabase):
    """Callback –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user_data = await db.get_user(callback.from_user.id)
    
    if not user_data:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_id = callback.from_user.id
    from bot.utils.roles import TelegramUserPermissions

    user_role = await db.get_user_role(user_id)
    role_display = TelegramUserPermissions.get_role_display_name(user_role)
    has_unlimited = TelegramUserPermissions.has_unlimited_access(user_id, user_role)
    is_subscribed = await db.check_subscription(user_id)
    requests_left = max(0, FREE_REQUESTS_LIMIT - user_data['requests_used'])

    profile_text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: {user_data['user_id']}
üë§ –ò–º—è: {user_data['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['created_at'][:10]}
üé≠ –†–æ–ª—å: {role_display}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üîç –ó–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data['requests_used']}
"""

    if has_unlimited:
        profile_text += f"üîß <b>–°—Ç–∞—Ç—É—Å: {role_display.upper()}</b>\nüíé –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º"
    elif is_subscribed:
        profile_text += f"üíé –°—Ç–∞—Ç—É—Å: –ü–æ–¥–ø–∏—Å—á–∏–∫ –¥–æ {user_data['subscription_end'][:10]}"
    else:
        profile_text += f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {requests_left}"
    
    await callback.message.edit_text(
        profile_text,
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–º–æ—â–∏"""
    await callback.message.edit_text(
        TEXTS["help"],
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def callback_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        TEXTS["start"].format(price=SUBSCRIPTION_PRICE),
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    await callback.answer()
