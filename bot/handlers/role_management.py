"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.universal_database import UniversalDatabase
from bot.utils.roles import TelegramUserPermissions, TelegramUserRole, RoleHierarchy, log_role_action
from bot.middlewares.role_middleware import AdminOnlyMiddleware, get_user_role, get_user_permissions

logger = logging.getLogger(__name__)
router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º middleware —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
router.message.middleware(AdminOnlyMiddleware("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"))
router.callback_query.middleware(AdminOnlyMiddleware("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"))


class RoleManagementStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_new_role = State()


def get_role_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="roles_list_admins"),
            InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="roles_find_user")
        ],
        [
            InlineKeyboardButton(text="üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="roles_change_role"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–ª–µ–π", callback_data="roles_stats")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")
        ]
    ])
    return keyboard


def get_role_selection_keyboard(current_role: str, manager_role: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    buttons = []
    
    for role in TelegramUserRole:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å
        if RoleHierarchy.can_manage_role(manager_role, role.value):
            role_name = TelegramUserPermissions.get_role_display_name(role.value)
            emoji = "‚úÖ" if role.value == current_role else "‚ö™"
            buttons.append([
                InlineKeyboardButton(
                    text=f"{emoji} {role_name}",
                    callback_data=f"set_role_{role.value}"
                )
            ])
    
    buttons.append([InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="roles_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(Command("roles"))
async def cmd_roles(message: Message, db: UniversalDatabase, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    user_role = get_user_role(kwargs)
    
    await message.answer(
        f"üé≠ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"–í–∞—à–∞ —Ä–æ–ª—å: {TelegramUserPermissions.get_role_display_name(user_role)}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_role_management_keyboard()
    )


@router.callback_query(F.data == "roles_menu")
async def callback_roles_menu(callback: CallbackQuery, db: UniversalDatabase, **kwargs):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    user_role = get_user_role(kwargs)
    
    await callback.message.edit_text(
        f"üé≠ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"–í–∞—à–∞ —Ä–æ–ª—å: {TelegramUserPermissions.get_role_display_name(user_role)}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_role_management_keyboard()
    )


@router.callback_query(F.data == "roles_list_admins")
async def callback_list_admins(callback: CallbackQuery, db: UniversalDatabase, **kwargs):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        admins = await db.get_admin_users()
        
        if not admins:
            await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        text = "üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n"
        
        for admin in admins:
            role_name = TelegramUserPermissions.get_role_display_name(admin['role'])
            name = admin.get('first_name', '') or admin.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            text += f"‚Ä¢ <b>{name}</b> (ID: {admin['user_id']})\n"
            text += f"  üé≠ –†–æ–ª—å: {role_name}\n"
            text += f"  üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {admin['created_at'][:10]}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="roles_menu")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "roles_find_user")
async def callback_find_user(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""
    await state.set_state(RoleManagementStates.waiting_for_user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="roles_menu")]
    ])
    
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.message(RoleManagementStates.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext, db: UniversalDatabase, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text.strip())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = await db.get_user(user_id)
        
        if not user_data:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞."
            )
            return
        
        user_role = await db.get_user_role(user_id)
        role_name = TelegramUserPermissions.get_role_display_name(user_role)
        name = user_data.get('first_name', '') or user_data.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(target_user_id=user_id)
        await state.set_state(RoleManagementStates.waiting_for_new_role)
        
        manager_role = get_user_role(kwargs)
        
        text = f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
        text += f"üÜî ID: {user_id}\n"
        text += f"üë§ –ò–º—è: {name}\n"
        text += f"üé≠ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {role_name}\n"
        text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['created_at'][:10]}\n"
        text += f"üîç –ó–∞–ø—Ä–æ—Å–æ–≤: {user_data['requests_used']}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:"
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_role_selection_keyboard(user_role, manager_role)
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@router.callback_query(F.data.startswith("set_role_"))
async def callback_set_role(callback: CallbackQuery, state: FSMContext, db: UniversalDatabase, **kwargs):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        new_role = callback.data.replace("set_role_", "")
        state_data = await state.get_data()
        target_user_id = state_data.get("target_user_id")
        
        if not target_user_id:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
            return
        
        manager_role = get_user_role(kwargs)
        manager_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
        if not RoleHierarchy.can_manage_role(manager_role, new_role):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–π —Ä–æ–ª–∏", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await db.update_user_role(target_user_id, new_role)
        
        if success:
            role_name = TelegramUserPermissions.get_role_display_name(new_role)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            log_role_action(
                manager_id,
                "ROLE_CHANGED",
                f"Changed user {target_user_id} role to {new_role}"
            )
            
            await callback.message.edit_text(
                f"‚úÖ <b>–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user_id}\n"
                f"–ù–æ–≤–∞—è —Ä–æ–ª—å: {role_name}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–æ–ª—è–º–∏", callback_data="roles_menu")]
                ])
            )
            
            await state.clear()
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "roles_stats")
async def callback_roles_stats(callback: CallbackQuery, db: UniversalDatabase, **kwargs):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
        stats = {}
        for role in TelegramUserRole:
            users = await db.get_users_by_role(role.value)
            stats[role.value] = len(users)
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º:</b>\n\n"
        
        for role, count in stats.items():
            role_name = TelegramUserPermissions.get_role_display_name(role)
            text += f"üé≠ {role_name}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
        total_users = sum(stats.values())
        text += f"\nüìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏: {total_users}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="roles_menu")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–ª–µ–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
