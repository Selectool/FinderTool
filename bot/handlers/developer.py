"""
Production-ready –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""
import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from database.universal_database import UniversalDatabase


from services.channel_finder import ChannelFinder

logger = logging.getLogger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
_channel_finder = None


async def get_channel_finder():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä ChannelFinder –¥–ª—è –∫–æ–º–∞–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    global _channel_finder
    if not _channel_finder:
        from config import API_ID, API_HASH, SESSION_NAME, SESSION_STRING
        _channel_finder = ChannelFinder(API_ID, API_HASH, SESSION_NAME, SESSION_STRING)
    return _channel_finder


@router.message(Command("dev_metrics"))
async def cmd_dev_metrics(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    from bot.utils.permissions import UserPermissions
    if not UserPermissions.is_developer(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º")
        return

    logger.info(f"üîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {message.from_user.id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É: dev_metrics")

    try:
        finder = await get_channel_finder()
        metrics = finder.get_performance_metrics()
        
        metrics_text = f"""
üîß <b>–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ChannelFinder</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {metrics['total_searches']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {metrics['successful_searches']}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {metrics['failed_searches']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metrics['success_rate']}%

üìà <b>–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {metrics['avg_results_count']}
‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {metrics['cache_size']} –∑–∞–ø–∏—Å–µ–π

‚ö° <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ API –≤—ã–∑–æ–≤–æ–≤: {metrics['api_calls_count']}
‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {metrics['cache_hits']}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {metrics['cache_hit_rate']}%

üõ†Ô∏è <b>–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:</b>
/dev_metrics - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
/dev_clear_cache - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
/dev_reset_metrics - –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
/dev_status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        """
        
        await message.answer(metrics_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")


@router.message(Command("dev_clear_cache"))
async def cmd_dev_clear_cache(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    from bot.utils.permissions import UserPermissions
    if not UserPermissions.is_developer(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º")
        return

    logger.info(f"üîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {message.from_user.id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É: dev_clear_cache")

    try:
        finder = await get_channel_finder()
        cache_size_before = len(finder.channel_cache)
        finder.clear_cache()
        await message.answer(f"‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ\nüìä –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cache_size_before}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")


@router.message(Command("dev_reset_metrics"))
async def cmd_dev_reset_metrics(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    from bot.utils.permissions import UserPermissions
    if not UserPermissions.is_developer(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º")
        return

    logger.info(f"üîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {message.from_user.id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É: dev_reset_metrics")

    try:
        finder = await get_channel_finder()
        finder.reset_metrics()
        await message.answer("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫: {e}")


@router.message(Command("dev_status"))
async def cmd_dev_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    from bot.utils.permissions import UserPermissions
    if not UserPermissions.is_developer(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º")
        return

    logger.info(f"üîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {message.from_user.id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É: dev_status")

    try:
        finder = await get_channel_finder()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
        client_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if finder.client and finder.client.is_connected() else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        
        status_text = f"""
üîß <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã ChannelFinder</b>

üì° <b>Telegram –∫–ª–∏–µ–Ω—Ç:</b> {client_status}
üóÑÔ∏è <b>–†–∞–∑–º–µ—Ä –∫—ç—à–∞:</b> {len(finder.channel_cache)} –∑–∞–ø–∏—Å–µ–π
üìä <b>–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤:</b> {finder.search_metrics['total_searches']}
‚ö° <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {finder.search_metrics.get('success_rate', 0)}%

üõ†Ô∏è <b>–í–µ—Ä—Å–∏—è:</b> Enterprise v2.0
üöÄ <b>–°—Ç–∞—Ç—É—Å:</b> Production Ready
        """
        
        await message.answer(status_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")


@router.message(Command("dev_stats"))
async def cmd_dev_stats(message: Message, db: UniversalDatabase):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    from bot.utils.permissions import UserPermissions
    if not UserPermissions.is_developer(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º")
        return

    logger.info(f"üîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {message.from_user.id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É: dev_stats")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        total_users = await db.get_users_count()
        active_subscribers = await db.get_subscribers_count()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_requests = await db.get_total_requests_count()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        from config import YOOKASSA_PROVIDER_TOKEN, YOOKASSA_CURRENCY, YOOKASSA_PROVIDER_DATA
        from services.payment_service import create_payment_service

        payment_service = create_payment_service(
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency=YOOKASSA_CURRENCY,
            provider_data=YOOKASSA_PROVIDER_DATA,
            db=db
        )

        payment_stats = await payment_service.get_payment_statistics()

        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        mode = "üî¥ –ü–†–û–î–ê–ö–®–ù" if not payment_service.is_test_mode else "üß™ –¢–ï–°–¢–û–í–´–ô"

        stats_text = f"""
üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {active_subscribers}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}

üí∞ <b>–ü–ª–∞—Ç–µ–∂–∏ ({mode}):</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {payment_stats.get('today', {}).get('count', 0)} –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {payment_stats.get('today', {}).get('successful', 0)}
‚Ä¢ –°—É–º–º–∞: {payment_stats.get('today', {}).get('amount', 0) // 100} ‚ÇΩ

üìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {payment_stats.get('week', {}).get('count', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {payment_stats.get('week', {}).get('successful', 0)}
‚Ä¢ –°—É–º–º–∞: {payment_stats.get('week', {}).get('amount', 0) // 100} ‚ÇΩ

üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –í–µ—Ä—Å–∏—è: 2.0 Production
‚Ä¢ –†–µ–∂–∏–º –ÆKassa: {'LIVE' if not payment_service.is_test_mode else 'TEST'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
        """

        await message.answer(stats_text.strip(), parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@router.message(Command("logs"))
async def cmd_logs(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    from bot.utils.permissions import UserPermissions
    if not UserPermissions.is_developer(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º")
        return

    logger.info(f"üîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {message.from_user.id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É: logs")

    try:
        import os
        from datetime import datetime

        # –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –≤ –ø–∞–ø–∫–µ logs
        log_dir = "logs"
        today_log = os.path.join(log_dir, f"findertool_{datetime.now().strftime('%Y%m%d')}.log")

        log_file = None
        if os.path.exists(today_log):
            log_file = today_log
        elif os.path.exists(log_dir):
            # –ò—â–µ–º –ª—é–±–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –≤ –ø–∞–ø–∫–µ
            log_files = [f for f in os.listdir(log_dir) if f.endswith('.log') and 'findertool_' in f]
            if log_files:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                log_files.sort(reverse=True)
                log_file = os.path.join(log_dir, log_files[0])

        if not log_file or not os.path.exists(log_file):
            await message.answer("üìù –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                               "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É logs/ —Å –∏–º–µ–Ω–µ–º findertool_YYYYMMDD.log")
            return

        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
        with open(log_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            last_lines = lines[-50:] if len(lines) > 50 else lines

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏
        log_filename = os.path.basename(log_file)
        logs_text = f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n"
        logs_text += f"üìÑ –§–∞–π–ª: {log_filename}\n\n"
        logs_text += "<code>"

        for line in last_lines:
            # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            if len(line) > 100:
                line = line[:97] + "..."
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            line = line.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            logs_text += line.strip() + "\n"

        logs_text += "</code>"

        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
        if len(logs_text) > 4000:
            logs_text = logs_text[:4000] + "\n...</code>\n\nüìÑ –õ–æ–≥–∏ –æ–±—Ä–µ–∑–∞–Ω—ã"

        await message.answer(logs_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")


@router.message(Command("restart"))
async def cmd_restart_info(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    from bot.utils.permissions import UserPermissions
    if not UserPermissions.is_developer(message.from_user.id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º")
        return

    logger.info(f"üîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")

    try:
        await message.answer(
            "üîÑ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            "–í production —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
            "üìã <b>–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
            "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ\n"
            "‚Ä¢ –ó–∞–ø—É—Å–∫: python main.py\n"
            "‚Ä¢ –ò–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏\n\n"
            "‚ö†Ô∏è <b>–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º:</b>\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏\n\n"
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞",
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã restart info: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
