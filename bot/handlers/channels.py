"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ - Enterprise Edition
"""
import re
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import StateFilter

from database.universal_database import UniversalDatabase
from services.channel_finder import ChannelFinder
from bot.utils.production_logger import log_user_action, log_search, handle_error
from config import API_ID, API_HASH, SESSION_NAME, SESSION_STRING, FREE_REQUESTS_LIMIT, TEXTS

logger = logging.getLogger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ChannelFinder
channel_finder = None


async def get_channel_finder():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä ChannelFinder"""
    global channel_finder
    if not channel_finder:
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å—Ç—Ä–æ–∫–æ–≤–∞—è —Å–µ—Å—Å–∏—è > —Ñ–∞–π–ª–æ–≤–∞—è —Å–µ—Å—Å–∏—è
        channel_finder = ChannelFinder(
            API_ID,
            API_HASH,
            session_string=SESSION_STRING if SESSION_STRING else None,
            session_name=SESSION_NAME
        )
    return channel_finder


def has_channel_links(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    patterns = [
        r'https?://t\.me/[a-zA-Z0-9_]+',
        r't\.me/[a-zA-Z0-9_]+',
        r'@[a-zA-Z0-9_]+',
    ]
    
    for pattern in patterns:
        if re.search(pattern, text):
            return True
    return False


@router.message(F.text & F.func(lambda message: has_channel_links(message.text)))
async def handle_channel_search(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å production-ready –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    user_id = message.from_user.id

    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞
        log_user_action(user_id, "SEARCH_START", message.text[:100])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
        can_request = await db.can_make_request(user_id, FREE_REQUESTS_LIMIT)

        if not can_request:
            log_user_action(user_id, "SEARCH_BLOCKED", "No requests left")
            await message.answer(
                TEXTS["no_requests_left"].format(
                    limit=FREE_REQUESTS_LIMIT,
                    price=349  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞
                ),
                parse_mode="HTML"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        processing_msg = await message.answer(TEXTS["processing"])
        # –ü–æ–ª—É—á–∞–µ–º ChannelFinder
        finder = await get_channel_finder()
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã
        results = await finder.find_similar_channels(message.text)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        response_text = finder.format_results(results)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.update_user_requests(user_id)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        channels_found = results.get('total_found', 0)
        input_channels = len(finder.extract_channel_usernames(message.text))
        log_search(user_id, input_channels, channels_found)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É
        if results['success']:
            await db.save_request(
                user_id=user_id,
                channels_input=finder.extract_channel_usernames(message.text),
                results=results['channels']
            )
            log_user_action(user_id, "SEARCH_SUCCESS", f"Found {channels_found} channels")
        else:
            log_user_action(user_id, "SEARCH_FAILED", results.get('error', 'Unknown error'))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await processing_msg.edit_text(
            response_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results['success'] and results['total_found'] > 0:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π CSV
                csv_data = finder.generate_excel_compatible_csv(results)
                csv_content = csv_data.getvalue()

                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"telegram_channels_{timestamp}.csv"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                csv_file = BufferedInputFile(csv_content, filename=filename)

                from bot.utils.error_handler import safe_send_document

                success = await safe_send_document(
                    bot=message.bot,
                    user_id=user_id,
                    document=csv_file,
                    db=db,
                    caption=f"üìä <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                           f"üìà –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {results['total_found']}\n"
                           f"üë• –ú–∏–Ω–∏–º—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {results.get('min_subscribers_filter', 1000):,}\n"
                           f"üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                           f"üí° CSV —Å–æ–¥–µ—Ä–∂–∏—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                    parse_mode="HTML"
                )

                if success:
                    logger.info(f"‚úÖ CSV —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CSV —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            except Exception as csv_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {csv_error}")
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å CSV, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        
    except Exception as e:
        # Production-ready –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        await handle_error(e, user_id, "channel_search")
        log_user_action(user_id, "SEARCH_ERROR", str(e))

        try:
            await processing_msg.edit_text(TEXTS["error"])
        except Exception as edit_error:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(TEXTS["error"])
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")





@router.message(F.text & ~F.text.startswith('/'))
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)"""
    await message.answer(
        "ü§ñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://t.me/channel_name\n"
        "‚Ä¢ @channel_name\n"
        "‚Ä¢ t.me/channel_name\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏."
    )
