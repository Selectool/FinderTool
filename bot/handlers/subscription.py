"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–ª–∞—Ç–µ–∂–µ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ÆKassa
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.universal_database import UniversalDatabase
from bot.keyboards.inline import get_subscription_keyboard, get_back_keyboard
from services.payment_service import create_payment_service
from bot.utils.production_logger import log_user_action, log_payment, handle_error
from config import (TEXTS, SUBSCRIPTION_PRICE, YOOKASSA_PROVIDER_TOKEN,
                   YOOKASSA_CURRENCY, YOOKASSA_PROVIDER_DATA)
import logging

logger = logging.getLogger(__name__)
router = Router()


class PaymentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    waiting_payment = State()


@router.message(Command("subscribe"))
async def cmd_subscribe(message: Message, db: UniversalDatabase):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = message.from_user.id
    is_subscribed = await db.check_subscription(user_id)
    
    if is_subscribed:
        await message.answer(
            "üíé <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        TEXTS["subscription_info"].format(price=SUBSCRIPTION_PRICE),
        parse_mode="HTML",
        reply_markup=get_subscription_keyboard()
    )


@router.callback_query(F.data == "subscribe")
async def callback_subscribe(callback: CallbackQuery, db: UniversalDatabase):
    """Callback –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id
    is_subscribed = await db.check_subscription(user_id)
    
    if is_subscribed:
        await callback.message.edit_text(
            "üíé <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        TEXTS["subscription_info"].format(price=SUBSCRIPTION_PRICE),
        parse_mode="HTML",
        reply_markup=get_subscription_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "pay_subscription")
async def callback_pay_subscription(callback: CallbackQuery, db: UniversalDatabase, state: FSMContext):
    """Callback –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ÆKassa"""
    user_id = callback.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed = await db.check_subscription(user_id)
        if is_subscribed:
            await callback.message.edit_text(
                "üíé <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.",
                parse_mode="HTML",
                reply_markup=get_back_keyboard()
            )
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π
        payment_service = create_payment_service(
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency=YOOKASSA_CURRENCY,
            provider_data=YOOKASSA_PROVIDER_DATA,
            db=db
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–µ –µ—Å–ª–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        test_card_info = payment_service.get_test_card_info()
        if test_card_info:
            await callback.message.edit_text(
                f"üí≥ <b>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –æ–ø–ª–∞—Ç—ã</b>\n\n"
                f"{test_card_info}\n\n"
                f"–°–æ–∑–¥–∞—é –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã...",
                parse_mode="HTML"
            )

        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
        amount_in_kopecks = SUBSCRIPTION_PRICE * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏

        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        logger.info(f"  - –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {SUBSCRIPTION_PRICE} ‚ÇΩ")
        logger.info(f"  - –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö: {amount_in_kopecks}")

        invoice_data = await payment_service.create_invoice_data(
            user_id=user_id,
            amount=amount_in_kopecks,
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ FinderTool - {SUBSCRIPTION_PRICE}‚ÇΩ/–º–µ—Å—è—Ü",
            subscription_months=1
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        await state.set_state(PaymentStates.waiting_payment)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await callback.bot.send_invoice(
            chat_id=callback.from_user.id,
            **invoice_data
        )

        await callback.answer("–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω!")
        logger.info(f"‚úÖ –ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_message = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"

        if "provider_token" in str(e).lower():
            error_message += "–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n"
        elif "amount" in str(e).lower():
            error_message += "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å—É–º–º–æ–π –ø–ª–∞—Ç–µ–∂–∞.\n"
        else:
            error_message += "–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞.\n"

        error_message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

        await callback.message.edit_text(
            error_message,
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ÆKassa

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π
        payment_service = create_payment_service(
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency=YOOKASSA_CURRENCY,
            provider_data=YOOKASSA_PROVIDER_DATA,
            db=db
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
        is_valid = await payment_service.process_pre_checkout(pre_checkout_query)

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        await pre_checkout_query.answer(ok=is_valid)

        if is_valid:
            logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ: {pre_checkout_query.invoice_payload}")
        else:
            logger.warning(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø—Ä–æ—à–ª–∞: {pre_checkout_query.invoice_payload}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await pre_checkout_query.answer(ok=False)


@router.message(F.successful_payment)
async def process_successful_payment_handler(message: Message, db: UniversalDatabase, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        user_id = message.from_user.id
        payment = message.successful_payment

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π
        payment_service = create_payment_service(
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency=YOOKASSA_CURRENCY,
            provider_data=YOOKASSA_PROVIDER_DATA,
            db=db
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        success = await payment_service.process_successful_payment(payment, user_id)

        if success:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            amount_display = payment_service.format_amount_for_display(payment.total_amount)
            await message.answer(
                f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {amount_display}\n"
                f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π\n\n"
                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤!\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
                parse_mode="HTML"
            )

            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, "
                       f"—Å—É–º–º–∞: {payment.total_amount} –∫–æ–ø–µ–µ–∫")
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                "–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} "
                        f"–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞)
@router.message(PaymentStates.waiting_payment)
async def process_unsuccessful_payment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    await message.answer(
        "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ "
        "–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.",
        parse_mode="HTML"
    )
    logger.info(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
