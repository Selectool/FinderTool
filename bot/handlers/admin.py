"""
–ê–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
"""
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

from database.universal_database import UniversalDatabase
from bot.keyboards.inline import get_admin_keyboard, get_back_keyboard, get_broadcast_confirm_keyboard, get_audience_selection_keyboard
from bot.utils.roles import TelegramUserPermissions
from services.payment_service import create_payment_service
from config import (ADMIN_USER_ID, YOOKASSA_PROVIDER_TOKEN, YOOKASSA_CURRENCY,
                   YOOKASSA_PROVIDER_DATA)
import logging

logger = logging.getLogger(__name__)
router = Router()


class BroadcastStates(StatesGroup):
    selecting_audience = State()
    waiting_for_message = State()
    confirming_broadcast = State()


async def is_admin(user_id: int, db: UniversalDatabase) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π"""
    try:
        user = await db.get_user(user_id)
        user_role = user.get('role', 'user') if user else 'user'
        return TelegramUserPermissions.has_admin_access(user_id, user_role)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è {user_id}: {e}")
        return False


@router.message(Command("admin"))
async def cmd_admin(message: Message, db: UniversalDatabase):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id

    if not await is_admin(user_id, db):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    user = await db.get_user(user_id)
    user_role = user.get('role', 'user') if user else 'user'

    await message.answer(
        f"üë®‚Äçüíº <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å FinderTool</b>\n\n"
        f"üõ°Ô∏è –í–∞—à–∞ —Ä–æ–ª—å: {user_role}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )

    logger.info(f"–ê–¥–º–∏–Ω {user_id} ({user_role}) –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin")


@router.callback_query(F.data == "admin_stats")
async def callback_admin_stats(callback: CallbackQuery, db: UniversalDatabase):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    stats = await db.get_stats()
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}
üîç –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['requests_today']}

üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫—É: {(stats['active_subscribers'] / max(stats['total_users'], 1) * 100):.1f}%
    """
    
    await callback.message.edit_text(
        stats_text,
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_broadcast")
async def callback_admin_broadcast(callback: CallbackQuery, db: UniversalDatabase):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫
    try:
        stats = await db.get_broadcasts_stats()
    except:
        stats = {
            'total_broadcasts': 0,
            'active_broadcasts': 0,
            'completed_broadcasts': 0,
            'total_sent': 0
        }

    text = f"""üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {stats.get('total', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('sending', 0)}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats.get('completed', 0)}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {stats.get('pending', 0)}

üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="broadcasts_list:1"),
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_create")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="broadcasts_stats"),
        InlineKeyboardButton(text="üìù –®–∞–±–ª–æ–Ω—ã", callback_data="broadcast_templates")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    )

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("broadcasts_list:"))
async def callback_broadcasts_list(callback: CallbackQuery, db: UniversalDatabase):
    """–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split(":")[1])
    per_page = 5  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 —Ä–∞—Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        result = await db.get_broadcasts_paginated(
            page=page,
            per_page=per_page
        )

        if not result["broadcasts"]:
            await callback.message.edit_text(
                "üì¢ <b>–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
                "–†–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É!",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_create"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_broadcast")
                ]])
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞—Å—Å—ã–ª–æ–∫
        text = f"üì¢ <b>–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫</b> (—Å—Ç—Ä. {page}/{result['pages']})\n\n"

        for broadcast in result["broadcasts"]:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
            status_emoji = {
                "draft": "üìù",
                "sending": "üì§",
                "completed": "‚úÖ",
                "failed": "‚ùå",
                "paused": "‚è∏Ô∏è"
            }.get(broadcast.get('status', 'draft'), "üìù")

            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            title = broadcast.get('title', f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast['id']}")[:30]

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            sent = broadcast.get('sent_count', 0)
            total = broadcast.get('total_recipients', 0)

            text += f"{status_emoji} <b>{title}</b>\n"
            text += f"   ID: {broadcast['id']} | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}/{total}\n"
            text += f"   –°–æ–∑–¥–∞–Ω–∞: {broadcast.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        for broadcast in result["broadcasts"]:
            title = broadcast.get('title', f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast['id']}")[:20]
            keyboard.row(
                InlineKeyboardButton(
                    text=f"üìä {title}...",
                    callback_data=f"broadcast_detail:{broadcast['id']}"
                )
            )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"broadcasts_list:{page-1}"))
        if page < result['pages']:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"broadcasts_list:{page+1}"))

        if nav_buttons:
            keyboard.row(*nav_buttons)

        keyboard.row(
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="broadcast_create"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_broadcast")
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "broadcast_create")
async def callback_broadcast_create(callback: CallbackQuery, state: FSMContext, db: UniversalDatabase):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ - –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º
    all_count = await db.get_users_count()
    active_count = await db.get_active_users_count()
    subscribers_count = await db.get_subscribers_count()

    text = f"""‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:</b>

üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - {all_count} —á–µ–ª.
–í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

üî• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - {active_count} —á–µ–ª.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π

üíé <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏</b> - {subscribers_count} —á–µ–ª.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"""

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text=f"üë• –í—Å–µ ({all_count})", callback_data="create_audience_all"),
        InlineKeyboardButton(text=f"üî• –ê–∫—Ç–∏–≤–Ω—ã–µ ({active_count})", callback_data="create_audience_active")
    )
    keyboard.row(
        InlineKeyboardButton(text=f"üíé –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ ({subscribers_count})", callback_data="create_audience_subscribers")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_broadcast")
    )

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
    await state.clear()
    await state.set_state("creating_broadcast")
    await callback.answer()


@router.callback_query(F.data.startswith("create_audience_"))
async def callback_create_audience(callback: CallbackQuery, state: FSMContext, db: UniversalDatabase):
    """–í—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return

    audience_type = callback.data.split("_")[2]  # create_audience_all -> all

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
    await state.update_data(audience_type=audience_type)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    audience_names = {
        "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "subscribers": "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏"
    }

    audience_name = audience_names.get(audience_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è")

    text = f"""‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üéØ <b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_name}

üìù <b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:</b>
‚Ä¢ HTML —Ä–∞–∑–º–µ—Ç–∫–∞ (<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>)
‚Ä¢ –≠–º–æ–¥–∑–∏ üòä
‚Ä¢ –°—Å—ã–ª–∫–∏
‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"""

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_create")
    )

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

    await state.set_state("waiting_broadcast_message")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(F.text, StateFilter("waiting_broadcast_message"))
async def handle_broadcast_message(message: Message, state: FSMContext, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await is_admin(message.from_user.id, db):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    audience_type = data.get('audience_type', 'all')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.update_data(broadcast_message=message.html_text)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    if audience_type == "all":
        target_count = await db.get_users_count()
        audience_name = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    elif audience_type == "active":
        target_count = await db.get_active_users_count()
        audience_name = "–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    elif audience_type == "subscribers":
        target_count = await db.get_subscribers_count()
        audience_name = "–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"
    else:
        target_count = await db.get_users_count()
        audience_name = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = f"""üì¢ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üéØ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_name} ({target_count} —á–µ–ª.)

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message.html_text}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: –û–±—ã—á–Ω–∞—è (30 —Å–æ–æ–±—â–µ–Ω–∏–π/–º–∏–Ω)
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: –î–∞

–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?"""

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="confirm_send_now"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="broadcast_settings")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_create")
    )

    await message.answer(
        preview_text,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

    await state.set_state("confirming_broadcast")


@router.callback_query(F.data == "confirm_send_now", StateFilter("confirming_broadcast"))
async def callback_confirm_send_now(callback: CallbackQuery, state: FSMContext, db: UniversalDatabase):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    broadcast_message = data.get('broadcast_message')
    audience_type = data.get('audience_type', 'all')

    if not broadcast_message:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await state.clear()
        return

    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        broadcast_id = await db.create_broadcast(
            title=f"–†–∞—Å—Å—ã–ª–∫–∞ {audience_type}",
            message_text=broadcast_message,
            parse_mode="HTML",
            target_users=audience_type,
            created_by=callback.from_user.id,
            scheduled_at=None  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–π—á–∞—Å
        )

        await callback.message.edit_text(
            "üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
            f"üÜî ID —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_id}\n"
            "üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫'",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"broadcast_detail:{broadcast_id}"),
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="broadcasts_list:1")
            ], [
                InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_broadcast")
            ]])
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        import asyncio
        task = asyncio.create_task(send_broadcast_task(db, broadcast_id, callback.bot))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        def task_done_callback(task):
            if task.exception():
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast_id}: {task.exception()}")

        task.add_done_callback(task_done_callback)

        await state.clear()
        await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É {broadcast_id} –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {audience_type}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        await state.clear()


async def send_broadcast_task(db: UniversalDatabase, broadcast_id: int, bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        broadcast = await db.get_broadcast_by_id(broadcast_id)
        if not broadcast:
            logger.error(f"–†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è" –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        from datetime import datetime
        await db.update_broadcast_status(broadcast_id, "sending")
        await db.update_broadcast_stats(broadcast_id, started_at=datetime.now())

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        target_users = await get_target_users_for_broadcast(db, broadcast['target_users'])
        total_users = len(target_users)

        if total_users == 0:
            await db.update_broadcast_status(broadcast_id, "completed")
            await db.update_broadcast_stats(broadcast_id, sent_count=0, failed_count=0, completed=True)
            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id}: –Ω–∞–π–¥–µ–Ω–æ {total_users} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")

        sent_count = 0
        failed_count = 0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for user_id in target_users:
            try:
                from bot.utils.error_handler import safe_send_message

                success = await safe_send_message(
                    bot=bot,
                    user_id=user_id,
                    text=broadcast['message_text'],
                    db=db,
                    parse_mode=broadcast.get('parse_mode', 'HTML')
                )

                if success:
                    sent_count += 1
                else:
                    failed_count += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if (sent_count + failed_count) % 10 == 0:
                    await db.update_broadcast_stats(
                        broadcast_id,
                        sent_count=sent_count,
                        failed_count=failed_count
                    )

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É)
                await asyncio.sleep(2.0)

            except Exception as e:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await db.update_broadcast_stats(
            broadcast_id,
            sent_count=sent_count,
            failed_count=failed_count,
            completed=True
        )
        await db.update_broadcast_status(broadcast_id, "completed")

        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –æ—à–∏–±–æ–∫ {failed_count}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast_id}: {e}")
        await db.update_broadcast_status(broadcast_id, "failed")


async def get_target_users_for_broadcast(db: UniversalDatabase, target_type: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        if target_type == "all":
            users = await db.get_all_users_for_broadcast()
        elif target_type == "active":
            users = await db.get_active_users_for_broadcast(days=30)
        elif target_type == "subscribers":
            users = await db.get_subscribed_users()
        else:
            users = await db.get_all_users_for_broadcast()

        return [user['user_id'] for user in users]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {target_type}: {e}")
        return []


@router.callback_query(F.data.startswith("broadcast_detail:"))
async def callback_broadcast_detail(callback: CallbackQuery, db: UniversalDatabase):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_id = int(callback.data.split(":")[1])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        broadcast = await db.get_broadcast_by_id(broadcast_id)
        if not broadcast:
            await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        title = broadcast.get('title', f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id}")
        status = broadcast.get('status', 'unknown')

        # –°—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
        status_emoji = {
            "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
            "sending": "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è",
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            "failed": "‚ùå –û—à–∏–±–∫–∞",
            "paused": "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        }.get(status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_broadcast_detailed_stats(broadcast_id)
        sent = stats.get('delivered', 0)
        failed = stats.get('failed', 0)
        total = stats.get('total_recipients', 0)

        # –î–∞—Ç—ã
        created_at = broadcast.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]
        started_at = broadcast.get('started_at', '–ù–µ –Ω–∞—á–∞—Ç–∞')
        if started_at != '–ù–µ –Ω–∞—á–∞—Ç–∞':
            started_at = started_at[:16]

        # –ê—É–¥–∏—Ç–æ—Ä–∏—è
        target_names = {
            "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "subscribers": "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏"
        }
        target_name = target_names.get(broadcast.get('target_users', 'all'), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        text = f"""üìä <b>–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}
‚Ä¢ ID: {broadcast_id}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_emoji}
‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {target_name}

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}
‚Ä¢ –û—à–∏–±–æ–∫: {failed}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(sent / max(sent + failed, 1) * 100):.1f}%

<b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {created_at}
‚Ä¢ –ù–∞—á–∞—Ç–∞: {started_at}

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{broadcast.get('message_text', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:200]}{'...' if len(broadcast.get('message_text', '')) > 200 else ''}"""

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardBuilder()

        # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status == "sending":
            keyboard.row(
                InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"broadcast_pause:{broadcast_id}")
            )
        elif status == "paused":
            keyboard.row(
                InlineKeyboardButton(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"broadcast_resume:{broadcast_id}")
            )
        elif status == "pending":
            keyboard.row(
                InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"broadcast_start:{broadcast_id}")
            )

        keyboard.row(
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"broadcast_detail:{broadcast_id}"),
            InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="broadcasts_list:1")
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Å—ã–ª–∫–µ {broadcast_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "broadcasts_stats")
async def callback_broadcasts_stats(callback: CallbackQuery, db: UniversalDatabase):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        stats = await db.get_broadcasts_stats()

        text = f"""üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>

üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {stats.get('total', 0)}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats.get('completed', 0)}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: {stats.get('sending', 0)}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {stats.get('pending', 0)}
‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: {stats.get('failed', 0)}

üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {(stats.get('completed', 0) / max(stats.get('total', 1), 1) * 100):.1f}%
‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {(stats.get('sending', 0) / max(stats.get('total', 1), 1) * 100):.1f}%

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 30 —Å–æ–æ–±—â–µ–Ω–∏–π/–º–∏–Ω
‚Ä¢ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: 10:00-18:00
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""

        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_broadcast")
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "broadcast_templates")
async def callback_broadcast_templates(callback: CallbackQuery, db: UniversalDatabase):
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            templates = await db.get_message_templates()
        except:
            templates = []

        if not templates:
            text = """üìù <b>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π</b>

üöß –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

üí° <b>–ß—Ç–æ —Ç–∞–∫–æ–µ —à–∞–±–ª–æ–Ω—ã?</b>
–®–∞–±–ª–æ–Ω—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –±—ã—Å—Ç—Ä–æ –∏—Ö –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.

<b>–ü—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤:</b>
‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
‚Ä¢ –ü—Ä–æ–º–æ-–∞–∫—Ü–∏–∏
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

            keyboard = InlineKeyboardBuilder()
            keyboard.row(
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="template_create"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_broadcast")
            )
        else:
            text = f"üìù <b>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π</b> ({len(templates)})\n\n"

            keyboard = InlineKeyboardBuilder()

            for template in templates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                name = template.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:20]
                keyboard.row(
                    InlineKeyboardButton(
                        text=f"üìÑ {name}...",
                        callback_data=f"template_use:{template['id']}"
                    )
                )

            keyboard.row(
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="template_create"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_broadcast")
            )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "template_create")
async def callback_template_create(callback: CallbackQuery, state: FSMContext, db: UniversalDatabase):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    text = """‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞</b>

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ HTML —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏
‚Ä¢ –î–ª–∏–Ω–∞ –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞:"""

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_templates")
    )

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

    await state.set_state("creating_template")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@router.message(F.text, StateFilter("creating_template"))
async def handle_template_creation(message: Message, state: FSMContext, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    if not await is_admin(message.from_user.id, db):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return

    template_text = message.html_text

    if len(template_text) > 4000:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            template_id = await db.create_message_template(
                name=f"–®–∞–±–ª–æ–Ω {message.from_user.id}",
                content=template_text,
                category="general",
                created_by=message.from_user.id
            )

            await message.answer(
                f"‚úÖ <b>–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üÜî ID: {template_id}\n"
                f"üìù –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üìù –ö —à–∞–±–ª–æ–Ω–∞–º", callback_data="broadcast_templates"),
                    InlineKeyboardButton(text="üì¢ –ö —Ä–∞—Å—Å—ã–ª–∫–∞–º", callback_data="admin_broadcast")
                ]])
            )
        except:
            # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await message.answer(
                "‚úÖ <b>–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                "üìù –¢–µ–∫—Å—Ç –∑–∞–ø–æ–º–Ω–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
                "üí° –í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üì¢ –ö —Ä–∞—Å—Å—ã–ª–∫–∞–º", callback_data="admin_broadcast")
                ]])
            )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")
        await state.clear()






    await callback.message.edit_text(
        "‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "admin_users")
async def callback_admin_users(callback: CallbackQuery, db: UniversalDatabase):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    stats = await db.get_stats()

    text = f"""üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('blocked_users', 0)}

üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list:1"),
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_search")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="users_stats"),
        InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="users_blocked")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    )

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("users_list:"))
async def callback_users_list(callback: CallbackQuery, db: UniversalDatabase):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split(":")[1])
    per_page = 5  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        result = await db.get_users_paginated(
            page=page,
            per_page=per_page
        )

        if not result["users"]:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (—Å—Ç—Ä. {page}/{result['pages']})\n\n"

        for i, user in enumerate(result["users"], 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            status_emoji = "üü¢" if user.get('is_subscribed') else "‚ö™"
            if user.get('blocked'):
                status_emoji = "üî¥"

            # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            name = user.get('first_name', '') or user.get('username', f"ID{user['user_id']}")

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            requests = user.get('requests_used', 0)

            text += f"{status_emoji} <b>{name}</b>\n"
            text += f"   ID: {user['user_id']} | –ó–∞–ø—Ä–æ—Å–æ–≤: {requests}\n"
            if user.get('username'):
                text += f"   @{user['username']}\n"
            text += "\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in result["users"]:
            name = user.get('first_name', '') or user.get('username', f"ID{user['user_id']}")
            keyboard.row(
                InlineKeyboardButton(
                    text=f"üë§ {name[:20]}...",
                    callback_data=f"user_detail:{user['user_id']}"
                )
            )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"users_list:{page-1}"))
        if page < result['pages']:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"users_list:{page+1}"))

        if nav_buttons:
            keyboard.row(*nav_buttons)

        keyboard.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data.startswith("user_detail:"))
async def callback_user_detail(callback: CallbackQuery, db: UniversalDatabase):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = int(callback.data.split(":")[1])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await db.get_user(user_id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        name = user.get('first_name', '') or user.get('username', f"ID{user_id}")

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user.get('is_subscribed') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        if user.get('unlimited_access'):
            subscription_status = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è"

        # –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        block_status = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.get('blocked') else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"

        # –î–∞—Ç—ã
        created_at = user.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        last_request = user.get('last_request', '–ù–∏–∫–æ–≥–¥–∞')
        subscription_end = user.get('subscription_end', '–ù–µ—Ç')

        text = f"""üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ò–º—è: {name}
‚Ä¢ ID: {user_id}
‚Ä¢ Username: @{user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {block_status}

<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {subscription_status}
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user.get('requests_used', 0)}
‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {subscription_end}

<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {created_at}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {last_request}"""

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardBuilder()

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
        if user.get('is_subscribed'):
            keyboard.row(
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"user_unsub:{user_id}")
            )
        else:
            keyboard.row(
                InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"user_sub:{user_id}")
            )

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        if user.get('blocked'):
            keyboard.row(
                InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_unblock:{user_id}")
            )
        else:
            keyboard.row(
                InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_block:{user_id}")
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.row(
            InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", callback_data=f"user_reset:{user_id}"),
            InlineKeyboardButton(text="‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç", callback_data=f"user_unlimited:{user_id}")
        )

        keyboard.row(
            InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="users_list:1")
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data.startswith("user_block:"))
async def callback_user_block(callback: CallbackQuery, db: UniversalDatabase):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split(":")[1])

    try:
        success = await db.update_user_permissions(
            user_id=user_id,
            blocked=True,
            notes=f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}",
            blocked_by=callback.from_user.id
        )

        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await callback_user_detail(callback, db)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("user_unblock:"))
async def callback_user_unblock(callback: CallbackQuery, db: UniversalDatabase):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split(":")[1])

    try:
        success = await db.update_user_permissions(
            user_id=user_id,
            blocked=False,
            notes=f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}",
            blocked_by=None
        )

        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await callback_user_detail(callback, db)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("user_sub:"))
async def callback_user_subscribe(callback: CallbackQuery, db: UniversalDatabase):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split(":")[1])

    try:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü
        from datetime import datetime, timedelta
        end_date = datetime.now() + timedelta(days=30)

        success = await db.update_subscription(
            user_id=user_id,
            is_subscribed=True,
            subscription_end=end_date
        )

        if success:
            await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –º–µ—Å—è—Ü", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await callback_user_detail(callback, db)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("user_unsub:"))
async def callback_user_unsubscribe(callback: CallbackQuery, db: UniversalDatabase):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split(":")[1])

    try:
        success = await db.update_subscription(
            user_id=user_id,
            is_subscribed=False,
            subscription_end=None
        )

        if success:
            await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await callback_user_detail(callback, db)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("user_reset:"))
async def callback_user_reset_requests(callback: CallbackQuery, db: UniversalDatabase):
    """–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split(":")[1])

    try:
        success = await db.reset_user_requests(user_id)

        if success:
            await callback.answer("‚úÖ –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await callback_user_detail(callback, db)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("user_unlimited:"))
async def callback_user_unlimited(callback: CallbackQuery, db: UniversalDatabase):
    """–î–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split(":")[1])

    try:
        success = await db.update_user_permissions(
            user_id=user_id,
            unlimited_access=True
        )

        if success:
            await callback.answer("‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await callback_user_detail(callback, db)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ–∑–ª–∏–º–∏—Ç–∞", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ–∑–ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ–∑–ª–∏–º–∏—Ç–∞", show_alert=True)


@router.callback_query(F.data == "users_search")
async def callback_users_search(callback: CallbackQuery, state: FSMContext, db: UniversalDatabase):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n"
        "‚Ä¢ Username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username)\n"
        "‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
        ]])
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    await state.set_state("waiting_user_search")
    await callback.answer()


@router.callback_query(F.data == "users_stats")
async def callback_users_stats(callback: CallbackQuery, db: UniversalDatabase):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        stats = await db.get_stats()

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_requests = await db.get_total_requests_count()
        avg_requests = total_requests / max(stats['total_users'], 1)

        text = f"""üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('blocked_users', 0)}
‚Ä¢ –° –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º: {stats.get('unlimited_users', 0)}

üîç <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_requests:.1f}
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['requests_today']}

üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>
‚Ä¢ –í –ø–æ–¥–ø–∏—Å–∫—É: {(stats['active_subscribers'] / max(stats['total_users'], 1) * 100):.1f}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(stats.get('active_users', 0) / max(stats['total_users'], 1) * 100):.1f}%"""

        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "users_blocked")
async def callback_users_blocked(callback: CallbackQuery, db: UniversalDatabase):
    """–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await db.get_users_paginated(
            page=1,
            per_page=10,
            filter_type="blocked"
        )

        if not result["users"]:
            await callback.message.edit_text(
                "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
                "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                ]])
            )
            await callback.answer()
            return

        text = f"üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> ({result['total']})\n\n"

        keyboard = InlineKeyboardBuilder()

        for user in result["users"]:
            name = user.get('first_name', '') or user.get('username', f"ID{user['user_id']}")
            text += f"üî¥ <b>{name}</b>\n"
            text += f"   ID: {user['user_id']}\n"
            if user.get('username'):
                text += f"   @{user['username']}\n"
            text += "\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard.row(
                InlineKeyboardButton(
                    text=f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {name[:15]}...",
                    callback_data=f"user_unblock:{user['user_id']}"
                )
            )

        keyboard.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
@router.message(F.text, StateFilter("waiting_user_search"))
async def handle_user_search(message: Message, state: FSMContext, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await is_admin(message.from_user.id, db):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return

    search_query = message.text.strip()

    try:
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await db.get_users_paginated(
            page=1,
            per_page=10,
            search=search_query
        )

        if not result["users"]:
            await message.answer(
                f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '<code>{search_query}</code>' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                ]])
            )
            await state.clear()
            return

        text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n–ó–∞–ø—Ä–æ—Å: '<code>{search_query}</code>'\n\n"

        keyboard = InlineKeyboardBuilder()

        for user in result["users"]:
            # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            status_emoji = "üü¢" if user.get('is_subscribed') else "‚ö™"
            if user.get('blocked'):
                status_emoji = "üî¥"

            name = user.get('first_name', '') or user.get('username', f"ID{user['user_id']}")

            text += f"{status_emoji} <b>{name}</b>\n"
            text += f"   ID: {user['user_id']} | –ó–∞–ø—Ä–æ—Å–æ–≤: {user.get('requests_used', 0)}\n"
            if user.get('username'):
                text += f"   @{user['username']}\n"
            text += "\n"

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
            keyboard.row(
                InlineKeyboardButton(
                    text=f"üë§ {name[:20]}...",
                    callback_data=f"user_detail:{user['user_id']}"
                )
            )

        keyboard.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
        )

        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
        await state.clear()


@router.message(Command("stats"))
async def cmd_stats(message: Message, db: UniversalDatabase):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not await is_admin(message.from_user.id, db):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_stats()

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_requests = await db.get_total_requests_count()
        avg_requests = total_requests / max(stats['total_users'], 1)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫
        try:
            broadcast_stats = await db.get_broadcasts_stats()
        except:
            broadcast_stats = {
                'total': 0,
                'completed': 0,
                'total_sent': 0
            }

        stats_text = f"""
üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FinderTool</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('blocked_users', 0)}

üîç <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_requests:.1f}
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['requests_today']}

üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>
‚Ä¢ –í –ø–æ–¥–ø–∏—Å–∫—É: {(stats['active_subscribers'] / max(stats['total_users'], 1) * 100):.1f}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(stats['requests_today'] / max(stats['total_users'], 1) * 100):.1f}%

üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {broadcast_stats.get('total', 0)}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {broadcast_stats.get('completed', 0)}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {broadcast_stats.get('total_sent', 0)}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º
        """

        await message.answer(stats_text.strip(), parse_mode="HTML")
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.message(Command("payment_stats"))
async def cmd_payment_stats(message: Message, db: UniversalDatabase):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not await is_admin(message.from_user.id, db):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π
        payment_service = create_payment_service(
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency=YOOKASSA_CURRENCY,
            provider_data=YOOKASSA_PROVIDER_DATA,
            db=db
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await payment_service.get_payment_statistics()

        if not stats:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        mode = "üß™ –¢–ï–°–¢–û–í–´–ô" if payment_service.is_test_mode else "üî¥ –ü–†–û–î–ê–ö–®–ù"

        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ÆKassa</b>
{mode} —Ä–µ–∂–∏–º

üìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {stats.get('today', {}).get('count', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('today', {}).get('successful', 0)}
‚Ä¢ –°—É–º–º–∞: {stats.get('today', {}).get('amount', 0) // 100} ‚ÇΩ

üìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {stats.get('week', {}).get('count', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('week', {}).get('successful', 0)}
‚Ä¢ –°—É–º–º–∞: {stats.get('week', {}).get('amount', 0) // 100} ‚ÇΩ

üìä <b>–í—Å–µ–≥–æ:</b>
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {stats.get('total', {}).get('count', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('total', {}).get('successful', 0)}
‚Ä¢ –°—É–º–º–∞: {stats.get('total', {}).get('amount', 0) // 100} ‚ÇΩ

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º
        """

        await message.answer(stats_text.strip(), parse_mode="HTML")
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.callback_query(F.data == "payment_stats")
async def callback_payment_stats(callback: CallbackQuery, db: UniversalDatabase):
    """Callback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    if not await is_admin(callback.from_user.id, db):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    message = callback.message
    message.from_user = callback.from_user
    await cmd_payment_stats(message, db)
    await callback.answer()
