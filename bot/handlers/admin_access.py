"""
Secure Admin Access Handler
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
Production-ready security —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏
"""

import asyncio
import logging
import secrets
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

import jwt
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import SECRET_KEY, ADMIN_HOST, ADMIN_PORT, ADMIN_USER_IDS
from database.universal_database import UniversalDatabase
from utils.decorators import admin_required

logger = logging.getLogger(__name__)

router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–≤ production –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
temp_tokens: Dict[str, Dict[str, Any]] = {}

class AdminTokenManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞"""
    
    def __init__(self):
        self.secret_key = SECRET_KEY
        self.token_expiry = 300  # 5 –º–∏–Ω—É—Ç
        self.max_tokens_per_user = 3
    
    def generate_secure_token(self, user_id: int, username: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è secure JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞"""
        try:
            # Payload –¥–ª—è JWT —Ç–æ–∫–µ–Ω–∞
            payload = {
                'user_id': user_id,
                'username': username,
                'type': 'admin_access',
                'issued_at': int(time.time()),
                'expires_at': int(time.time()) + self.token_expiry,
                'nonce': secrets.token_urlsafe(16)  # –ó–∞—â–∏—Ç–∞ –æ—Ç replay –∞—Ç–∞–∫
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            token = jwt.encode(payload, self.secret_key, algorithm='HS256')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self._store_temp_token(user_id, token, payload)
            
            logger.info(f"üîê –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_id} ({username})")
            return token
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            raise
    
    def _store_temp_token(self, user_id: int, token: str, payload: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        if user_id not in temp_tokens:
            temp_tokens[user_id] = {}
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tokens = temp_tokens[user_id]
        if len(user_tokens) >= self.max_tokens_per_user:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
            oldest_token = min(user_tokens.keys(), key=lambda k: user_tokens[k]['issued_at'])
            del user_tokens[oldest_token]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        temp_tokens[user_id][token] = payload
    
    def verify_token(self, token: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            payload = jwt.decode(token, self.secret_key, algorithms=['HS256'])
            
            user_id = payload.get('user_id')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if user_id not in temp_tokens or token not in temp_tokens[user_id]:
                logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {user_id}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if payload.get('expires_at', 0) < int(time.time()):
                logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {user_id}")
                self._remove_token(user_id, token)
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
            if payload.get('type') != 'admin_access':
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞: {payload.get('type')}")
                return None
            
            return payload
            
        except jwt.ExpiredSignatureError:
            logger.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
            return None
        except jwt.InvalidTokenError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    def _remove_token(self, user_id: int, token: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        if user_id in temp_tokens and token in temp_tokens[user_id]:
            del temp_tokens[user_id][token]
            if not temp_tokens[user_id]:
                del temp_tokens[user_id]
    
    def revoke_user_tokens(self, user_id: int) -> int:
        """–û—Ç–∑—ã–≤ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in temp_tokens:
            count = len(temp_tokens[user_id])
            del temp_tokens[user_id]
            logger.info(f"üîê –û—Ç–æ–∑–≤–∞–Ω–æ {count} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return count
        return 0
    
    def cleanup_expired_tokens(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        current_time = int(time.time())
        expired_count = 0
        
        for user_id in list(temp_tokens.keys()):
            user_tokens = temp_tokens[user_id]
            expired_tokens = [
                token for token, payload in user_tokens.items()
                if payload.get('expires_at', 0) < current_time
            ]
            
            for token in expired_tokens:
                del user_tokens[token]
                expired_count += 1
            
            if not user_tokens:
                del temp_tokens[user_id]
        
        if expired_count > 0:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
token_manager = AdminTokenManager()

@router.message(Command("admin"))
@admin_required
async def admin_panel_access(message: Message, state: FSMContext, db: UniversalDatabase):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        
        logger.info(f"üîê –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç {user_id} (@{username})")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        token = token_manager.generate_secure_token(user_id, username)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
        admin_url = f"http://{ADMIN_HOST}:{ADMIN_PORT}/auth/token-login?token={token}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üåê –û—Ç–∫—Ä—ã—Ç—å –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                    url=admin_url
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω",
                    callback_data="refresh_admin_token"
                ),
                InlineKeyboardButton(
                    text="üö´ –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø",
                    callback_data="revoke_admin_tokens"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤",
                    callback_data="admin_token_stats"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–æ–º
        await message.answer(
            f"üîê <b>Secure –¥–æ—Å—Ç—É–ø –∫ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{username}\n"
            f"üïê –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: <b>5 –º–∏–Ω—É—Ç</b>\n"
            f"üîí –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: <b>Production</b>\n\n"
            f"‚ö†Ô∏è <i>–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!</i>\n"
            f"üîÑ <i>–¢–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞—É–¥–∏—Ç–∞
        await db.log_admin_action(
            admin_id=user_id,
            action="admin_panel_access_requested",
            details={
                "username": username,
                "token_expires_in": token_manager.token_expiry,
                "timestamp": datetime.now().isoformat()
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å secure –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )

@router.callback_query(F.data == "refresh_admin_token")
@admin_required
async def refresh_admin_token(callback, db: UniversalDatabase):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username
        
        # –û—Ç–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
        revoked_count = token_manager.revoke_user_tokens(user_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        token = token_manager.generate_secure_token(user_id, username)
        admin_url = f"http://{ADMIN_HOST}:{ADMIN_PORT}/auth/token-login?token={token}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üåê –û—Ç–∫—Ä—ã—Ç—å –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                    url=admin_url
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω",
                    callback_data="refresh_admin_token"
                ),
                InlineKeyboardButton(
                    text="üö´ –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø",
                    callback_data="revoke_admin_tokens"
                )
            ]
        ])
        
        await callback.message.edit_text(
            f"üîÑ <b>–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{username}\n"
            f"üïê –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: <b>5 –º–∏–Ω—É—Ç</b>\n"
            f"üóëÔ∏è –û—Ç–æ–∑–≤–∞–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: <b>{revoked_count}</b>\n\n"
            f"‚ö†Ô∏è <i>–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", show_alert=True)

@router.callback_query(F.data == "revoke_admin_tokens")
@admin_required
async def revoke_admin_tokens(callback, db: UniversalDatabase):
    """–û—Ç–∑—ã–≤ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username
        
        # –û—Ç–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        revoked_count = token_manager.revoke_user_tokens(user_id)
        
        await callback.message.edit_text(
            f"üö´ <b>–î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω</b>\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{username}\n"
            f"üóëÔ∏è –û—Ç–æ–∑–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: <b>{revoked_count}</b>\n"
            f"üîí –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã\n\n"
            f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</i>",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç–æ–∑–≤–∞–Ω—ã")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–æ–≤
        await db.log_admin_action(
            admin_id=user_id,
            action="admin_tokens_revoked",
            details={
                "username": username,
                "revoked_count": revoked_count,
                "timestamp": datetime.now().isoformat()
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤", show_alert=True)

@router.callback_query(F.data == "admin_token_stats")
@admin_required
async def admin_token_stats(callback, db: UniversalDatabase):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
        user_tokens = temp_tokens.get(user_id, {})
        active_tokens = len(user_tokens)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        current_time = int(time.time())
        token_info = []
        
        for token, payload in user_tokens.items():
            expires_at = payload.get('expires_at', 0)
            time_left = max(0, expires_at - current_time)
            token_info.append(f"‚Ä¢ –¢–æ–∫–µ–Ω: {time_left}—Å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è")
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{callback.from_user.username}\n"
            f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: <b>{active_tokens}</b>\n"
            f"‚è±Ô∏è –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: <b>{token_manager.max_tokens_per_user}</b>\n"
            f"üïê –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞: <b>{token_manager.token_expiry}—Å</b>\n\n"
        )
        
        if token_info:
            stats_text += "üîç <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:</b>\n" + "\n".join(token_info)
        else:
            stats_text += "üîç <i>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤</i>"
        
        await callback.answer(stats_text, show_alert=True)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
async def cleanup_expired_tokens_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    while True:
        try:
            token_manager.cleanup_expired_tokens()
            await asyncio.sleep(60)  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            await asyncio.sleep(60)

# –≠–∫—Å–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
__all__ = ['router', 'token_manager', 'cleanup_expired_tokens_task']
