"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è FinderTool
Production-ready —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ–ª–µ–π
"""
import logging
from aiogram import Router, F
from aiogram.types import Message

from database.universal_database import UniversalDatabase
from bot.keyboards.reply import (
    ReplyButtons, get_main_menu_keyboard, get_admin_menu_keyboard,
    get_subscription_menu_keyboard, is_reply_button
)
from bot.keyboards.inline import get_main_menu, get_subscription_keyboard, get_back_keyboard
from services.payment_service import create_payment_service
from config import (TEXTS, SUBSCRIPTION_PRICE, FREE_REQUESTS_LIMIT,
                   YOOKASSA_PROVIDER_TOKEN, YOOKASSA_CURRENCY, YOOKASSA_PROVIDER_DATA)
from bot.utils.roles import TelegramUserPermissions

logger = logging.getLogger(__name__)
router = Router()


@router.message(F.text == ReplyButtons.MAIN_MENU)
@router.message(F.text == ReplyButtons.MENU_SHORT)
async def handle_main_menu(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user_role = user.get('role', 'user') if user else 'user'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            TEXTS["start"].format(price=SUBSCRIPTION_PRICE),
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(user_role)
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(F.text == ReplyButtons.PROFILE)
@router.message(F.text == ReplyButtons.PROFILE_SHORT)
async def handle_profile(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        
        if not user:
            await db.create_user(
                user_id, 
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )
            user = await db.get_user(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        is_subscribed = await db.check_subscription(user_id)
        subscription_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_subscribed else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
        user_role = user.get('role', 'user')
        role_emoji = {
            'developer': 'üîß',
            'senior_admin': 'üëë',
            'admin': 'üõ°Ô∏è',
            'user': 'üë§'
        }
        role_names = {
            'developer': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            'senior_admin': '–°—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω',
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
        
        profile_text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: <code>{user_id}</code>
üë§ –ò–º—è: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìù Username: @{user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
{role_emoji.get(user_role, 'üë§')} –†–æ–ª—å: {role_names.get(user_role, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
üîç –ó–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user.get('requests_used', 0)} –∏–∑ {FREE_REQUESTS_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö
üíé –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_text}

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10] if user.get('created_at') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
        """
        
        if is_subscribed and user.get('subscription_end'):
            profile_text += f"\n‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user['subscription_end'][:10]}"
        
        await message.answer(
            profile_text.strip(),
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")


@router.message(F.text == ReplyButtons.SUBSCRIPTION)
@router.message(F.text == ReplyButtons.SUBSCRIPTION_SHORT)
async def handle_subscription(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–¥–ø–∏—Å–∫–∞"""
    try:
        user_id = message.from_user.id
        is_subscribed = await db.check_subscription(user_id)
        
        if is_subscribed:
            user = await db.get_user(user_id)
            subscription_end = user.get('subscription_end', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10] if user.get('subscription_end') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            await message.answer(
                f"üíé <b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
                f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_end}\n"
                f"üîç –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∞–∫—Ç–∏–≤–Ω—ã\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                TEXTS["subscription_info"].format(price=SUBSCRIPTION_PRICE),
                parse_mode="HTML",
                reply_markup=get_subscription_keyboard()
            )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª —Ä–∞–∑–¥–µ–ª –ø–æ–¥–ø–∏—Å–∫–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.")


@router.message(F.text == ReplyButtons.HELP)
@router.message(F.text == ReplyButtons.HELP_SHORT)
async def handle_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    try:
        await message.answer(
            TEXTS["help"],
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª —Å–ø—Ä–∞–≤–∫—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏.")


@router.message(F.text == ReplyButtons.ADMIN_PANEL)
@router.message(F.text == ReplyButtons.ADMIN_SHORT)
async def handle_admin_panel(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    try:
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user_role = user.get('role', 'user') if user else 'user'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not TelegramUserPermissions.has_admin_access(user_id, user_role):
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        stats = await db.get_stats()
        
        admin_text = f"""
‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å FinderTool</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats.get('active_subscribers', 0)}
üîç –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.get('requests_today', 0)}

üõ°Ô∏è –í–∞—à–∞ —Ä–æ–ª—å: {user_role}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /admin - –ü–æ–ª–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
‚Ä¢ /payment_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ /stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        
        await message.answer(
            admin_text.strip(),
            parse_mode="HTML",
            reply_markup=get_admin_menu_keyboard()
        )
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} ({user_role}) –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


@router.message(F.text == ReplyButtons.DEV_PANEL)
async def handle_dev_panel(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Dev –ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)"""
    try:
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user_role = user.get('role', 'user') if user else 'user'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        if user_role != 'developer':
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ÆKassa –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from config import YOOKASSA_MODE, YOOKASSA_PROVIDER_TOKEN
        yookassa_mode = YOOKASSA_MODE
        is_live_mode = ":LIVE:" in YOOKASSA_PROVIDER_TOKEN

        dev_text = f"""
üîß <b>–ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>

üöÄ <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –†–µ–∂–∏–º –ÆKassa: {'LIVE' if is_live_mode else 'TEST'}
‚Ä¢ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 2.0 Production
‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω

üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /dev_stats - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /restart - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ

üí° –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        
        await message.answer(
            dev_text.strip(),
            parse_mode="HTML"
        )
        
        logger.info(f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {user_id} –æ—Ç–∫—Ä—ã–ª dev-–ø–∞–Ω–µ–ª—å")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ dev-–ø–∞–Ω–µ–ª–∏ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ dev-–ø–∞–Ω–µ–ª–∏.")


@router.message(F.text == ReplyButtons.STATISTICS)
async def handle_statistics(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user_role = user.get('role', 'user') if user else 'user'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not TelegramUserPermissions.has_admin_access(user_id, user_role):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_stats()

        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FinderTool</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}
üîç –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['requests_today']}

üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫—É: {(stats['active_subscribers'] / max(stats['total_users'], 1) * 100):.1f}%

üõ°Ô∏è –í–∞—à–∞ —Ä–æ–ª—å: {user_role}
        """

        await message.answer(
            stats_text.strip(),
            parse_mode="HTML"
        )

        logger.info(f"–ê–¥–º–∏–Ω {user_id} ({user_role}) –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.message(F.text == ReplyButtons.PAYMENTS)
async def handle_payments(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–ª–∞—Ç–µ–∂–∏"""
    try:
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user_role = user.get('role', 'user') if user else 'user'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not TelegramUserPermissions.has_admin_access(user_id, user_role):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π.")
            return

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π
        payment_service = create_payment_service(
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency=YOOKASSA_CURRENCY,
            provider_data=YOOKASSA_PROVIDER_DATA,
            db=db
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await payment_service.get_payment_statistics()

        if not stats:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        mode = "üß™ –¢–ï–°–¢–û–í–´–ô" if payment_service.is_test_mode else "üî¥ –ü–†–û–î–ê–ö–®–ù"

        stats_text = f"""
üí≥ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ÆKassa</b>
{mode} —Ä–µ–∂–∏–º

üìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {stats.get('today', {}).get('count', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('today', {}).get('successful', 0)}
‚Ä¢ –°—É–º–º–∞: {stats.get('today', {}).get('amount', 0) // 100} ‚ÇΩ

üìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {stats.get('week', {}).get('count', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('week', {}).get('successful', 0)}
‚Ä¢ –°—É–º–º–∞: {stats.get('week', {}).get('amount', 0) // 100} ‚ÇΩ

üìä <b>–í—Å–µ–≥–æ:</b>
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {stats.get('total', {}).get('count', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('total', {}).get('successful', 0)}
‚Ä¢ –°—É–º–º–∞: {stats.get('total', {}).get('amount', 0) // 100} ‚ÇΩ

üõ°Ô∏è –í–∞—à–∞ —Ä–æ–ª—å: {user_role}
        """

        await message.answer(stats_text.strip(), parse_mode="HTML")
        logger.info(f"–ê–¥–º–∏–Ω {user_id} ({user_role}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π.")


@router.message(F.text == ReplyButtons.BROADCAST)
async def handle_broadcast(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –†–∞—Å—Å—ã–ª–∫–∞"""
    try:
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user_role = user.get('role', 'user') if user else 'user'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not TelegramUserPermissions.has_admin_access(user_id, user_role):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫.")
            return

        broadcast_text = f"""
üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

üõ°Ô∏è –í–∞—à–∞ —Ä–æ–ª—å: {user_role}

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /admin - –ü–æ–ª–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π
‚Ä¢ –í–µ–±-–∞–¥–º–∏–Ω–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç–µ run_admin.py

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∞–¥–º–∏–Ω–∫—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

üí° –í–µ–±-–∞–¥–º–∏–Ω–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """

        await message.answer(
            broadcast_text.strip(),
            parse_mode="HTML"
        )

        logger.info(f"–ê–¥–º–∏–Ω {user_id} ({user_role}) –æ—Ç–∫—Ä—ã–ª —Ä–∞–∑–¥–µ–ª —Ä–∞—Å—Å—ã–ª–∫–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")


@router.message(F.text == ReplyButtons.USERS)
async def handle_users(message: Message, db: UniversalDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"""
    try:
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        user_role = user.get('role', 'user') if user else 'user'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not TelegramUserPermissions.has_admin_access(user_id, user_role):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        stats = await db.get_stats()

        users_text = f"""
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('new_users_today', 0)}

üõ°Ô∏è –í–∞—à–∞ —Ä–æ–ª—å: {user_role}

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /admin - –ü–æ–ª–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
‚Ä¢ –í–µ–±-–∞–¥–º–∏–Ω–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç–µ run_admin.py

üí° <b>–í–µ–±-–∞–¥–º–∏–Ω–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:</b>
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        """

        await message.answer(
            users_text.strip(),
            parse_mode="HTML"
        )

        logger.info(f"–ê–¥–º–∏–Ω {user_id} ({user_role}) –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö Reply –∫–Ω–æ–ø–æ–∫
@router.message(F.text.func(lambda text: is_reply_button(text)))
async def handle_unknown_reply_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö Reply –∫–Ω–æ–ø–æ–∫"""
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è Reply –∫–Ω–æ–ø–∫–∞: {message.text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )
