"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram Channel Finder Bot
"""
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN, API_ID, API_HASH, IS_PRODUCTION
from database.production_manager import init_production_database, db_manager
from database.db_adapter import set_database
from bot.middlewares.database import DatabaseMiddleware
from bot.middlewares.role_middleware import RoleMiddleware
from bot.handlers import basic, channels, subscription, admin, reply_menu

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from bot.utils.production_logger import setup_production_logging
setup_production_logging()

logger = logging.getLogger(__name__)

# Production-ready imports (—Å fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
try:
    from bot.middlewares.production_security import (
        RateLimitMiddleware, SecurityMiddleware,
        TimeoutMiddleware, ProductionMonitoringMiddleware
    )
    from bot.utils.health_check import health_manager
    PRODUCTION_MODULES_AVAILABLE = True
    logger.info("‚úÖ Production –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Production –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã")
    PRODUCTION_MODULES_AVAILABLE = False

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è production —Ñ—É–Ω–∫—Ü–∏–π
    if IS_PRODUCTION:
        logger.info("üõ°Ô∏è –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é production –∑–∞—â–∏—Ç—É...")

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î
        class SimpleHealthManager:
            async def perform_health_check(self):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ë–î —á–µ—Ä–µ–∑ production manager
                    from database.production_manager import db_manager
                    db_health = await db_manager.health_check()
                    return {
                        'status': 'healthy' if db_health['status'] == 'healthy' else 'degraded',
                        'components': {'database': db_health}
                    }
                except Exception as e:
                    return {'status': 'unhealthy', 'error': str(e)}

        health_manager = SimpleHealthManager()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    # Production-ready –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ production-ready –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        database_url = os.getenv('DATABASE_URL', 'sqlite:///bot.db')

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π production-ready –º–µ–Ω–µ–¥–∂–µ—Ä
        from database.production_database_manager import initialize_production_database
        db_info = await initialize_production_database(database_url)

        logger.info("‚úÖ Production –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info(f"üìä –¢–∏–ø –ë–î: {db_info.get('database_type')}")
        logger.info(f"üìã –¢–∞–±–ª–∏—Ü: {len(db_info.get('tables', []))}")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        logger.info("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π...")

        # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–∏–≥—Ä–∞—Ü–∏—è–º
        try:
            from database.migration_manager import auto_migrate
            await auto_migrate(database_url)
            logger.info("‚úÖ Fallback –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        except Exception as fallback_error:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {fallback_error}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not API_ID or not API_HASH:
        logger.error("API_ID –∏–ª–∏ API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.error("–ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://my.telegram.org")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # Production-ready –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production-ready –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    db_info = await init_production_database()

    if db_info is None:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {db_info.get('database_type', 'unknown')}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    set_database(db_manager.adapter)
    logger.info("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from database.universal_database import UniversalDatabase
    db = UniversalDatabase(db_manager.database_url)
    logger.info("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # Production-ready middleware stack
    if IS_PRODUCTION and PRODUCTION_MODULES_AVAILABLE:
        logger.info("üîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ production security middleware...")

        # Security middleware (–ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã)
        dp.message.middleware(SecurityMiddleware())
        dp.callback_query.middleware(SecurityMiddleware())

        # Rate limiting middleware
        dp.message.middleware(RateLimitMiddleware())
        dp.callback_query.middleware(RateLimitMiddleware())

        # Timeout middleware
        dp.message.middleware(TimeoutMiddleware())
        dp.callback_query.middleware(TimeoutMiddleware())

        # Monitoring middleware
        monitoring_middleware = ProductionMonitoringMiddleware()
        dp.message.middleware(monitoring_middleware)
        dp.callback_query.middleware(monitoring_middleware)

        logger.info("‚úÖ Production middleware –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
    elif IS_PRODUCTION:
        logger.warning("‚ö†Ô∏è Production —Ä–µ–∂–∏–º, –Ω–æ security –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # –û—Å–Ω–æ–≤–Ω—ã–µ middleware
    dp.message.middleware(DatabaseMiddleware(db))
    dp.callback_query.middleware(DatabaseMiddleware(db))
    dp.pre_checkout_query.middleware(DatabaseMiddleware(db))

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware –¥–ª—è —Ä–æ–ª–µ–π (–ø–æ—Å–ª–µ DatabaseMiddleware)
    dp.message.middleware(RoleMiddleware())
    dp.callback_query.middleware(RoleMiddleware())
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(admin.router)  # –ê–¥–º–∏–Ω —Ä–æ—É—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –¥–ª—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.include_router(reply_menu.router)  # Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    dp.include_router(basic.router)
    dp.include_router(channels.router)
    dp.include_router(subscription.router)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    from bot.handlers import developer
    dp.include_router(developer.router)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
    from bot.handlers import role_management
    dp.include_router(role_management.router)
    
    logger.info("–†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username} (ID: {bot_info.id})")

        # Production health check –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if IS_PRODUCTION and PRODUCTION_MODULES_AVAILABLE:
            logger.info("üè• –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
            try:
                health_status = await health_manager.perform_health_check()

                if health_status['status'] == 'unhealthy':
                    logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
                    for component, status in health_status['components'].items():
                        if status.get('status') != 'healthy':
                            logger.error(f"  - {component}: {status.get('error', 'unknown error')}")
                    return
                else:
                    logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ: {health_status['status']}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ health check: {e}")
                logger.info("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –±–µ–∑ health check")
        elif IS_PRODUCTION:
            logger.info("üè• Health check –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")

        # –ó–∞–ø—É—Å–∫ polling —Å –ø—Ä–æ–ø—É—Å–∫–æ–º —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot, skip_updates=True)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        if IS_PRODUCTION:
            # –í production –ª–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
    finally:
        logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
