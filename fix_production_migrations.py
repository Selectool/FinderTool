#!/usr/bin/env python3
"""
Production-ready —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
–†–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É AdminMigrations –∏ MigrationManager
"""
import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from database.unified_migration_manager import UnifiedMigrationManager, fix_migration_conflicts

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
    
    print("üöÄ Production Migration Fix Tool")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        database_url = 'postgresql://findertool_user:Findertool1999@localhost:5432/findertool_prod'
        print(f"‚ö†Ô∏è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {database_url}")
    else:
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î: {database_url}")
    
    try:
        print("\nüìä –≠—Ç–∞–ø 1: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã...")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π
        manager = UnifiedMigrationManager(database_url)
        
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã schema_migrations...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        from database.db_adapter import DatabaseAdapter
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            if manager.db_type == 'postgresql':
                check_query = """
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'schema_migrations'
                    ORDER BY ordinal_position
                """
            else:
                check_query = "PRAGMA table_info(schema_migrations)"
            
            columns = await adapter.fetch_all(check_query)
            
            if columns:
                print("üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ schema_migrations:")
                for col in columns:
                    if manager.db_type == 'postgresql':
                        print(f"   - {col[0]} ({col[1]})")
                    else:
                        print(f"   - {col[1]} ({col[2]})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ migration_name
                column_names = [col[0] if manager.db_type == 'postgresql' else col[1] for col in columns]
                if 'migration_name' not in column_names:
                    print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ migration_name")
                else:
                    print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ migration_name –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ schema_migrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        finally:
            await adapter.disconnect()
        
        print("\nüîß –≠—Ç–∞–ø 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã...")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
        success = await manager.fix_schema_migrations_table()
        
        if success:
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã schema_migrations –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã")
            return False
        
        print("\nüîÑ –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        admin_success = await manager.run_admin_migrations_fix()
        
        if admin_success:
            print("‚úÖ –ê–¥–º–∏–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–¥–º–∏–Ω –º–∏–≥—Ä–∞—Ü–∏—è–º–∏, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        print("\nüìä –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –º–∏–≥—Ä–∞—Ü–∏—è—Ö
            count_query = "SELECT COUNT(*) FROM schema_migrations"
            result = await adapter.fetch_one(count_query)
            migration_count = result[0] if result else 0
            
            print(f"üìà –ó–∞–ø–∏—Å–µ–π –≤ schema_migrations: {migration_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            if migration_count > 0:
                recent_query = """
                    SELECT migration_name, applied_at 
                    FROM schema_migrations 
                    ORDER BY applied_at DESC 
                    LIMIT 5
                """
                recent = await adapter.fetch_all(recent_query)
                
                print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
                for migration in recent:
                    print(f"   - {migration[0]} ({migration[1]})")
        
        finally:
            await adapter.disconnect()
        
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def quick_fix():
    """–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("‚ö° –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999@localhost:5432/findertool_prod')
    
    try:
        success = await fix_migration_conflicts(database_url)
        
        if success:
            print("‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False


def print_help():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("""
üõ†Ô∏è Production Migration Fix Tool

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python fix_production_migrations.py [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
    fix     - –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    quick   - –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    DATABASE_URL - URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è production)

–ü—Ä–∏–º–µ—Ä—ã:
    python fix_production_migrations.py
    python fix_production_migrations.py fix
    python fix_production_migrations.py quick
    
    # –° —É–∫–∞–∑–∞–Ω–∏–µ–º –ë–î
    DATABASE_URL="postgresql://user:pass@host:5432/db" python fix_production_migrations.py
""")


if __name__ == "__main__":
    command = sys.argv[1] if len(sys.argv) > 1 else "fix"
    
    if command == "help":
        print_help()
    elif command == "quick":
        success = asyncio.run(quick_fix())
        sys.exit(0 if success else 1)
    elif command == "fix":
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print_help()
        sys.exit(1)
