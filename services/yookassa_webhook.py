"""
Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ÆKassa
Production-ready —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –ø–ª–∞—Ç–µ–∂–µ–π
–í–∫–ª—é—á–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏, —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
"""
import logging
import json
import hashlib
import hmac
from typing import Dict, Any, Optional
from datetime import datetime
from decimal import Decimal

from database.universal_database import UniversalDatabase
from .yookassa_client import yookassa_client
from .commission_calculator import commission_calculator

logger = logging.getLogger(__name__)


class YooKassaWebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa"""
    
    def __init__(self, secret_key: str = None, db: UniversalDatabase = None):
        self.secret_key = secret_key
        self.db = db or UniversalDatabase()
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω YooKassaWebhookHandler")
        if secret_key:
            logger.info("‚úÖ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    def verify_signature(self, payload: str, signature: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not self.secret_key:
            logger.warning("–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏")
            return True
        
        try:
            expected_signature = hmac.new(
                self.secret_key.encode('utf-8'),
                payload.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            is_valid = hmac.compare_digest(signature, expected_signature)
            
            if is_valid:
                logger.info("‚úÖ –ü–æ–¥–ø–∏—Å—å webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            
            return is_valid
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏ webhook: {e}")
            return False
    
    async def handle_payment_notification(self, notification_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {json.dumps(notification_data, ensure_ascii=False, indent=2)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
            event = notification_data.get('event')
            payment_object = notification_data.get('object')
            
            if not payment_object:
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
                return False
            
            payment_id = payment_object.get('id')
            status = payment_object.get('status')
            amount = payment_object.get('amount', {}).get('value')
            currency = payment_object.get('amount', {}).get('currency')
            metadata = payment_object.get('metadata', {})
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:")
            logger.info(f"  - Event: {event}")
            logger.info(f"  - Payment ID: {payment_id}")
            logger.info(f"  - Status: {status}")
            logger.info(f"  - Amount: {amount} {currency}")
            logger.info(f"  - Metadata: {metadata}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–∞
            if event == 'payment.succeeded' and status == 'succeeded':
                return await self._handle_successful_payment(payment_object)
            elif event == 'payment.canceled' and status == 'canceled':
                return await self._handle_canceled_payment(payment_object)
            elif event == 'payment.waiting_for_capture':
                return await self._handle_waiting_payment(payment_object)
            else:
                logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status}")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def _handle_successful_payment(self, payment_object: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π"""
        try:
            payment_id = payment_object.get('id')
            amount_data = payment_object.get('amount', {})
            amount_value = Decimal(str(amount_data.get('value', '0')))
            income_amount_data = payment_object.get('income_amount', {})
            income_amount = Decimal(str(income_amount_data.get('value', '0'))) if income_amount_data else amount_value

            metadata = payment_object.get('metadata', {})
            payment_method = payment_object.get('payment_method', {}).get('type', 'unknown')

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ metadata
            user_id = metadata.get('user_id')
            base_price = Decimal(str(metadata.get('base_price', '349')))
            commission = Decimal(str(metadata.get('commission', '0')))

            logger.info(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ webhook:")
            logger.info(f"  - –ÆKassa Payment ID: {payment_id}")
            logger.info(f"  - User ID: {user_id}")
            logger.info(f"  - –û–±—â–∞—è —Å—É–º–º–∞: {amount_value} ‚ÇΩ")
            logger.info(f"  - –ü–æ–ª—É—á–µ–Ω–æ (–ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏ –ÆKassa): {income_amount} ‚ÇΩ")
            logger.info(f"  - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price} ‚ÇΩ")
            logger.info(f"  - –ù–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è: {commission} ‚ÇΩ")
            logger.info(f"  - –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º
            expected_total = commission_calculator.calculate_amount_with_commission(
                base_price,
                payment_method if payment_method != 'unknown' else None
            )

            if abs(amount_value - expected_total) > Decimal('0.01'):
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_total}‚ÇΩ, "
                    f"–ø–æ–ª—É—á–µ–Ω–æ {amount_value}‚ÇΩ"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –±–∞–∑–æ–≤—É—é —Å—É–º–º—É
            if income_amount >= base_price:
                logger.info(f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—É–º–º—É: {income_amount}‚ÇΩ >= {base_price}‚ÇΩ")
            else:
                logger.warning(
                    f"‚ö†Ô∏è –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—å—à–µ –±–∞–∑–æ–≤–æ–π —Å—É–º–º—ã: {income_amount}‚ÇΩ < {base_price}‚ÇΩ"
                )

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id:
                user_id_int = int(user_id)
                success = await self.db.activate_subscription(
                    user_id=user_id_int,
                    months=1,
                    payment_id=payment_id,
                    amount_paid=float(amount_value),
                    income_amount=float(income_amount)
                )

                if success:
                    logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    logger.info(
                        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: "
                        f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_id_int}, "
                        f"–∑–∞–ø–ª–∞—Ç–∏–ª={amount_value}‚ÇΩ, "
                        f"–ø–æ–ª—É—á–∏–ª–∏={income_amount}‚ÇΩ, "
                        f"–∫–æ–º–∏—Å—Å–∏—è_—é–∫–∞—Å—Å–∞={amount_value - income_amount}‚ÇΩ, "
                        f"–Ω–∞—à–∞_–∫–æ–º–∏—Å—Å–∏—è={commission}‚ÇΩ"
                    )

                    return True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")
                    return False
            else:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –≤ metadata –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ webhook: {e}")
            return False
    
    async def _handle_canceled_payment(self, payment_object: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            payment_id = payment_object.get('id')
            metadata = payment_object.get('metadata', {})
            internal_payment_id = metadata.get('payment_id')
            
            logger.info(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:")
            logger.info(f"  - –ÆKassa Payment ID: {payment_id}")
            logger.info(f"  - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Payment ID: {internal_payment_id}")
            
            if internal_payment_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π
                await self.db.update_payment_status(internal_payment_id, 'canceled')
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {internal_payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'canceled'")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
    
    async def _handle_waiting_payment(self, payment_object: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            payment_id = payment_object.get('id')
            logger.info(f"‚è≥ –ü–ª–∞—Ç–µ–∂ {payment_id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False


def create_webhook_handler(secret_key: str = None, db: UniversalDatabase = None) -> YooKassaWebhookHandler:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ webhook'–æ–≤"""
    return YooKassaWebhookHandler(secret_key=secret_key, db=db)
