"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ÆKassa
Production-ready —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
–í–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ÆKassa API
"""
import uuid
import logging
import json
from typing import Optional, Dict, Any, Tuple
from datetime import datetime
from decimal import Decimal

from aiogram.types import LabeledPrice, PreCheckoutQuery, SuccessfulPayment
from database.universal_database import UniversalDatabase
from .commission_calculator import calculate_subscription_price_with_commission, PaymentMethod
from .yookassa_client import yookassa_client

logger = logging.getLogger(__name__)


class YooKassaPaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ –ÆKassa"""

    def __init__(self, provider_token: str, currency: str = "RUB",
                 provider_data: str = None, db: UniversalDatabase = None):
        self.provider_token = provider_token
        self.currency = currency
        self.provider_data = provider_data
        self.db = db or UniversalDatabase()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (TEST –∏–ª–∏ LIVE) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        self.is_test_mode = ":TEST:" in provider_token or provider_token.startswith("test_")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        self._validate_token()

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω YooKassaPaymentService –≤ —Ä–µ–∂–∏–º–µ: {'TEST' if self.is_test_mode else 'LIVE'}")
        logger.info(f"–¢–æ–∫–µ–Ω: {provider_token[:20]}...{provider_token[-10:]}")
        logger.info(f"–í–∞–ª—é—Ç–∞: {currency}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
        if not self.is_test_mode:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–±–æ—Ç–∞ –≤ –ü–†–û–î–ê–ö–®–ù —Ä–µ–∂–∏–º–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏!")
        else:
            logger.info("üß™ –†–∞–±–æ—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

    def _validate_token(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ÆKassa —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        if not self.provider_token:
            raise ValueError("–¢–æ–∫–µ–Ω –ÆKassa –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if self.is_test_mode:
            if not (":TEST:" in self.provider_token or self.provider_token.startswith("test_")):
                raise ValueError("–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ':TEST:' –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'test_'")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Ç–æ–∫–µ–Ω–∞
        if not self.is_test_mode:
            if not (":LIVE:" in self.provider_token or self.provider_token.startswith("live_")):
                raise ValueError("–ü—Ä–æ–¥–∞–∫—à–Ω —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ':LIVE:' –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'live_'")

        logger.info("‚úÖ –¢–æ–∫–µ–Ω –ÆKassa –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")

    def generate_payment_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞"""
        return str(uuid.uuid4())

    async def create_invoice_data(self, user_id: int, amount: Optional[int] = None,
                                description: str = "–ü–æ–¥–ø–∏—Å–∫–∞ FinderTool",
                                subscription_months: int = 1,
                                payment_method: Optional[str] = None) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            subscription_months: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
            payment_method: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        """

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if subscription_months <= 0:
                raise ValueError(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º: {subscription_months}")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Å –∫–æ–º–∏—Å—Å–∏–µ–π
            base_price, price_with_commission, commission_amount = calculate_subscription_price_with_commission(
                payment_method
            )

            # –ï—Å–ª–∏ amount –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Ü–µ–Ω—É
            if amount is None:
                amount = int(price_with_commission * 100)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
            if amount <= 0:
                raise ValueError(f"–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π: {amount}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            payment_id = self.generate_payment_id()
            payload = f"subscription_{subscription_months}m_{payment_id}"

            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
            logger.info(f"  - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price} ‚ÇΩ")
            logger.info(f"  - –ö–æ–º–∏—Å—Å–∏—è: {commission_amount} ‚ÇΩ")
            logger.info(f"  - –ö –¥–æ–ø–ª–∞—Ç–µ: {price_with_commission} ‚ÇΩ")
            logger.info(f"  - –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö: {amount}")
            logger.info(f"  - –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method or 'auto'}")
            logger.info(f"  - –ú–µ—Å—è—Ü–µ–≤: {subscription_months}")
            logger.info(f"  - Payment ID: {payment_id}")
            logger.info(f"  - Payload: {payload}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.create_payment(
                user_id=user_id,
                amount=amount,
                currency=self.currency,
                payment_id=payment_id,
                invoice_payload=payload,
                subscription_months=subscription_months
            )

            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∏—Å—Å–∏–∏
            detailed_description = (
                f"{description}\n"
                f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price} ‚ÇΩ\n"
                f"–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {commission_amount} ‚ÇΩ"
            )

            # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ü–µ–Ω –¥–ª—è Telegram API (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
            prices = [LabeledPrice(label=description, amount=amount)]

            invoice_data = {
                "title": "–ü–æ–¥–ø–∏—Å–∫–∞ FinderTool",
                "description": detailed_description,
                "payload": payload,
                "provider_token": self.provider_token,
                "currency": self.currency,
                "prices": prices,
                "need_phone_number": False,
                "send_phone_number_to_provider": False,
                "provider_data": self.provider_data
            }

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π)
            safe_invoice_data = {k: v for k, v in invoice_data.items() if k not in ["provider_token", "prices"]}
            safe_invoice_data["prices_info"] = f"{len(invoice_data['prices'])} –ø–æ–∑–∏—Ü–∏–π, –æ–±—â–∞—è —Å—É–º–º–∞: {amount} –∫–æ–ø–µ–µ–∫"
            safe_invoice_data["commission_info"] = f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price}‚ÇΩ, –∫–æ–º–∏—Å—Å–∏—è: {commission_amount}‚ÇΩ"
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞: {json.dumps(safe_invoice_data, ensure_ascii=False, indent=2)}")

            return invoice_data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise

    async def process_pre_checkout(self, pre_checkout_query: PreCheckoutQuery) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            payload = pre_checkout_query.invoice_payload
            user_id = pre_checkout_query.from_user.id
            total_amount = pre_checkout_query.total_amount
            currency = pre_checkout_query.currency

            logger.info(f"üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:")
            logger.info(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            logger.info(f"  - Payload: {payload}")
            logger.info(f"  - –°—É–º–º–∞: {total_amount} –∫–æ–ø–µ–µ–∫ ({total_amount/100:.2f} ‚ÇΩ)")
            logger.info(f"  - –í–∞–ª—é—Ç–∞: {currency}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if payload.startswith("subscription_"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º payment_id –∏–∑ payload
                parts = payload.split("_")
                if len(parts) >= 3:
                    payment_id = "_".join(parts[2:])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UUID
                    logger.info(f"  - Payment ID: {payment_id}")

                    payment = await self.db.get_payment(payment_id=payment_id)

                    if payment and payment['status'] == 'pending':
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                        if payment['user_id'] != user_id:
                            logger.error(f"‚ùå –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            return False

                        if payment['amount'] != total_amount:
                            logger.error(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å {payment['amount']}, –ø–æ–ª—É—á–µ–Ω–æ {total_amount}")
                            return False

                        logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} –ø—Ä–æ—à–µ–ª –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
                        return True
                    else:
                        logger.error(f"‚ùå –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
                        return False

            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload: {payload}")
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False

    async def process_successful_payment(self, successful_payment: SuccessfulPayment, user_id: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            payload = successful_payment.invoice_payload
            total_amount = successful_payment.total_amount
            currency = successful_payment.currency
            provider_payment_charge_id = successful_payment.provider_payment_charge_id

            logger.info(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:")
            logger.info(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            logger.info(f"  - Payload: {payload}")
            logger.info(f"  - –°—É–º–º–∞: {total_amount} –∫–æ–ø–µ–µ–∫ ({total_amount/100:.2f} ‚ÇΩ)")
            logger.info(f"  - –í–∞–ª—é—Ç–∞: {currency}")
            logger.info(f"  - Charge ID: {provider_payment_charge_id}")

            if payload.startswith("subscription_"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º payment_id –∏–∑ payload
                parts = payload.split("_")
                if len(parts) >= 3:
                    payment_id = "_".join(parts[2:])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UUID
                    logger.info(f"  - Payment ID: {payment_id}")

                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    success = await self.db.complete_payment(
                        payment_id=payment_id,
                        provider_payment_id=provider_payment_charge_id
                    )

                    if success:
                        logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                        is_subscribed = await self.db.check_subscription(user_id)
                        if is_subscribed:
                            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                        else:
                            logger.error(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")

                        return True
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂ {payment_id}")
                        return False
                else:
                    logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload: {payload}")
                    return False

            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ: {payload}")
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False

    async def create_yookassa_payment(
        self,
        user_id: int,
        payment_method: Optional[str] = None
    ) -> Tuple[str, Decimal, Decimal]:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa API —Å —Ä–∞—Å—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payment_method: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (payment_url, –±–∞–∑–æ–≤–∞—è_—Ü–µ–Ω–∞, —Ü–µ–Ω–∞_—Å_–∫–æ–º–∏—Å—Å–∏–µ–π)
        """
        try:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa –∫–ª–∏–µ–Ω—Ç
            payment, base_price, price_with_commission = await yookassa_client.create_subscription_payment(
                user_id=user_id,
                payment_method=payment_method
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à—É –ë–î
            payment_id = self.generate_payment_id()
            payload = f"yookassa_subscription_{payment_id}"

            await self.db.create_payment(
                user_id=user_id,
                amount=int(price_with_commission * 100),  # –í –∫–æ–ø–µ–π–∫–∞—Ö
                currency="RUB",
                payment_id=payment_id,
                invoice_payload=payload,
                subscription_months=1
            )

            logger.info(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ÆKassa —Å–æ–∑–¥–∞–Ω: ID {payment.id}, "
                f"URL {payment.confirmation.confirmation_url}, "
                f"—Å—É–º–º–∞ {price_with_commission}‚ÇΩ"
            )

            return payment.confirmation.confirmation_url, base_price, price_with_commission

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise

    async def get_payment_info(self, payment_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            payment = await self.db.get_payment(payment_id=payment_id)
            return payment
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ {payment_id}: {e}")
            return None

    async def get_user_payments_history(self, user_id: int) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            payments = await self.db.get_user_payments(user_id)
            return payments
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    def get_test_card_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–µ"""
        if self.is_test_mode:
            return ("–î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
                   "üí≥ –ö–∞—Ä—Ç–∞: 1111 1111 1111 1026\n"
                   "üìÖ –°—Ä–æ–∫: 12/22\n"
                   "üîê CVC: 000")
        return ""

    def format_amount_for_display(self, amount_in_kopecks: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        rubles = amount_in_kopecks // 100
        return f"{rubles} ‚ÇΩ"

    async def cancel_payment(self, payment_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂"""
        try:
            await self.db.update_payment_status(payment_id, "cancelled")
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return False

    async def get_payment_statistics(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏, –∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã
        """
        try:
            from datetime import datetime, timedelta
            import aiosqlite

            stats = {
                'today': {'count': 0, 'amount': 0, 'successful': 0, 'pending': 0, 'failed': 0},
                'week': {'count': 0, 'amount': 0, 'successful': 0, 'pending': 0, 'failed': 0},
                'month': {'count': 0, 'amount': 0, 'successful': 0, 'pending': 0, 'failed': 0},
                'total': {'count': 0, 'amount': 0, 'successful': 0, 'pending': 0, 'failed': 0}
            }

            async with aiosqlite.connect(self.db.db_path) as db:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è - –¢–û–õ–¨–ö–û —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                today = datetime.now().date()
                cursor = await db.execute("""
                    SELECT
                        COUNT(CASE WHEN status = 'completed' THEN 1 END) as successful_count,
                        SUM(CASE WHEN status = 'completed' THEN amount ELSE 0 END) as successful_amount,
                        COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_count,
                        COUNT(CASE WHEN status IN ('cancelled', 'failed') THEN 1 END) as failed_count
                    FROM payments
                    WHERE DATE(created_at) = ?
                """, (today,))
                row = await cursor.fetchone()
                if row:
                    stats['today'] = {
                        'count': row[0] or 0,  # –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                        'amount': row[1] or 0,  # –¢–æ–ª—å–∫–æ —Å—É–º–º–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                        'successful': row[0] or 0,
                        'pending': row[2] or 0,
                        'failed': row[3] or 0
                    }

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é - –¢–û–õ–¨–ö–û —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                week_ago = datetime.now() - timedelta(days=7)
                cursor = await db.execute("""
                    SELECT
                        COUNT(CASE WHEN status = 'completed' THEN 1 END) as successful_count,
                        SUM(CASE WHEN status = 'completed' THEN amount ELSE 0 END) as successful_amount,
                        COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_count,
                        COUNT(CASE WHEN status IN ('cancelled', 'failed') THEN 1 END) as failed_count
                    FROM payments
                    WHERE created_at >= ?
                """, (week_ago,))
                row = await cursor.fetchone()
                if row:
                    stats['week'] = {
                        'count': row[0] or 0,  # –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                        'amount': row[1] or 0,  # –¢–æ–ª—å–∫–æ —Å—É–º–º–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                        'successful': row[0] or 0,
                        'pending': row[2] or 0,
                        'failed': row[3] or 0
                    }

                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –¢–û–õ–¨–ö–û —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                cursor = await db.execute("""
                    SELECT
                        COUNT(CASE WHEN status = 'completed' THEN 1 END) as successful_count,
                        SUM(CASE WHEN status = 'completed' THEN amount ELSE 0 END) as successful_amount,
                        COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_count,
                        COUNT(CASE WHEN status IN ('cancelled', 'failed') THEN 1 END) as failed_count
                    FROM payments
                """)
                row = await cursor.fetchone()
                if row:
                    stats['total'] = {
                        'count': row[0] or 0,  # –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                        'amount': row[1] or 0,  # –¢–æ–ª—å–∫–æ —Å—É–º–º–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                        'successful': row[0] or 0,
                        'pending': row[2] or 0,
                        'failed': row[3] or 0
                    }

            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—É—á–µ–Ω–∞:")
            logger.info(f"  - –°–µ–≥–æ–¥–Ω—è: {stats['today']['successful']} —É—Å–ø–µ—à–Ω—ã—Ö –∏–∑ {stats['today']['successful'] + stats['today']['pending'] + stats['today']['failed']} –≤—Å–µ–≥–æ")
            logger.info(f"  - –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['week']['successful']} —É—Å–ø–µ—à–Ω—ã—Ö –∏–∑ {stats['week']['successful'] + stats['week']['pending'] + stats['week']['failed']} –≤—Å–µ–≥–æ")
            logger.info(f"  - –í—Å–µ–≥–æ: {stats['total']['successful']} —É—Å–ø–µ—à–Ω—ã—Ö –∏–∑ {stats['total']['successful'] + stats['total']['pending'] + stats['total']['failed']} –≤—Å–µ–≥–æ")

            return stats

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return {
                'today': {'count': 0, 'amount': 0, 'successful': 0, 'pending': 0, 'failed': 0},
                'week': {'count': 0, 'amount': 0, 'successful': 0, 'pending': 0, 'failed': 0},
                'month': {'count': 0, 'amount': 0, 'successful': 0, 'pending': 0, 'failed': 0},
                'total': {'count': 0, 'amount': 0, 'successful': 0, 'pending': 0, 'failed': 0}
            }


def create_payment_service(provider_token: str, currency: str = "RUB", 
                          provider_data: str = None, db: UniversalDatabase = None) -> YooKassaPaymentService:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    return YooKassaPaymentService(
        provider_token=provider_token,
        currency=currency,
        provider_data=provider_data,
        db=db
    )
