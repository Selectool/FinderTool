"""
Production-ready —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any
from database.universal_database import UniversalDatabase

logger = logging.getLogger(__name__)

class PaymentCleanupService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""

    def __init__(self, db: UniversalDatabase):
        self.db = db
        self.cleanup_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.invoice_timeout = 1800  # 30 –º–∏–Ω—É—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞
        self.running = False

    def _extract_value(self, result, default=0):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        if not result:
            return default
        if hasattr(result, '__getitem__'):
            return result[0]
        elif hasattr(result, 'count'):
            return result.count
        else:
            return int(result) if result is not None else default
    
    async def cleanup_expired_invoices(self) -> Dict[str, int]:
        """
        –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤
        –û—Ç–º–µ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ–ø–ª–∞—á–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ timeout –ø–µ—Ä–∏–æ–¥–∞
        """
        try:
            from database.db_adapter import DatabaseAdapter
            import os

            # –í—Ä–µ–º—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–Ω–≤–æ–π—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º
            expiry_time = datetime.now() - timedelta(seconds=self.invoice_timeout)

            cleanup_stats = {
                'expired_found': 0,
                'cancelled': 0,
                'errors': 0
            }

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            database_url = os.getenv('DATABASE_URL', 'sqlite:///bot.db')
            adapter = DatabaseAdapter(database_url)
            await adapter.connect()

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã
            if adapter.db_type == 'sqlite':
                expired_payments = await adapter.fetch_all("""
                    SELECT payment_id, user_id, amount, created_at
                    FROM payments
                    WHERE status = 'pending'
                    AND created_at < ?
                """, (expiry_time,))
            else:  # PostgreSQL
                expired_payments = await adapter.fetch_all("""
                    SELECT payment_id, user_id, amount, created_at
                    FROM payments
                    WHERE status = 'pending'
                    AND created_at < $1
                """, (expiry_time,))

            cleanup_stats['expired_found'] = len(expired_payments) if expired_payments else 0

            if expired_payments:
                logger.info(f"üßπ –ù–∞–π–¥–µ–Ω–æ {len(expired_payments)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")

                # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                for payment in expired_payments:
                    try:
                        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        if hasattr(payment, '__getitem__'):
                            payment_id, user_id, amount, created_at = payment[0], payment[1], payment[2], payment[3]
                        else:
                            payment_id = payment.payment_id
                            user_id = payment.user_id
                            amount = payment.amount
                            created_at = payment.created_at

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ cancelled
                        if adapter.db_type == 'sqlite':
                            await adapter.execute("""
                                UPDATE payments
                                SET status = 'expired',
                                    updated_at = CURRENT_TIMESTAMP,
                                    cancellation_reason = 'Invoice expired after 30 minutes'
                                WHERE payment_id = ?
                            """, (payment_id,))
                        else:  # PostgreSQL
                            await adapter.execute("""
                                UPDATE payments
                                SET status = 'expired',
                                    updated_at = NOW(),
                                    cancellation_reason = 'Invoice expired after 30 minutes'
                                WHERE payment_id = $1
                            """, (payment_id,))

                        cleanup_stats['cancelled'] += 1

                        logger.info(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount/100:.2f}‚ÇΩ")

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
                        cleanup_stats['errors'] += 1

                if cleanup_stats['cancelled'] > 0:
                    logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–º–µ–Ω–µ–Ω–æ {cleanup_stats['cancelled']} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤")
            else:
                logger.debug("‚ú® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤: {e}")
            cleanup_stats = {'expired_found': 0, 'cancelled': 0, 'errors': 1}
        finally:
            await adapter.disconnect()

        return cleanup_stats
    
    async def cleanup_old_failed_payments(self, days_old: int = 7) -> int:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î
        """
        try:
            from database.db_adapter import DatabaseAdapter
            import os

            cutoff_date = datetime.now() - timedelta(days=days_old)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            database_url = os.getenv('DATABASE_URL', 'sqlite:///bot.db')
            adapter = DatabaseAdapter(database_url)
            await adapter.connect()

            try:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                if adapter.db_type == 'sqlite':
                    result = await adapter.execute("""
                        DELETE FROM payments
                        WHERE status IN ('expired', 'cancelled', 'failed')
                        AND created_at < ?
                    """, (cutoff_date,))
                else:  # PostgreSQL
                    result = await adapter.execute("""
                        DELETE FROM payments
                        WHERE status IN ('expired', 'cancelled', 'failed')
                        AND created_at < $1
                    """, (cutoff_date,))

                deleted_count = result if result else 0

                if deleted_count > 0:
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (—Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π)")

                return deleted_count

            finally:
                await adapter.disconnect()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return 0
    
    async def get_cleanup_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—á–∏—Å—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            from database.db_adapter import DatabaseAdapter
            import os

            stats = {
                'pending_invoices': 0,
                'expired_invoices': 0,
                'oldest_pending': None,
                'cleanup_needed': False
            }

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            database_url = os.getenv('DATABASE_URL', 'sqlite:///bot.db')
            adapter = DatabaseAdapter(database_url)
            await adapter.connect()

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            row = await adapter.fetch_one("""
                SELECT COUNT(*) FROM payments WHERE status = 'pending'
            """)
            stats['pending_invoices'] = self._extract_value(row, 0)

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            row = await adapter.fetch_one("""
                SELECT COUNT(*) FROM payments WHERE status = 'expired'
            """)
            stats['expired_invoices'] = self._extract_value(row, 0)

            # –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂
            row = await adapter.fetch_one("""
                SELECT MIN(created_at) FROM payments WHERE status = 'pending'
            """)
            oldest_value = self._extract_value(row, None)
            if oldest_value:
                stats['oldest_pending'] = oldest_value

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ—á–∏—Å—Ç–∫–∞
                try:
                    if isinstance(oldest_value, str):
                        oldest_time = datetime.fromisoformat(oldest_value.replace('Z', '+00:00'))
                    else:
                        oldest_time = oldest_value

                    # –£–±–∏—Ä–∞–µ–º timezone info –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    if hasattr(oldest_time, 'replace'):
                        oldest_time = oldest_time.replace(tzinfo=None)

                    if datetime.now() - oldest_time > timedelta(seconds=self.invoice_timeout):
                        stats['cleanup_needed'] = True
                except Exception as parse_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ {oldest_value}: {parse_error}")
                    stats['cleanup_needed'] = False

        except Exception as e:
            import traceback
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏: {e}")
            logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
            stats = {
                'pending_invoices': 0,
                'expired_invoices': 0,
                'oldest_pending': None,
                'cleanup_needed': False
            }
        finally:
            try:
                await adapter.disconnect()
            except:
                pass

        return stats
    
    async def start_cleanup_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
        self.running = True
        logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.cleanup_interval}—Å, —Ç–∞–π–º–∞—É—Ç –∏–Ω–≤–æ–π—Å–∞: {self.invoice_timeout}—Å)")
        
        while self.running:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤
                cleanup_stats = await self.cleanup_expired_invoices()
                
                # –†–∞–∑ –≤ —á–∞—Å —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                current_time = datetime.now()
                if current_time.minute == 0:  # –ö–∞–∂–¥—ã–π —á–∞—Å
                    await self.cleanup_old_failed_payments()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
                await asyncio.sleep(self.cleanup_interval)
                
            except asyncio.CancelledError:
                logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_cleanup_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
        self.running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π...")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_cleanup_service = None

def get_cleanup_service(db: UniversalDatabase) -> PaymentCleanupService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏"""
    global _cleanup_service
    if _cleanup_service is None:
        _cleanup_service = PaymentCleanupService(db)
    return _cleanup_service

async def start_payment_cleanup(db: UniversalDatabase):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    cleanup_service = get_cleanup_service(db)
    await cleanup_service.start_cleanup_scheduler()

def stop_payment_cleanup():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    global _cleanup_service
    if _cleanup_service:
        _cleanup_service.stop_cleanup_scheduler()
