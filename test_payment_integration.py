"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ÆKassa
"""
import asyncio
import logging
from database.models import Database
from services.payment_service import create_payment_service
from config import YOOKASSA_PROVIDER_TOKEN, YOOKASSA_CURRENCY, YOOKASSA_PROVIDER_DATA, SUBSCRIPTION_PRICE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_database_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    db = Database()
    await db.init_db()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 123456789
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.create_user(test_user_id, "test_user", "Test", "User")
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} —Å–æ–∑–¥–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    payment_id = await db.create_payment(
        user_id=test_user_id,
        amount=34900,  # 349 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        currency="RUB",
        payment_id="test-payment-123",
        invoice_payload="subscription_1m_test-payment-123",
        subscription_months=1
    )
    print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —Å ID: {payment_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment = await db.get_payment(payment_id="test-payment-123")
    if payment:
        print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω: {payment['status']}, —Å—É–º–º–∞: {payment['amount']} –∫–æ–ø–µ–µ–∫")
    else:
        print("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞—Ç–µ–∂
    success = await db.complete_payment("test-payment-123", "test-provider-id")
    if success:
        print("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed = await db.check_subscription(test_user_id)
    if is_subscribed:
        print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    else:
        print("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        return False
    
    print("‚úÖ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")
    return True


async def test_payment_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    db = Database()
    await db.init_db()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π
    payment_service = create_payment_service(
        provider_token=YOOKASSA_PROVIDER_TOKEN,
        currency=YOOKASSA_CURRENCY,
        provider_data=YOOKASSA_PROVIDER_DATA,
        db=db
    )
    
    print(f"‚úÖ –°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π —Å–æ–∑–¥–∞–Ω –≤ —Ä–µ–∂–∏–º–µ: {'TEST' if payment_service.is_test_mode else 'LIVE'}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 987654321
    await db.create_user(test_user_id, "test_user_2", "Test", "User2")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
    amount_in_kopecks = SUBSCRIPTION_PRICE * 100
    invoice_data = await payment_service.create_invoice_data(
        user_id=test_user_id,
        amount=amount_in_kopecks,
        description="–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        subscription_months=1
    )
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞ —Å–æ–∑–¥–∞–Ω—ã:")
    print(f"   - –°—É–º–º–∞: {amount_in_kopecks} –∫–æ–ø–µ–µ–∫")
    print(f"   - –í–∞–ª—é—Ç–∞: {invoice_data['currency']}")
    print(f"   - Payload: {invoice_data['payload']}")
    print(f"   - –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {invoice_data['provider_token'][:20]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–µ
    test_card_info = payment_service.get_test_card_info()
    if test_card_info:
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
        print(f"   {test_card_info}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
    formatted_amount = payment_service.format_amount_for_display(amount_in_kopecks)
    print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {formatted_amount}")
    
    print("‚úÖ –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")
    return True


async def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    print(f"‚úÖ –†–µ–∂–∏–º –ÆKassa: TEST")
    print(f"‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {YOOKASSA_PROVIDER_TOKEN}")
    print(f"‚úÖ –í–∞–ª—é—Ç–∞: {YOOKASSA_CURRENCY}")
    print(f"‚úÖ –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {SUBSCRIPTION_PRICE} —Ä—É–±–ª–µ–π")
    print(f"‚úÖ Provider data –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'–î–∞' if YOOKASSA_PROVIDER_DATA else '–ù–µ—Ç'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON provider_data
    import json
    try:
        provider_data = json.loads(YOOKASSA_PROVIDER_DATA)
        receipt = provider_data.get('receipt', {})
        items = receipt.get('items', [])
        if items:
            item = items[0]
            print(f"‚úÖ –ß–µ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
            print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {item.get('description')}")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.get('quantity')}")
            print(f"   - –°—É–º–º–∞: {item.get('amount', {}).get('value')} {item.get('amount', {}).get('currency')}")
            print(f"   - –ù–î–° –∫–æ–¥: {item.get('vat_code')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ provider_data: {e}")
        return False
    
    print("‚úÖ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ÆKassa\n")
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database_integration),
        ("–°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π", test_payment_service),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            if result:
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
        print("-" * 50)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if passed == total else '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}")
    
    if passed == total:
        print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ÆKassa –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram –±–æ—Ç–µ:")
        print("1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe")
        print("2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É: 1111 1111 1111 1026, 12/22, CVC 000")
    else:
        print("\n‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")


if __name__ == "__main__":
    asyncio.run(main())
