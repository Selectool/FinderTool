#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–æ–Ω–∫–æ–π is_subscribed –≤ —Ç–∞–±–ª–∏—Ü–µ users
"""
import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from database.db_adapter import DatabaseAdapter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def fix_subscription_column():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–ª–æ–Ω–∫–æ–π is_subscribed"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_subscribed –≤ —Ç–∞–±–ª–∏—Ü–µ users")
    print("=" * 55)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        database_url = 'postgresql://findertool_user:Findertool1999@localhost:5432/findertool_prod'
        print(f"‚ö†Ô∏è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {database_url}")
    else:
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î: {database_url}")
    
    db_type = 'postgresql' if database_url.startswith('postgresql') else 'sqlite'
    
    try:
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        print("\nüìä –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        if db_type == 'postgresql':
            columns_query = """
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'users'
                ORDER BY ordinal_position
            """
        else:
            columns_query = "PRAGMA table_info(users)"
        
        columns = await adapter.fetch_all(columns_query)
        
        if not columns:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        print("üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:")
        column_names = []
        for col in columns:
            if db_type == 'postgresql':
                column_names.append(col[0])
                print(f"   - {col[0]} ({col[1]}) {'NULL' if col[2] == 'YES' else 'NOT NULL'}")
            else:
                column_names.append(col[1])
                print(f"   - {col[1]} ({col[2]}) {'NULL' if col[3] == 0 else 'NOT NULL'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        has_is_subscribed = 'is_subscribed' in column_names
        has_subscription_active = 'subscription_active' in column_names
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–Ω–æ–∫:")
        print(f"   - is_subscribed: {'‚úÖ –µ—Å—Ç—å' if has_is_subscribed else '‚ùå –Ω–µ—Ç'}")
        print(f"   - subscription_active: {'‚úÖ –µ—Å—Ç—å' if has_subscription_active else '‚ùå –Ω–µ—Ç'}")
        
        if has_is_subscribed:
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ is_subscribed —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
            if has_subscription_active:
                print("\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
                
                sync_query = """
                    SELECT 
                        COUNT(*) as total,
                        COUNT(CASE WHEN is_subscribed != subscription_active THEN 1 END) as mismatched
                    FROM users 
                    WHERE is_subscribed IS NOT NULL AND subscription_active IS NOT NULL
                """
                
                result = await adapter.fetch_one(sync_query)
                if result:
                    total, mismatched = result
                    print(f"   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
                    print(f"   - –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {mismatched}")
                    
                    if mismatched > 0:
                        print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
                        sync_update = """
                            UPDATE users 
                            SET is_subscribed = subscription_active 
                            WHERE is_subscribed != subscription_active
                        """
                        await adapter.execute(sync_update)
                        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            return True
        
        print("\nüîß –≠—Ç–∞–ø 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_subscribed...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É is_subscribed
        if db_type == 'postgresql':
            add_column_query = """
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS is_subscribed BOOLEAN DEFAULT FALSE
            """
        else:
            add_column_query = """
                ALTER TABLE users 
                ADD COLUMN is_subscribed BOOLEAN DEFAULT FALSE
            """
        
        try:
            await adapter.execute(add_column_query)
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ is_subscribed –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            if "already exists" in str(e).lower():
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ is_subscribed —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏: {e}")
                return False
        
        print("\nüîÑ –≠—Ç–∞–ø 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        if has_subscription_active:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º is_subscribed —Å subscription_active
            sync_query = """
                UPDATE users 
                SET is_subscribed = subscription_active 
                WHERE is_subscribed IS NULL OR is_subscribed != subscription_active
            """
            
            try:
                await adapter.execute(sync_query)
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å subscription_active")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_query = """
                UPDATE users 
                SET is_subscribed = FALSE 
                WHERE is_subscribed IS NULL
            """
            
            try:
                await adapter.execute(default_query)
                print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        
        print("\nüìä –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        check_query = """
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN is_subscribed = TRUE THEN 1 END) as subscribed_users,
                COUNT(CASE WHEN is_subscribed IS NULL THEN 1 END) as null_values
            FROM users
        """
        
        result = await adapter.fetch_one(check_query)
        if result:
            total, subscribed, nulls = result
            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            print(f"   - –í—Å–µ–≥–æ: {total}")
            print(f"   - –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {subscribed}")
            print(f"   - NULL –∑–Ω–∞—á–µ–Ω–∏–π: {nulls}")
        
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_subscribed –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        try:
            await adapter.disconnect()
        except:
            pass


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await fix_subscription_column()
    
    if success:
        print("\nüîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return True
    else:
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
