#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import asyncio
import os
from database.universal_database import UniversalDatabase

async def test_database_fixes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä UniversalDatabase
        db = UniversalDatabase()
        print(f"‚úÖ UniversalDatabase —Å–æ–∑–¥–∞–Ω —Å URL: {db.database_url[:50]}...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await db.adapter.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        result = await db.adapter.fetch_one('SELECT COUNT(*) FROM users')
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {result}")
        print(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
        
        if result:
            if hasattr(result, 'keys'):
                print(f"–ö–ª—é—á–∏: {list(result.keys())}")
            if hasattr(result, 'values'):
                print(f"–ó–Ω–∞—á–µ–Ω–∏—è: {list(result.values())}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º _extract_count
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ _extract_count...")
        count = db._extract_count(result)
        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_stats
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_stats...")
        stats = await db.get_stats()
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_users_count
        print("\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_users_count...")
        users_count = await db.get_users_count()
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_subscribers_count
        print("\nüíé –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_subscribers_count...")
        subs_count = await db.get_subscribers_count()
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subs_count}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_users_paginated
        print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_users_paginated...")
        users_data = await db.get_users_paginated(page=1, per_page=10)
        print(f"–ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –≤—Å–µ–≥–æ {users_data['total']}, –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {len(users_data['users'])}")
        
        await db.adapter.disconnect()
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_database_fixes())
    if success:
        print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\nüí• –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
