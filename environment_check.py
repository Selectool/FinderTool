#!/usr/bin/env python3
"""
Environment Check –¥–ª—è Telegram Channel Finder Bot
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import os
import sys
import subprocess
import importlib
from pathlib import Path
from typing import List, Dict, Any

class EnvironmentChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.results = {
            'python': {'status': 'unknown', 'details': {}},
            'dependencies': {'status': 'unknown', 'details': {}},
            'environment': {'status': 'unknown', 'details': {}},
            'database': {'status': 'unknown', 'details': {}},
            'directories': {'status': 'unknown', 'details': {}},
            'permissions': {'status': 'unknown', 'details': {}}
        }
    
    def check_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        try:
            version = sys.version_info
            self.results['python']['details']['version'] = f"{version.major}.{version.minor}.{version.micro}"
            
            if version >= (3, 8):
                self.results['python']['status'] = 'ok'
                self.results['python']['details']['message'] = "–í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç"
            else:
                self.results['python']['status'] = 'error'
                self.results['python']['details']['message'] = "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ"
                
        except Exception as e:
            self.results['python']['status'] = 'error'
            self.results['python']['details']['error'] = str(e)
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        required_packages = [
            'aiogram',
            'psycopg2',
            'fastapi',
            'uvicorn',
            'jinja2',
            'requests',
            'psutil'
        ]
        
        missing = []
        installed = []
        
        for package in required_packages:
            try:
                importlib.import_module(package)
                installed.append(package)
            except ImportError:
                missing.append(package)
        
        self.results['dependencies']['details']['installed'] = installed
        self.results['dependencies']['details']['missing'] = missing
        
        if not missing:
            self.results['dependencies']['status'] = 'ok'
            self.results['dependencies']['details']['message'] = "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else:
            self.results['dependencies']['status'] = 'error'
            self.results['dependencies']['details']['message'] = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}"
    
    def check_environment_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = {
            'BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
            'DATABASE_URL': 'URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
        }
        
        optional_vars = {
            'ENVIRONMENT': '–û–∫—Ä—É–∂–µ–Ω–∏–µ (production/development)',
            'ADMIN_PASSWORD': '–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
            'SECRET_KEY': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–µ—Å—Å–∏–π'
        }
        
        missing_required = []
        present_vars = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
        for var, description in required_vars.items():
            value = os.getenv(var)
            if value:
                # –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if 'TOKEN' in var or 'PASSWORD' in var:
                    present_vars[var] = f"{value[:10]}...{value[-5:]}" if len(value) > 15 else "***"
                else:
                    present_vars[var] = value[:50] + "..." if len(value) > 50 else value
            else:
                missing_required.append(f"{var} ({description})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
        for var, description in optional_vars.items():
            value = os.getenv(var)
            if value:
                if 'PASSWORD' in var or 'SECRET' in var:
                    present_vars[var] = "***"
                else:
                    present_vars[var] = value
        
        self.results['environment']['details']['present'] = present_vars
        self.results['environment']['details']['missing_required'] = missing_required
        
        if not missing_required:
            self.results['environment']['status'] = 'ok'
            self.results['environment']['details']['message'] = "–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else:
            self.results['environment']['status'] = 'error'
            self.results['environment']['details']['message'] = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_required)}"
    
    def check_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            database_url = os.getenv('DATABASE_URL')
            if not database_url:
                self.results['database']['status'] = 'error'
                self.results['database']['details']['message'] = "DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                return
            
            import psycopg2
            conn = psycopg2.connect(database_url)
            cursor = conn.cursor()
            cursor.execute("SELECT version();")
            version = cursor.fetchone()[0]
            cursor.close()
            conn.close()
            
            self.results['database']['status'] = 'ok'
            self.results['database']['details']['message'] = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ"
            self.results['database']['details']['version'] = version
            
        except Exception as e:
            self.results['database']['status'] = 'error'
            self.results['database']['details']['message'] = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
    
    def check_directories(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        required_dirs = [
            'logs',
            'data',
            'database/backups',
            'uploads/broadcasts',
            'temp'
        ]
        
        missing_dirs = []
        existing_dirs = []
        
        for dir_path in required_dirs:
            path = Path(dir_path)
            if path.exists():
                existing_dirs.append(dir_path)
            else:
                missing_dirs.append(dir_path)
        
        self.results['directories']['details']['existing'] = existing_dirs
        self.results['directories']['details']['missing'] = missing_dirs
        
        if not missing_dirs:
            self.results['directories']['status'] = 'ok'
            self.results['directories']['details']['message'] = "–í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
        else:
            self.results['directories']['status'] = 'warning'
            self.results['directories']['details']['message'] = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_dirs)}"
    
    def check_file_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
        critical_files = [
            'unified_startup.py',
            'run_admin.py',
            'config.py'
        ]
        
        permission_issues = []
        accessible_files = []
        
        for file_path in critical_files:
            path = Path(file_path)
            if path.exists():
                if os.access(path, os.R_OK):
                    accessible_files.append(file_path)
                else:
                    permission_issues.append(f"{file_path} (–Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ)")
            else:
                permission_issues.append(f"{file_path} (—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
        logs_dir = Path('logs')
        if logs_dir.exists() and not os.access(logs_dir, os.W_OK):
            permission_issues.append("logs/ (–Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å)")
        
        self.results['permissions']['details']['accessible'] = accessible_files
        self.results['permissions']['details']['issues'] = permission_issues
        
        if not permission_issues:
            self.results['permissions']['status'] = 'ok'
            self.results['permissions']['details']['message'] = "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –ø–æ—Ä—è–¥–∫–µ"
        else:
            self.results['permissions']['status'] = 'error'
            self.results['permissions']['details']['message'] = f"–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(permission_issues)}"
    
    def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Telegram Channel Finder Bot...")
        print()
        
        checks = [
            ("Python –≤–µ—Ä—Å–∏—è", self.check_python_version),
            ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", self.check_dependencies),
            ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.check_environment_variables),
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.check_database_connection),
            ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", self.check_directories),
            ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", self.check_file_permissions)
        ]
        
        for name, check_func in checks:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {name}...")
            try:
                check_func()
                status = self.results[name.lower().replace(' ', '_').replace('–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ_–æ–∫—Ä—É–∂–µ–Ω–∏—è', 'environment')]['status']
                if status == 'ok':
                    print(f"‚úÖ {name}: OK")
                elif status == 'warning':
                    print(f"‚ö†Ô∏è {name}: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
                else:
                    print(f"‚ùå {name}: –û—à–∏–±–∫–∞")
            except Exception as e:
                print(f"‚ùå {name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
            print()
        
        return self.results
    
    def print_detailed_report(self):
        """–ü–µ—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢:")
        print("=" * 50)
        
        for category, data in self.results.items():
            status_icon = {
                'ok': '‚úÖ',
                'warning': '‚ö†Ô∏è',
                'error': '‚ùå',
                'unknown': '‚ùì'
            }.get(data['status'], '‚ùì')
            
            print(f"\n{status_icon} {category.upper()}:")
            
            if 'message' in data['details']:
                print(f"  –°—Ç–∞—Ç—É—Å: {data['details']['message']}")
            
            for key, value in data['details'].items():
                if key != 'message':
                    if isinstance(value, list):
                        if value:
                            print(f"  {key}: {', '.join(value)}")
                    else:
                        print(f"  {key}: {value}")

def main():
    checker = EnvironmentChecker()
    results = checker.run_all_checks()
    
    print("\n" + "="*50)
    checker.print_detailed_report()
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    error_count = sum(1 for data in results.values() if data['status'] == 'error')
    warning_count = sum(1 for data in results.values() if data['status'] == 'warning')
    
    print(f"\nüìä –û–ë–©–ò–ô –°–¢–ê–¢–£–°:")
    if error_count == 0:
        if warning_count == 0:
            print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            print(f"‚ö†Ô∏è –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ —Å {warning_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
    else:
        print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {error_count} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–∞")

if __name__ == "__main__":
    main()
