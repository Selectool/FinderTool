#!/usr/bin/env python3
"""
Production Health Monitor
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
"""
import asyncio
import os
import sys
import time
import logging
import json
import psutil
import httpx
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Any

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["ENVIRONMENT"] = "production"
os.environ["PYTHONPATH"] = "/app"
os.environ["PYTHONUNBUFFERED"] = "1"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/app/logs/health-monitor.log')
    ]
)
logger = logging.getLogger(__name__)

class ProductionHealthMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è production —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.check_interval = 60  # 1 –º–∏–Ω—É—Ç–∞
        self.health_history = []
        self.max_history = 100
        self.alert_thresholds = {
            "cpu_percent": 80,
            "memory_percent": 85,
            "disk_percent": 90,
            "response_time": 5.0  # —Å–µ–∫—É–Ω–¥
        }
        
        # –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.endpoints = [
            {"name": "Admin Panel", "url": "http://127.0.0.1:8080/health", "critical": True},
            {"name": "Admin API", "url": "http://127.0.0.1:8080/api/health", "critical": True}
        ]
    
    async def check_system_resources(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            return {
                "cpu_percent": cpu_percent,
                "memory_percent": memory.percent,
                "memory_available_gb": round(memory.available / (1024**3), 2),
                "disk_percent": disk.percent,
                "disk_free_gb": round(disk.free / (1024**3), 2),
                "status": "healthy"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            return {"status": "error", "error": str(e)}
    
    async def check_database_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from database.db_adapter import DatabaseAdapter
            
            database_url = os.getenv('DATABASE_URL')
            adapter = DatabaseAdapter(database_url)
            
            start_time = time.time()
            await adapter.connect()
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            result = await adapter.fetch_one("SELECT 1")
            
            await adapter.disconnect()
            response_time = time.time() - start_time
            
            return {
                "status": "healthy",
                "response_time": round(response_time, 3),
                "database_type": adapter.db_type,
                "connection_successful": True
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return {
                "status": "unhealthy",
                "error": str(e),
                "connection_successful": False
            }
    
    async def check_endpoints(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
        results = {}
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            for endpoint in self.endpoints:
                try:
                    start_time = time.time()
                    response = await client.get(endpoint["url"])
                    response_time = time.time() - start_time
                    
                    results[endpoint["name"]] = {
                        "status": "healthy" if response.status_code == 200 else "unhealthy",
                        "status_code": response.status_code,
                        "response_time": round(response_time, 3),
                        "critical": endpoint["critical"]
                    }
                    
                except Exception as e:
                    results[endpoint["name"]] = {
                        "status": "unhealthy",
                        "error": str(e),
                        "critical": endpoint["critical"]
                    }
        
        return results
    
    async def check_processes(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        try:
            processes = {
                "telegram_bot": False,
                "admin_panel": False,
                "migration_watcher": False,
                "data_sync": False
            }
            
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    cmdline = ' '.join(proc.info['cmdline'] or [])
                    
                    if 'main.py' in cmdline:
                        processes["telegram_bot"] = True
                    elif 'run_admin.py' in cmdline:
                        processes["admin_panel"] = True
                    elif 'production_migration_watcher.py' in cmdline:
                        processes["migration_watcher"] = True
                    elif 'production_data_sync.py' in cmdline:
                        processes["data_sync"] = True
                        
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            return {
                "status": "healthy" if all(processes.values()) else "warning",
                "processes": processes,
                "running_count": sum(processes.values()),
                "total_count": len(processes)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return {"status": "error", "error": str(e)}
    
    async def check_logs_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–≥–æ–≤"""
        try:
            log_dir = Path("/app/logs")
            log_files = list(log_dir.glob("*.log"))
            
            log_status = {}
            total_size = 0
            
            for log_file in log_files:
                try:
                    stat = log_file.stat()
                    size_mb = stat.st_size / (1024 * 1024)
                    total_size += size_mb
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–ª—è–ª—Å—è –ª–∏ –ª–æ–≥ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
                    last_modified = datetime.fromtimestamp(stat.st_mtime)
                    is_recent = datetime.now() - last_modified < timedelta(minutes=10)
                    
                    log_status[log_file.name] = {
                        "size_mb": round(size_mb, 2),
                        "last_modified": last_modified.isoformat(),
                        "is_recent": is_recent
                    }
                    
                except Exception as e:
                    log_status[log_file.name] = {"error": str(e)}
            
            return {
                "status": "healthy",
                "total_size_mb": round(total_size, 2),
                "log_count": len(log_files),
                "logs": log_status
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}")
            return {"status": "error", "error": str(e)}
    
    async def perform_health_check(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        logger.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        health_report = {
            "timestamp": datetime.now().isoformat(),
            "overall_status": "healthy",
            "checks": {}
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            ("system_resources", self.check_system_resources()),
            ("database", self.check_database_health()),
            ("endpoints", self.check_endpoints()),
            ("processes", self.check_processes()),
            ("logs", self.check_logs_health())
        ]
        
        for check_name, check_coro in checks:
            try:
                result = await check_coro
                health_report["checks"][check_name] = result
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
                if result.get("status") == "unhealthy":
                    health_report["overall_status"] = "unhealthy"
                elif result.get("status") == "warning" and health_report["overall_status"] == "healthy":
                    health_report["overall_status"] = "warning"
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {check_name}: {e}")
                health_report["checks"][check_name] = {"status": "error", "error": str(e)}
                health_report["overall_status"] = "unhealthy"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.health_history.append(health_report)
        if len(self.health_history) > self.max_history:
            self.health_history.pop(0)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status_emoji = {
            "healthy": "‚úÖ",
            "warning": "‚ö†Ô∏è",
            "unhealthy": "‚ùå",
            "error": "üö®"
        }
        
        emoji = status_emoji.get(health_report["overall_status"], "‚ùì")
        logger.info(f"{emoji} –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health_report['overall_status']}")
        
        return health_report
    
    async def save_health_report(self, report: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        try:
            reports_dir = Path("/app/data/health_reports")
            reports_dir.mkdir(parents=True, exist_ok=True)
            
            report_file = reports_dir / f"health_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            report_file.write_text(json.dumps(report, indent=2, ensure_ascii=False))
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24)
            report_files = sorted(reports_dir.glob("health_*.json"))
            if len(report_files) > 24:
                for old_report in report_files[:-24]:
                    old_report.unlink()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ Production Health Monitor...")
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –ü–æ—Ä–æ–≥–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {self.alert_thresholds}")
        
        while True:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
                health_report = await self.perform_health_check()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
                await self.save_health_report(health_report)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(self.check_interval)

if __name__ == "__main__":
    try:
        monitor = ProductionHealthMonitor()
        asyncio.run(monitor.run())
    except KeyboardInterrupt:
        logger.info("üëã Health Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
