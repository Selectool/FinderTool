#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏ Database –∏ UniversalDatabase
–ù–∞—Ö–æ–¥–∏—Ç –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ Database, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ UniversalDatabase
"""

import ast
import os
from typing import Set, List, Dict

def extract_methods_from_file(file_path: str, class_name: str) -> Set[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤ —Ñ–∞–π–ª–µ"""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return set()
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        tree = ast.parse(content)
        methods = set()
        
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef) and node.name == class_name:
                for item in node.body:
                    if isinstance(item, ast.FunctionDef) or isinstance(item, ast.AsyncFunctionDef):
                        methods.add(item.name)
                break
        
        return methods
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return set()

def get_method_signatures(file_path: str, class_name: str) -> Dict[str, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –º–µ—Ç–æ–¥–æ–≤ –∏–∑ –∫–ª–∞—Å—Å–∞"""
    if not os.path.exists(file_path):
        return {}
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        tree = ast.parse(content)
        signatures = {}
        
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef) and node.name == class_name:
                for item in node.body:
                    if isinstance(item, ast.FunctionDef) or isinstance(item, ast.AsyncFunctionDef):
                        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞
                        args = []
                        for arg in item.args.args:
                            args.append(arg.arg)
                        
                        signature = f"{'async ' if isinstance(item, ast.AsyncFunctionDef) else ''}def {item.name}({', '.join(args)})"
                        signatures[item.name] = signature
                break
        
        return signatures
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä –∏–∑ {file_path}: {e}")
        return {}

def analyze_database_differences():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏ Database –∏ UniversalDatabase")
    print("=" * 70)
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    database_file = "database/models.py"
    universal_database_file = "database/universal_database.py"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ –æ–±–æ–∏—Ö –∫–ª–∞—Å—Å–æ–≤
    print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏–∑ Database...")
    database_methods = extract_methods_from_file(database_file, "Database")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –≤ Database: {len(database_methods)}")
    
    print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏–∑ UniversalDatabase...")
    universal_methods = extract_methods_from_file(universal_database_file, "UniversalDatabase")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –≤ UniversalDatabase: {len(universal_methods)}")
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
    missing_methods = database_methods - universal_methods
    extra_methods = universal_methods - database_methods
    common_methods = database_methods & universal_methods
    
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 70)
    
    print(f"\n‚úÖ –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã ({len(common_methods)}):")
    for method in sorted(common_methods):
        print(f"   ‚Ä¢ {method}")
    
    print(f"\n‚ùå –ú–µ—Ç–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ UniversalDatabase ({len(missing_methods)}):")
    if missing_methods:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        database_signatures = get_method_signatures(database_file, "Database")
        
        for method in sorted(missing_methods):
            signature = database_signatures.get(method, f"def {method}(...)")
            print(f"   ‚Ä¢ {signature}")
    else:
        print("   –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
    
    print(f"\n‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ UniversalDatabase ({len(extra_methods)}):")
    if extra_methods:
        universal_signatures = get_method_signatures(universal_database_file, "UniversalDatabase")
        
        for method in sorted(extra_methods):
            signature = universal_signatures.get(method, f"def {method}(...)")
            print(f"   ‚Ä¢ {signature}")
    else:
        print("   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–µ—Ç")
    
    # –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –º–µ—Ç–æ–¥–∞–º –ø–ª–∞—Ç–µ–∂–µ–π
    payment_methods = [m for m in missing_methods if 'payment' in m.lower()]
    if payment_methods:
        print(f"\nüí≥ –ö–†–ò–¢–ò–ß–ù–û - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –ø–ª–∞—Ç–µ–∂–µ–π ({len(payment_methods)}):")
        database_signatures = get_method_signatures(database_file, "Database")
        for method in sorted(payment_methods):
            signature = database_signatures.get(method, f"def {method}(...)")
            print(f"   üö® {signature}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 70)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 70)
    
    if missing_methods:
        print(f"\n1. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å {len(missing_methods)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ UniversalDatabase")
        print("2. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –º–µ—Ç–æ–¥–∞–º –ø–ª–∞—Ç–µ–∂–µ–π - –æ–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
        print("3. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    else:
        print("\n‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º")
    
    return {
        'missing_methods': missing_methods,
        'extra_methods': extra_methods,
        'common_methods': common_methods,
        'payment_methods': payment_methods
    }

if __name__ == "__main__":
    try:
        results = analyze_database_differences()
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {len(results['missing_methods'])}")
        print(f"   ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(results['extra_methods'])}")
        print(f"   ‚Ä¢ –û–±—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤: {len(results['common_methods'])}")
        print(f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π: {len(results['payment_methods'])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
