#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º
os.environ["ENVIRONMENT"] = "production"

async def fix_admin_database():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º production database manager
        from database.production_manager import ProductionDatabaseManager
        
        production_manager = ProductionDatabaseManager()
        await production_manager.initialize_database()
        
        print("‚úÖ Production –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from fastapi import FastAPI
        import uvicorn
        
        app = FastAPI(title="Channel Finder Admin")
        
        @app.get("/")
        async def root():
            return {"message": "Admin panel is working", "status": "ok"}
        
        @app.get("/auth/login")
        async def login_page():
            return {"message": "Login page", "admin": "admin", "password": "admin123"}
        
        @app.get("/health")
        async def health():
            return {"status": "healthy", "database": "postgresql"}
        
        print("üåê –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
        print("üè† –ê–¥—Ä–µ—Å: http://0.0.0.0:8080")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        config = uvicorn.Config(
            app=app,
            host="0.0.0.0",
            port=8080,
            log_level="info"
        )
        server = uvicorn.Server(config)
        await server.serve()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    try:
        asyncio.run(fix_admin_database())
    except KeyboardInterrupt:
        print("\nüëã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
