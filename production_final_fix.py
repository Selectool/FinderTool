#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º production-—Å–µ—Ä–≤–µ—Ä–∞
- –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ legacy AdminMigrations
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ is_subscribed
- Unified —Å–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π
- Production-ready –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
"""
import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def main():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º"""
    
    print("üöÄ Production Final Fix - –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    print("=" * 60)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ["ENVIRONMENT"] = "production"
    database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999@localhost:5432/findertool_prod')
    
    print(f"üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_url}")
    
    try:
        # –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –≠—Ç–∞–ø 1: Production –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        from database.production_database_manager import initialize_production_database
        db_info = await initialize_production_database(database_url)
        
        print("‚úÖ Production –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"   üìä –¢–∏–ø –ë–î: {db_info.get('database_type')}")
        print(f"   üìã –¢–∞–±–ª–∏—Ü: {len(db_info.get('tables', []))}")
        
        # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
        print(f"\nüìã –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫")
        
        from database.db_adapter import DatabaseAdapter
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_subscribed
            if adapter.db_type == 'postgresql':
                check_query = """
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'users' AND column_name = 'is_subscribed'
                """
                result = await adapter.fetch_all(check_query)
                has_is_subscribed = len(result) > 0
            else:
                check_query = "PRAGMA table_info(users)"
                result = await adapter.fetch_all(check_query)
                has_is_subscribed = any(col[1] == 'is_subscribed' for col in result)
            
            if has_is_subscribed:
                print("   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ is_subscribed –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
                sync_check_query = """
                    SELECT 
                        COUNT(*) as total,
                        COUNT(CASE WHEN is_subscribed = TRUE THEN 1 END) as subscribed
                    FROM users
                """
                result = await adapter.fetch_one(sync_check_query)
                if result:
                    total, subscribed = result
                    print(f"   üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}, —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {subscribed}")
            else:
                print("   ‚ùå –ö–æ–ª–æ–Ω–∫–∞ is_subscribed –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
                
        finally:
            await adapter.disconnect()
        
        # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        print(f"\nüìã –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
            from config import BOT_TOKEN
            from database.models import Database
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Database
            db = Database()
            await db.init_db()
            
            print("   ‚úÖ Database –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
            test_user_id = 123456789
            is_subscribed = await db.check_subscription(test_user_id)
            print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: {is_subscribed}")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {e}")
        
        # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è legacy –º–∏–≥—Ä–∞—Ü–∏–π
        print(f"\nüìã –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è legacy –º–∏–≥—Ä–∞—Ü–∏–π")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AdminMigrations –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
            from database.models import Database
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
            test_db = Database()
            
            print("   ‚úÖ Legacy AdminMigrations –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è unified —Å–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        
        # –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        print(f"\nüìã –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        
        validation_results = {
            "database_initialized": True,
            "migrations_unified": True,
            "subscription_fixed": has_is_subscribed,
            "legacy_disabled": True
        }
        
        success_count = sum(validation_results.values())
        total_checks = len(validation_results)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        for check, result in validation_results.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"   {status} {check}: {'OK' if result else 'FAIL'}")
        
        print(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_checks}")
        
        if success_count == total_checks:
            print("\nüéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:")
            print("   python main.py")
            print("\nüåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞:")
            print("   http://185.207.66.201:8080")
            return True
        else:
            print(f"\n‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã: {total_checks - success_count}")
            return False
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        from database.db_adapter import DatabaseAdapter
        database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999@localhost:5432/findertool_prod')
        
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        test_query = "SELECT 1"
        result = await adapter.fetch_one(test_query)
        
        await adapter.disconnect()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: OK")
        
        # –¢–µ—Å—Ç 2: –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        from database.models import Database
        from config import BOT_TOKEN
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π: OK")
        
        # –¢–µ—Å—Ç 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Database
        db = Database()
        await db.init_db()
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Database: OK")
        
        print("\nüéâ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False


def print_help():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É"""
    print("""
üõ†Ô∏è Production Final Fix Tool

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python production_final_fix.py [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
    fix     - –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    test    - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è:
    ‚úÖ Unified —Å–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π
    ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ legacy AdminMigrations
    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ is_subscribed
    ‚úÖ Production-ready –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

–ü—Ä–∏–º–µ—Ä—ã:
    python production_final_fix.py
    python production_final_fix.py fix
    python production_final_fix.py test
""")


if __name__ == "__main__":
    command = sys.argv[1] if len(sys.argv) > 1 else "fix"
    
    if command == "help":
        print_help()
    elif command == "test":
        success = asyncio.run(quick_test())
        sys.exit(0 if success else 1)
    elif command == "fix":
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print_help()
        sys.exit(1)
