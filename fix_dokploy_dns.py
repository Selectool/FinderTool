#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DNS —Ä–µ–∑–æ–ª—é—Ü–∏–∏ –¥–ª—è PostgreSQL –≤ Dokploy
–ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ IP –¥–ª—è findertool-hyvrte
"""

import socket
import subprocess
import ipaddress
import os
from concurrent.futures import ThreadPoolExecutor

def get_container_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
    print("üê≥ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ù–¢–ï–ô–ù–ï–†–ï")
    print("=" * 40)
    
    hostname = socket.gethostname()
    container_ip = socket.gethostbyname(hostname)
    
    print(f"üìç Hostname: {hostname}")
    print(f"üìç IP: {container_ip}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç—å
    try:
        network = ipaddress.IPv4Network(f"{container_ip}/24", strict=False)
        print(f"üìç –°–µ—Ç—å: {network}")
        return container_ip, network
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return container_ip, None

def scan_postgres_hosts(network):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –Ω–∞ PostgreSQL"""
    print(f"\nüîç –ü–û–ò–°–ö POSTGRESQL –í –°–ï–¢–ò {network}")
    print("=" * 50)
    
    postgres_hosts = []
    
    def check_host(ip):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            result = sock.connect_ex((str(ip), 5432))
            sock.close()
            
            if result == 0:
                return str(ip)
        except:
            pass
        return None
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç—å
    print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    with ThreadPoolExecutor(max_workers=50) as executor:
        futures = [executor.submit(check_host, ip) for ip in network.hosts()]
        
        for future in futures:
            result = future.result()
            if result:
                postgres_hosts.append(result)
                print(f"‚úÖ PostgreSQL –Ω–∞–π–¥–µ–Ω –Ω–∞ {result}:5432")
    
    return postgres_hosts

def test_postgres_connection(host, expected_name="findertool-hyvrte"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {host}")
    print("-" * 30)
    
    # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Dokploy
    username = "findertool_user"
    password = "Findertool1999!"
    database = "findertool_prod"
    port = 5432
    
    test_url = f"postgresql://{username}:{password}@{host}:{port}/{database}"
    
    try:
        import psycopg2
        conn = psycopg2.connect(test_url)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT datname FROM pg_database WHERE datistemplate = false;")
        databases = [db[0] for db in cursor.fetchall()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name;
        """)
        tables = [t[0] for t in cursor.fetchall()]
        
        cursor.close()
        conn.close()
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –í–µ—Ä—Å–∏—è: {version[:50]}...")
        print(f"üóÑÔ∏è –ë–∞–∑—ã: {databases}")
        print(f"üìã –¢–∞–±–ª–∏—Ü—ã: {tables[:5]}{'...' if len(tables) > 5 else ''}")
        
        return {
            'host': host,
            'url': test_url,
            'version': version,
            'databases': databases,
            'tables': tables
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def create_hosts_file_entry(postgres_ip):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è /etc/hosts"""
    print(f"\nüìù –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ò /etc/hosts")
    print("=" * 40)
    
    hosts_entry = f"{postgres_ip}    findertool-hyvrte"
    
    print(f"–î–æ–±–∞–≤—å—Ç–µ –≤ /etc/hosts:")
    print(f"{hosts_entry}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –ø—Ä–∞–≤)
    try:
        with open('/etc/hosts', 'a') as f:
            f.write(f"\n# PostgreSQL Dokploy\n{hosts_entry}\n")
        print("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ /etc/hosts")
        return True
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–æ–π
        with open('add_hosts_entry.sh', 'w') as f:
            f.write(f"#!/bin/bash\n")
            f.write(f"# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è PostgreSQL\n")
            f.write(f"echo '{hosts_entry}' >> /etc/hosts\n")
        
        print("üíæ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª add_hosts_entry.sh")
        print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: bash add_hosts_entry.sh")
        return False

def test_dns_resolution():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS —Ä–µ–∑–æ–ª—é—Ü–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print(f"\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DNS –†–ï–ó–û–õ–Æ–¶–ò–ò")
    print("=" * 40)
    
    try:
        ip = socket.gethostbyname('findertool-hyvrte')
        print(f"‚úÖ findertool-hyvrte -> {ip}")
        return ip
    except Exception as e:
        print(f"‚ùå DNS –æ—à–∏–±–∫–∞: {e}")
        return None

def generate_solution(working_connection):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    if not working_connection:
        return
    
    print(f"\nüéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!")
    print("=" * 50)
    
    host = working_connection['host']
    url = working_connection['url']
    
    print(f"‚úÖ PostgreSQL –Ω–∞–π–¥–µ–Ω –Ω–∞ IP: {host}")
    print(f"‚úÖ –†–∞–±–æ—á–∏–π DATABASE_URL: {url}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å –∏–º–µ–Ω–µ–º —Ö–æ—Å—Ç–∞
    correct_url = url.replace(f"@{host}:", "@findertool-hyvrte:")
    
    print(f"\nüîß –ü–†–ê–í–ò–õ–¨–ù–´–ô DATABASE_URL –î–õ–Ø DOKPLOY:")
    print(f"{correct_url}")
    
    print(f"\nüìã –®–ê–ì–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("1. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å—å –≤ /etc/hosts –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:")
    print(f"   {host}    findertool-hyvrte")
    print("2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º–æ–π IP –≤ DATABASE_URL:")
    print(f"   DATABASE_URL={url}")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏—è
    with open('postgres_solution.env', 'w') as f:
        f.write(f"# –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã PostgreSQL –≤ Dokploy\n\n")
        f.write(f"# –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–æ–π IP\n")
        f.write(f"DATABASE_URL={url}\n\n")
        f.write(f"# –í–∞—Ä–∏–∞–Ω—Ç 2: –° –∏–º–µ–Ω–µ–º —Ö–æ—Å—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç /etc/hosts)\n")
        f.write(f"DATABASE_URL={correct_url}\n\n")
        f.write(f"# –ó–∞–ø–∏—Å—å –¥–ª—è /etc/hosts:\n")
        f.write(f"# {host}    findertool-hyvrte\n")
    
    print(f"\nüíæ –†–µ—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ postgres_solution.env")

def main():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï DNS –î–õ–Ø POSTGRESQL –í DOKPLOY")
    print("=" * 60)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    container_ip, network = get_container_info()
    
    if not network:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ç—å")
        return
    
    # 2. –ò—â–µ–º PostgreSQL –≤ —Å–µ—Ç–∏
    postgres_hosts = scan_postgres_hosts(network)
    
    if not postgres_hosts:
        print(f"\n‚ùå PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ {network}")
        print("\nüí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
        print("1. PostgreSQL –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–π —Å–µ—Ç–∏")
        print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π PostgreSQL")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å PostgreSQL —Å–µ—Ä–≤–∏—Å–∞ –≤ Dokploy")
        return
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ PostgreSQL
    working_connections = []
    for host in postgres_hosts:
        result = test_postgres_connection(host)
        if result:
            working_connections.append(result)
    
    if not working_connections:
        print(f"\n‚ùå PostgreSQL –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã")
        return
    
    # 4. –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    best_connection = working_connections[0]
    postgres_ip = best_connection['host']
    
    # 5. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è /etc/hosts
    create_hosts_file_entry(postgres_ip)
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º DNS —Ä–µ–∑–æ–ª—é—Ü–∏—é
    resolved_ip = test_dns_resolution()
    
    # 7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    generate_solution(best_connection)
    
    print(f"\n" + "=" * 60)
    print("üìä –ò–¢–û–ì:")
    if resolved_ip:
        print("‚úÖ DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π DATABASE_URL –∏–∑ Dokploy")
    else:
        print("‚ö†Ô∏è DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DATABASE_URL —Å –ø—Ä—è–º—ã–º IP")

if __name__ == "__main__":
    main()
