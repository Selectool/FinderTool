#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ PostgreSQL –≤ Docker —Å–µ—Ç–∏ Dokploy
–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–µ—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ PostgreSQL
"""

import socket
import subprocess
import ipaddress
import threading
from concurrent.futures import ThreadPoolExecutor

def get_container_network_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("üê≥ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û DOCKER –°–ï–¢–ò")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º IP –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    hostname = socket.gethostname()
    container_ip = socket.gethostbyname(hostname)
    
    print(f"üìç Hostname –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {hostname}")
    print(f"üìç IP –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {container_ip}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç—å
    try:
        network = ipaddress.IPv4Network(f"{container_ip}/24", strict=False)
        print(f"üìç –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å–µ—Ç—å: {network}")
        return network
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ç–∏: {e}")
        return None

def scan_port(ip, port, timeout=2):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞ –Ω–∞ IP"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((str(ip), port))
        sock.close()
        return result == 0
    except:
        return False

def scan_postgres_in_network(network):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ PostgreSQL"""
    print(f"\nüîç –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–ï–¢–ò {network} –ù–ê POSTGRESQL")
    print("=" * 50)
    
    postgres_hosts = []
    
    def check_ip(ip):
        ip_str = str(ip)
        if scan_port(ip_str, 5432, timeout=1):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω PostgreSQL –Ω–∞ {ip_str}:5432")
            return ip_str
        return None
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    with ThreadPoolExecutor(max_workers=50) as executor:
        futures = []
        for ip in network.hosts():
            futures.append(executor.submit(check_ip, ip))
        
        for future in futures:
            result = future.result()
            if result:
                postgres_hosts.append(result)
    
    return postgres_hosts

def test_postgres_connection(host):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POSTGRESQL –ù–ê {host}")
    print("-" * 40)
    
    # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    username = "findertool_user"
    password = "Findertool1999!"
    database = "findertool_prod"
    port = 5432
    
    test_url = f"postgresql://{username}:{password}@{host}:{port}/{database}"
    
    try:
        import psycopg2
        conn = psycopg2.connect(test_url)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –í–µ—Ä—Å–∏—è: {version}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT datname FROM pg_database WHERE datistemplate = false;")
        databases = cursor.fetchall()
        print(f"üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {[db[0] for db in databases]}")
        
        cursor.close()
        conn.close()
        
        return test_url
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def check_docker_compose_networks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose —Å–µ—Ç–µ–π"""
    print(f"\nüåê DOCKER COMPOSE –°–ï–¢–ò")
    print("=" * 30)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π
        result = subprocess.run(['docker', 'network', 'ls'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ Docker —Å–µ—Ç–∏:")
            for line in result.stdout.split('\n')[1:]:
                if line.strip():
                    print(f"  {line}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
        result = subprocess.run(['docker', 'network', 'inspect', 'bridge'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ bridge —Å–µ—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç—è—Ö: {e}")

def generate_working_database_url(working_hosts):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ DATABASE_URL"""
    if not working_hosts:
        return
    
    print(f"\nüéâ –ù–ê–ô–î–ï–ù–´ –†–ê–ë–û–ß–ò–ï POSTGRESQL –•–û–°–¢–´!")
    print("=" * 50)
    
    for i, (host, url) in enumerate(working_hosts, 1):
        print(f"\n{i}. –•–æ—Å—Ç: {host}")
        print(f"   URL: {url}")
    
    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    best_host, best_url = working_hosts[0]
    
    print(f"\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô DATABASE_URL:")
    print(f"{best_url}")
    
    print(f"\nüîß –û–ë–ù–û–í–ò–¢–ï –í DOKPLOY:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("2. –ù–∞–π–¥–∏—Ç–µ DATABASE_URL")
    print("3. –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞:")
    print(f"   DATABASE_URL={best_url}")
    print("4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open('working_database_url.env', 'w') as f:
        f.write(f"# –†–∞–±–æ—á–∏–π DATABASE_URL –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n")
        f.write(f"# –•–æ—Å—Ç: {best_host}\n")
        f.write(f"DATABASE_URL={best_url}\n")
    
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: working_database_url.env")

def main():
    print("üîç –ü–û–ò–°–ö POSTGRESQL –í DOCKER –°–ï–¢–ò DOKPLOY")
    print("=" * 60)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
    network = get_container_network_info()
    
    if not network:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker —Å–µ—Ç–∏
    check_docker_compose_networks()
    
    # 3. –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç—å –Ω–∞ PostgreSQL
    postgres_ips = scan_postgres_in_network(network)
    
    if not postgres_ips:
        print(f"\n‚ùå PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ {network}")
        print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        print("1. PostgreSQL –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–π Docker —Å–µ—Ç–∏")
        print("2. PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç")
        print("3. PostgreSQL –∑–∞–ø—É—â–µ–Ω –Ω–∞ –≤–Ω–µ—à–Ω–µ–º —Å–µ—Ä–≤–µ—Ä–µ")
        print("4. Firewall –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        print(f"\nüí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python diagnose_vps_postgres.py")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PostgreSQL —Å–µ—Ä–≤–∏—Å –≤ Dokploy")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π PostgreSQL —Å–µ—Ä–≤–µ—Ä")
        return
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ PostgreSQL —Ö–æ—Å—Ç—ã
    working_hosts = []
    for ip in postgres_ips:
        working_url = test_postgres_connection(ip)
        if working_url:
            working_hosts.append((ip, working_url))
    
    # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–π DATABASE_URL
    generate_working_database_url(working_hosts)
    
    if not working_hosts:
        print(f"\n‚ùå –ù–∞–π–¥–µ–Ω—ã PostgreSQL —Å–µ—Ä–≤–µ—Ä—ã, –Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        print("1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        print("3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        print("4. PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è localhost")

if __name__ == "__main__":
    main()
