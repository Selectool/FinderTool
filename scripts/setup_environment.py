#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/–ø—Ä–æ–¥–∞–∫—à–Ω
"""
import os
import sys
import shutil
import argparse
from pathlib import Path

def setup_development():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
    
    # –ö–æ–ø–∏—Ä—É–µ–º .env.development –≤ .env –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(".env"):
        if os.path.exists(".env.development"):
            shutil.copy(".env.development", ".env")
            print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω .env.development -> .env")
        else:
            print("‚ùå –§–∞–π–ª .env.development –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
    else:
        print("‚ÑπÔ∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    with open(".env", "r", encoding="utf-8") as f:
        content = f.read()
    
    if "ENVIRONMENT=development" not in content:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º ENVIRONMENT
        lines = content.split("\n")
        updated = False
        for i, line in enumerate(lines):
            if line.startswith("ENVIRONMENT="):
                lines[i] = "ENVIRONMENT=development"
                updated = True
                break
        
        if not updated:
            lines.insert(0, "ENVIRONMENT=development")
        
        with open(".env", "w", encoding="utf-8") as f:
            f.write("\n".join(lines))
    
    print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    print("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://127.0.0.1:8080")
    print("üí≥ –ü–ª–∞—Ç–µ–∂–∏: –¢–ï–°–¢–û–í–´–ô —Ä–µ–∂–∏–º –ÆKassa")
    return True

def setup_production():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üè≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env.example
    if not os.path.exists(".env.example"):
        print("‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ö–æ–ø–∏—Ä—É–µ–º .env.example –≤ .env –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(".env"):
        shutil.copy(".env.example", ".env")
        print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω .env.example -> .env")
    else:
        print("‚ÑπÔ∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    with open(".env", "r", encoding="utf-8") as f:
        content = f.read()
    
    if "ENVIRONMENT=production" not in content:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º ENVIRONMENT
        lines = content.split("\n")
        updated = False
        for i, line in enumerate(lines):
            if line.startswith("ENVIRONMENT="):
                lines[i] = "ENVIRONMENT=production"
                updated = True
                break
        
        if not updated:
            lines.insert(0, "ENVIRONMENT=production")
        
        with open(".env", "w", encoding="utf-8") as f:
            f.write("\n".join(lines))
    
    print("‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env:")
    print("  ‚Ä¢ BOT_TOKEN")
    print("  ‚Ä¢ API_ID –∏ API_HASH")
    print("  ‚Ä¢ ADMIN_USER_ID")
    print("  ‚Ä¢ ADMIN_SECRET_KEY")
    print("  ‚Ä¢ JWT_SECRET_KEY")
    print("  ‚Ä¢ YOOKASSA_SHOP_ID –∏ YOOKASSA_SECRET_KEY")
    print("  ‚Ä¢ ADMIN_ALLOWED_HOSTS –∏ ADMIN_CORS_ORIGINS")
    return True

def show_current_environment():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    if os.path.exists(".env"):
        with open(".env", "r", encoding="utf-8") as f:
            content = f.read()
        
        env = "development"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for line in content.split("\n"):
            if line.startswith("ENVIRONMENT="):
                env = line.split("=", 1)[1].strip()
                break
        
        print(f"üåç –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {env.upper()}")
        
        if env == "development":
            print("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:")
            print("  ‚Ä¢ –•–æ—Å—Ç: 127.0.0.1:8080")
            print("  ‚Ä¢ Debug: –≤–∫–ª—é—á–µ–Ω")
            print("  ‚Ä¢ –ÆKassa: TEST —Ä–µ–∂–∏–º")
            print("  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: bot_dev.db")
        else:
            print("üè≠ –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º:")
            print("  ‚Ä¢ –•–æ—Å—Ç: 0.0.0.0:8080")
            print("  ‚Ä¢ Debug: –≤—ã–∫–ª—é—á–µ–Ω")
            print("  ‚Ä¢ –ÆKassa: LIVE —Ä–µ–∂–∏–º")
            print("  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: bot.db")
    else:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")

def validate_environment():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        sys.path.append(os.getcwd())
        from admin.utils.config_validator import ConfigValidator
        from admin.config import ENVIRONMENT
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_dict = {}
        if os.path.exists(".env"):
            with open(".env", "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        config_dict[key] = value
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validator = ConfigValidator(ENVIRONMENT)
        is_valid = validator.validate_all(config_dict)
        
        print(validator.get_report())
        
        if is_valid:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
        return is_valid
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏ Telegram Channel Finder Bot")
    parser.add_argument("command", choices=["dev", "prod", "status", "validate"], 
                       help="–ö–æ–º–∞–Ω–¥–∞: dev (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞), prod (–ø—Ä–æ–¥–∞–∫—à–Ω), status (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ), validate (–ø—Ä–æ–≤–µ—Ä–∫–∞)")
    
    args = parser.parse_args()
    
    print("ü§ñ Telegram Channel Finder Bot - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏")
    print("=" * 60)
    
    if args.command == "dev":
        success = setup_development()
        if success:
            print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print("   python run_admin.py")
    
    elif args.command == "prod":
        success = setup_production()
        if success:
            print("\nüöÄ –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print("   python run_admin.py")
    
    elif args.command == "status":
        show_current_environment()
    
    elif args.command == "validate":
        validate_environment()

if __name__ == "__main__":
    main()
