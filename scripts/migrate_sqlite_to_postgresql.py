"""
Production-ready —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –æ—Ç–∫–∞—Ç–æ–º
"""
import asyncio
import aiosqlite
import asyncpg
import logging
import os
import sys
from datetime import datetime
from typing import Dict, List, Any, Optional
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.universal_database import UniversalDatabase
from database.db_adapter import DatabaseAdapter

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SQLiteToPostgreSQLMigrator:
    """
    Production-ready –º–∏–≥—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
    """
    
    def __init__(self, sqlite_path: str, postgresql_url: str):
        self.sqlite_path = sqlite_path
        self.postgresql_url = postgresql_url
        self.migration_log = []
        self.rollback_data = {}
        
    async def migrate(self, dry_run: bool = False) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∑–∞–ø–∏—Å–∏
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ SQLite -> PostgreSQL (dry_run={dry_run})")
        
        result = {
            'success': False,
            'migrated_tables': [],
            'migrated_records': {},
            'errors': [],
            'warnings': [],
            'duration': 0,
            'dry_run': dry_run
        }
        
        start_time = datetime.now()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self._validate_connections()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            tables_to_migrate = await self._get_tables_to_migrate()
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(tables_to_migrate)}")
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
            for table_name in tables_to_migrate:
                try:
                    migrated_count = await self._migrate_table(table_name, dry_run)
                    result['migrated_records'][table_name] = migrated_count
                    result['migrated_tables'].append(table_name)
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name}: {migrated_count} –∑–∞–ø–∏—Å–µ–π")
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}"
                    logger.error(error_msg)
                    result['errors'].append(error_msg)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if not dry_run:
                await self._validate_migration(result)
            
            result['success'] = len(result['errors']) == 0
            result['duration'] = (datetime.now() - start_time).total_seconds()
            
            if result['success']:
                logger.info(f"üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {result['duration']:.2f} —Å–µ–∫")
            else:
                logger.error(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏: {len(result['errors'])}")
            
            return result
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}"
            logger.error(error_msg)
            result['errors'].append(error_msg)
            result['duration'] = (datetime.now() - start_time).total_seconds()
            return result
    
    async def _validate_connections(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite
        if not os.path.exists(self.sqlite_path):
            raise FileNotFoundError(f"SQLite —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.sqlite_path}")
        
        async with aiosqlite.connect(self.sqlite_path) as db:
            cursor = await db.execute("SELECT 1")
            await cursor.fetchone()
        
        logger.info("‚úÖ SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
        pg_adapter = DatabaseAdapter(self.postgresql_url)
        await pg_adapter.connect()
        await pg_adapter.fetch_one("SELECT 1")
        await pg_adapter.disconnect()
        
        logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
    
    async def _get_tables_to_migrate(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        async with aiosqlite.connect(self.sqlite_path) as db:
            cursor = await db.execute("""
                SELECT name FROM sqlite_master
                WHERE type='table' AND name NOT LIKE 'sqlite_%'
                ORDER BY name
            """)
            tables = [row[0] for row in await cursor.fetchall()]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        target_tables = ['users', 'requests', 'broadcasts', 'payments']
        return [table for table in tables if table in target_tables]
    
    async def _migrate_table(self, table_name: str, dry_run: bool) -> int:
        """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
        logger.info(f"üì¶ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
        sqlite_data = await self._get_sqlite_data(table_name)
        
        if not sqlite_data:
            logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞")
            return 0
        
        if dry_run:
            logger.info(f"üîç DRY RUN: –ù–∞–π–¥–µ–Ω–æ {len(sqlite_data)} –∑–∞–ø–∏—Å–µ–π –≤ {table_name}")
            return len(sqlite_data)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
        migrated_count = await self._insert_postgresql_data(table_name, sqlite_data)
        
        return migrated_count
    
    async def _get_sqlite_data(self, table_name: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite —Ç–∞–±–ª–∏—Ü—ã"""
        async with aiosqlite.connect(self.sqlite_path) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(f"SELECT * FROM {table_name}")
            rows = await cursor.fetchall()
            return [dict(row) for row in rows]
    
    async def _insert_postgresql_data(self, table_name: str, data: List[Dict[str, Any]]) -> int:
        """–í—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL"""
        if not data:
            return 0
        
        pg_adapter = DatabaseAdapter(self.postgresql_url)
        await pg_adapter.connect()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã PostgreSQL
            columns = await self._get_postgresql_columns(pg_adapter, table_name)
            
            migrated_count = 0
            
            for record in data:
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                    insert_data = self._prepare_record_for_postgresql(record, columns, table_name)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                    placeholders = ', '.join([f'${i+1}' for i in range(len(insert_data))])
                    column_names = ', '.join(insert_data.keys())
                    
                    query = f"""
                        INSERT INTO {table_name} ({column_names})
                        VALUES ({placeholders})
                        ON CONFLICT DO NOTHING
                    """
                    
                    await pg_adapter.execute(query, tuple(insert_data.values()))
                    migrated_count += 1
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ {table_name}: {e}")
                    continue
            
            return migrated_count
            
        finally:
            await pg_adapter.disconnect()
    
    async def _get_postgresql_columns(self, adapter: DatabaseAdapter, table_name: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ PostgreSQL —Ç–∞–±–ª–∏—Ü—ã"""
        result = await adapter.fetch_all("""
            SELECT column_name FROM information_schema.columns
            WHERE table_name = $1 AND table_schema = 'public'
            ORDER BY ordinal_position
        """, (table_name,))
        
        return [row[0] if isinstance(row, (list, tuple)) else row['column_name'] for row in result]
    
    def _prepare_record_for_postgresql(self, record: Dict[str, Any], columns: List[str], table_name: str) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ PostgreSQL"""
        prepared = {}
        
        for column in columns:
            if column in record:
                value = record[column]
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                if table_name == 'users' and column == 'user_id':
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ user_id —ç—Ç–æ BIGINT
                    prepared[column] = int(value) if value is not None else None
                elif column in ['is_subscribed', 'blocked', 'bot_blocked', 'completed', 'unlimited_access']:
                    # –ë—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
                    if value is None:
                        prepared[column] = False
                    elif isinstance(value, bool):
                        prepared[column] = value
                    elif isinstance(value, int):
                        prepared[column] = bool(value)
                    else:
                        prepared[column] = str(value).lower() in ('true', '1', 'yes')
                elif column in ['created_at', 'subscription_end', 'last_request', 'last_payment_date', 'completed_at']:
                    # –î–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∞
                    if value is None:
                        prepared[column] = None
                    elif isinstance(value, str):
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
                            prepared[column] = datetime.fromisoformat(value.replace('Z', '+00:00'))
                        except:
                            prepared[column] = None
                    else:
                        prepared[column] = value
                elif column in ['amount', 'requests_used', 'sent_count', 'failed_count', 'subscription_months']:
                    # –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    prepared[column] = int(value) if value is not None else 0
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
                    prepared[column] = value
            else:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                if column == 'unlimited_access':
                    prepared[column] = False
                elif column in ['status', 'target_type']:
                    prepared[column] = 'pending' if column == 'status' else 'all'
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        
        return prepared
    
    async def _validate_migration(self, result: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        pg_adapter = DatabaseAdapter(self.postgresql_url)
        await pg_adapter.connect()
        
        try:
            for table_name in result['migrated_tables']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                pg_count_result = await pg_adapter.fetch_one(f"SELECT COUNT(*) FROM {table_name}")
                pg_count = pg_count_result[0] if isinstance(pg_count_result, (list, tuple)) else pg_count_result['count']
                
                async with aiosqlite.connect(self.sqlite_path) as db:
                    cursor = await db.execute(f"SELECT COUNT(*) FROM {table_name}")
                    sqlite_count = (await cursor.fetchone())[0]
                
                if pg_count < sqlite_count:
                    warning = f"‚ö†Ô∏è {table_name}: PostgreSQL ({pg_count}) < SQLite ({sqlite_count})"
                    result['warnings'].append(warning)
                    logger.warning(warning)
                else:
                    logger.info(f"‚úÖ {table_name}: {pg_count} –∑–∞–ø–∏—Å–µ–π")
        
        finally:
            await pg_adapter.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö SQLite -> PostgreSQL')
    parser.add_argument('--sqlite-path', default='bot.db', help='–ü—É—Ç—å –∫ SQLite —Ñ–∞–π–ª—É')
    parser.add_argument('--postgresql-url', help='URL PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--dry-run', action='store_true', help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∑–∞–ø–∏—Å–∏')
    
    args = parser.parse_args()
    
    # –ü–æ–ª—É—á–∞–µ–º PostgreSQL URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    postgresql_url = args.postgresql_url or os.getenv('DATABASE_URL')
    
    if not postgresql_url:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω PostgreSQL URL. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --postgresql-url –∏–ª–∏ DATABASE_URL")
        return
    
    migrator = SQLiteToPostgreSQLMigrator(args.sqlite_path, postgresql_url)
    result = await migrator.migrate(dry_run=args.dry_run)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ò–ì–†–ê–¶–ò–ò")
    print("="*50)
    print(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –£–°–ü–ï–®–ù–û' if result['success'] else '‚ùå –û–®–ò–ë–ö–ò'}")
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['duration']:.2f} —Å–µ–∫")
    print(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(result['migrated_tables'])}")
    
    for table, count in result['migrated_records'].items():
        print(f"  ‚Ä¢ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    if result['warnings']:
        print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(result['warnings'])}")
        for warning in result['warnings']:
            print(f"  ‚Ä¢ {warning}")
    
    if result['errors']:
        print(f"\n‚ùå –û—à–∏–±–∫–∏: {len(result['errors'])}")
        for error in result['errors']:
            print(f"  ‚Ä¢ {error}")


if __name__ == "__main__":
    asyncio.run(main())
