#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ production-ready –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from database.production_manager import ProductionDatabaseManager
from database.backup_system import BackupSystem
from database.monitoring import DatabaseMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def init_production_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production-ready –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø PRODUCTION-READY –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã
    db_path = "bot.db"
    if not os.path.exists(db_path):
        print(f"‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å–Ω–∞—á–∞–ª–∞.")
        return False
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db_manager = ProductionDatabaseManager(db_path)
        
        # 2. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        print("\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π...")
        backup_system = BackupSystem(db_path)
        backup_path = await backup_system.create_backup("pre_production_init")
        
        if backup_path:
            print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞!")
            return False
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        health = await db_manager.health_check()
        
        if health['status'] == 'healthy':
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤–∞")
            for check, status in health['checks'].items():
                print(f"   ‚Ä¢ {check}: {status}")
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {health.get('error', 'Unknown')}")
            return False
        
        # 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\n‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        await db_manager.create_indexes()
        print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("\nüîß –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await db_manager.analyze_database()
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # 6. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìà –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        stats = await db_manager.get_database_stats()
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stats['file_size']:,} –±–∞–π—Ç ({stats['file_size']/1024/1024:.1f} MB)")
        print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users_count', 0)}")
        print(f"   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {stats.get('requests_count', 0)}")
        print(f"   ‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {stats.get('payments_count', 0)}")
        print(f"   ‚Ä¢ –†–∞—Å—Å—ã–ª–æ–∫: {stats.get('broadcasts_count', 0)}")
        print(f"   ‚Ä¢ –ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('admin_users_count', 0)}")
        
        if 'users_total' in stats:
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_total']}")
            print(f"   ‚Ä¢ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {stats['users_subscribed']}")
            print(f"   ‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['users_blocked']}")
        
        # 7. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("\nüì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        monitor = DatabaseMonitor(db_path)
        metrics = await monitor.collect_metrics()
        print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã)")
        
        # 8. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã
        print("\n‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤...")
        backup_system.start_scheduler()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ç–∫–∞–ø–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        print("   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±—ç–∫–∞–ø—ã: 02:00")
        print("   ‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –±—ç–∫–∞–ø—ã: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 03:00")
        print("   ‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –±—ç–∫–∞–ø—ã: 1 —á–∏—Å–ª–æ 04:00")
        print("   ‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: 05:00")
        
        # 9. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        print("\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        report = await monitor.generate_report()
        
        if 'error' not in report:
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {report['health_status']}")
            print(f"   ‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤: {len(report['alerts'])}")
            
            if report['alerts']:
                print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–ª–µ—Ä—Ç—ã:")
                for alert in report['alerts']:
                    print(f"   ‚Ä¢ {alert['type']}: {alert['message']}")
        
        # 10. –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
        duplicate_dbs = ['bot_dev.db', 'admin/bot.db']
        
        for db_file in duplicate_dbs:
            if os.path.exists(db_file):
                try:
                    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    backup_name = f"backup_before_cleanup_{os.path.basename(db_file)}"
                    backup_path = f"backups/{backup_name}"
                    os.makedirs("backups", exist_ok=True)
                    
                    import shutil
                    shutil.copy2(db_file, backup_path)
                    
                    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∞–∑—É
                    os.remove(db_file)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞: {db_file} (–±—ç–∫–∞–ø: {backup_path})")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {db_file}: {e}")
        
        print("\n" + "=" * 60)
        print("üéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø PRODUCTION-READY –ë–ê–ó–´ –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        
        print("\nüìã –ò–¢–û–ì–ò:")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω")
        print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–µ–Ω")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑—ã –æ—á–∏—â–µ–Ω—ã")
        
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–º–µ—Ä–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤")
        print("‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ health check")
        
        print("\nüîß –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: python -c \"from database.production_manager import db_manager; import asyncio; print(asyncio.run(db_manager.health_check()))\"")
        print("‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: python -c \"from database.backup_system import backup_system; import asyncio; print(asyncio.run(backup_system.create_backup()))\"")
        print("‚Ä¢ –û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: python -c \"from database.monitoring import db_monitor; import asyncio; print(asyncio.run(db_monitor.generate_report()))\"")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await init_production_database()
    
    if success:
        print("\nüöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        sys.exit(0)
    else:
        print("\nüí• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
