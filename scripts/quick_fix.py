#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
–ü—Ä–æ—Å—Ç–æ–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""
import asyncio
import os
import sys
import subprocess
import time
from pathlib import Path

def log(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏"""
    colors = {
        "INFO": "\033[0;34m",
        "SUCCESS": "\033[0;32m", 
        "WARNING": "\033[1;33m",
        "ERROR": "\033[0;31m"
    }
    reset = "\033[0m"
    print(f"{colors.get(level, '')}{message}{reset}")

def run_command(command, check=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ shell"""
    log(f"–í—ã–ø–æ–ª–Ω—è—é: {command}")
    try:
        result = subprocess.run(command, shell=True, check=check, 
                              capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        return result.returncode == 0
    except subprocess.CalledProcessError as e:
        log(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {e}", "ERROR")
        if e.stderr:
            print(e.stderr)
        return False

def stop_processes():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
    log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –ø—Ä–æ—Ü–µ—Å—Å—ã
    run_command("pkill -f 'python main.py'", check=False)
    run_command("pkill -f 'python run_admin.py'", check=False)
    
    time.sleep(3)
    log("–ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "SUCCESS")

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DATABASE_URL –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if not os.getenv('DATABASE_URL'):
        os.environ['DATABASE_URL'] = "postgresql://findertool_user:Findertool1999!@postgres:5432/findertool_prod"
        log("DATABASE_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    test_code = """
import asyncio
import asyncpg
import os

async def test():
    try:
        conn = await asyncpg.connect(os.getenv('DATABASE_URL'))
        await conn.execute('SELECT 1')
        await conn.close()
        print('‚úÖ PostgreSQL OK')
        return True
    except Exception as e:
        print(f'‚ùå PostgreSQL Error: {e}')
        return False

result = asyncio.run(test())
exit(0 if result else 1)
"""
    
    with open('/tmp/test_db.py', 'w') as f:
        f.write(test_code)
    
    if run_command("python /tmp/test_db.py"):
        log("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞", "SUCCESS")
        return True
    else:
        log("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "ERROR")
        return False

def migrate_sqlite_if_needed():
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    if os.path.exists('bot.db'):
        log("–ù–∞–π–¥–µ–Ω SQLite —Ñ–∞–π–ª", "WARNING")
        
        response = input("–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ PostgreSQL? (y/N): ")
        if response.lower() == 'y':
            log("–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏...")
            
            if os.path.exists('scripts/migrate_sqlite_to_postgresql.py'):
                success = run_command(
                    "python scripts/migrate_sqlite_to_postgresql.py "
                    "--sqlite-path bot.db --dry-run"
                )
                
                if success:
                    confirm = input("Dry run —É—Å–ø–µ—à–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ")
                    if confirm.lower() == 'y':
                        run_command(
                            "python scripts/migrate_sqlite_to_postgresql.py "
                            "--sqlite-path bot.db"
                        )
                        
                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º SQLite —Ñ–∞–π–ª
                        backup_name = f"bot.db.backup_{int(time.time())}"
                        os.rename('bot.db', backup_name)
                        log(f"SQLite —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {backup_name}", "SUCCESS")
            else:
                log("–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")

def test_statistics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    log("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

    test_code = """
import asyncio
import os
import sys

async def test():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        import asyncpg
        conn = await asyncpg.connect(os.getenv('DATABASE_URL'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        tables_query = '''
            SELECT table_name FROM information_schema.tables
            WHERE table_schema = 'public'
            AND table_name IN ('users', 'requests', 'broadcasts', 'payments')
        '''

        result = await conn.fetch(tables_query)
        existing_tables = [row['table_name'] for row in result]
        print(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(existing_tables)} –∏–∑ 4')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if 'users' in existing_tables:
            user_count = await conn.fetchval('SELECT COUNT(*) FROM users')
            print(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {user_count}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        if 'requests' in existing_tables:
            request_count = await conn.fetchval('SELECT COUNT(*) FROM requests')
            print(f'‚úÖ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –ë–î: {request_count}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π
        if 'payments' in existing_tables:
            payment_count = await conn.fetchval('SELECT COUNT(*) FROM payments')
            print(f'‚úÖ –ü–ª–∞—Ç–µ–∂–µ–π –≤ –ë–î: {payment_count}')

        await conn.close()

        print('‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã')
        return True

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        import traceback
        traceback.print_exc()
        return False

result = asyncio.run(test())
exit(0 if result else 1)
"""

    with open('/tmp/test_stats.py', 'w') as f:
        f.write(test_code)

    if run_command("python /tmp/test_stats.py"):
        log("–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã", "SUCCESS")
        return True
    else:
        log("–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫", "WARNING")
        log("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "INFO")
        return True  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫

def start_services():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"""
    log("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    log("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    run_command("nohup python main.py > bot.log 2>&1 &")
    
    time.sleep(5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if run_command("pgrep -f 'python main.py'", check=False):
        log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", "SUCCESS")
    else:
        log("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è", "ERROR")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    log("–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
    run_command("nohup python run_admin.py > admin.log 2>&1 &")
    
    time.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if run_command("pgrep -f 'python run_admin.py'", check=False):
        log("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞", "SUCCESS")
    else:
        log("‚ö†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å", "WARNING")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('main.py'):
        log("–§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞.", "ERROR")
        sys.exit(1)
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if os.path.exists('.venv/bin/activate'):
        log("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        # –î–ª—è Linux
        venv_python = '.venv/bin/python'
    elif os.path.exists('.venv/Scripts/activate'):
        # –î–ª—è Windows (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ)
        venv_python = '.venv/Scripts/python'
    else:
        log("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "ERROR")
        sys.exit(1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º sys.executable –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è venv
    sys.executable = venv_python
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
        stop_processes()
        
        if not check_database():
            log("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "ERROR")
            sys.exit(1)
        
        migrate_sqlite_if_needed()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        run_command(f"{venv_python} -m pip install -r requirements.txt")
        
        if not test_statistics():
            log("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "ERROR")
            sys.exit(1)
        
        if not start_services():
            log("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤", "ERROR")
            sys.exit(1)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        log("–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        time.sleep(5)
        
        print("\n" + "=" * 50)
        log("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!", "SUCCESS")
        print("\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:")
        print("‚Ä¢ –í–µ–±-–ø–∞–Ω–µ–ª—å: http://185.207.66.201:8080/")
        print("‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: /stats, /payment_stats, /health")
        print("\nüìã –õ–æ–≥–∏:")
        print("‚Ä¢ –ë–æ—Ç: tail -f bot.log")
        print("‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: tail -f admin.log")
        
    except KeyboardInterrupt:
        log("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
        sys.exit(1)
    except Exception as e:
        log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
        sys.exit(1)

if __name__ == "__main__":
    main()
