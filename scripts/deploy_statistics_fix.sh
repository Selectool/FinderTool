#!/bin/bash

# Production-ready —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# Telegram Channel Finder Bot - Statistics Fix Deployment

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ"
echo "=================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
check_server() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    if [ ! -f "/root/.venv/bin/activate" ]; then
        log_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
        exit 1
    fi
    
    if [ ! -f "main.py" ]; then
        log_error "–§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞."
        exit 1
    fi
    
    log_success "–°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
create_backup() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏..."
    
    BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # –ë—ç–∫–∞–ø–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    cp -r database/ "$BACKUP_DIR/" 2>/dev/null || true
    cp -r services/ "$BACKUP_DIR/" 2>/dev/null || true
    cp -r bot/handlers/ "$BACKUP_DIR/" 2>/dev/null || true
    cp -r admin/ "$BACKUP_DIR/" 2>/dev/null || true
    cp main.py "$BACKUP_DIR/" 2>/dev/null || true
    
    log_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $BACKUP_DIR"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
stop_bot() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python
    pkill -f "python main.py" || true
    pkill -f "python run_admin.py" || true
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    sleep 3
    
    log_success "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
check_database() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -z "$DATABASE_URL" ]; then
        log_error "DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: export DATABASE_URL='postgresql://findertool_user:Findertool1999!@postgres:5432/findertool_prod'"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    python3 -c "
import asyncio
import asyncpg
import os

async def test_connection():
    try:
        conn = await asyncpg.connect(os.getenv('DATABASE_URL'))
        await conn.execute('SELECT 1')
        await conn.close()
        print('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
        return True
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}')
        return False

result = asyncio.run(test_connection())
exit(0 if result else 1)
" || {
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL!"
        log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        exit 1
    }
    
    log_success "PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
}

# –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
migrate_data() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö..."
    
    if [ -f "bot.db" ]; then
        log_warning "–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª SQLite (bot.db)"
        read -p "–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL? (y/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log_info "–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö..."
            
            source .venv/bin/activate
            python scripts/migrate_sqlite_to_postgresql.py \
                --sqlite-path bot.db \
                --postgresql-url "$DATABASE_URL" || {
                log_error "–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö!"
                exit 1
            }
            
            log_success "–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º SQLite —Ñ–∞–π–ª
            mv bot.db "bot.db.backup_$(date +%Y%m%d_%H%M%S)"
            log_info "SQLite —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ –±—ç–∫–∞–ø"
        else
            log_info "–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞"
        fi
    else
        log_info "SQLite —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    source .venv/bin/activate
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    pip install --upgrade pip
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    pip install -r requirements.txt
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database() {
    log_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    source .venv/bin/activate
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î
    python -c "
import asyncio
import os
import sys
sys.path.append('.')

async def init_db():
    try:
        from database.universal_database import UniversalDatabase
        
        db = UniversalDatabase(os.getenv('DATABASE_URL'))
        await db.adapter.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        tables_query = '''
            SELECT table_name FROM information_schema.tables
            WHERE table_schema = 'public'
            AND table_name IN ('users', 'requests', 'broadcasts', 'payments')
        '''
        
        result = await db.adapter.fetch_all(tables_query)
        existing_tables = [row[0] for row in result]
        
        print(f'–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}')
        
        if len(existing_tables) < 4:
            print('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...')
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        
        await db.adapter.disconnect()
        print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}')
        sys.exit(1)

asyncio.run(init_db())
" || {
        log_error "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!"
        exit 1
    }
    
    log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
test_system() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."
    
    source .venv/bin/activate
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    python -c "
import asyncio
import os
import sys
sys.path.append('.')

async def test_statistics():
    try:
        from database.universal_database import UniversalDatabase
        from services.statistics_service import StatisticsService
        
        db = UniversalDatabase(os.getenv('DATABASE_URL'))
        stats_service = StatisticsService(db)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        basic_stats = await stats_service.get_basic_statistics()
        print(f'‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {basic_stats.total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        detailed_stats = await stats_service.get_detailed_statistics()
        print(f'‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(detailed_stats)} –º–µ—Ç—Ä–∏–∫')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        payment_stats = await stats_service.get_payment_statistics()
        print(f'‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {payment_stats.get(\"total\", {}).get(\"count\", 0)} –ø–ª–∞—Ç–µ–∂–µ–π')
        
        print('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
        sys.exit(1)

asyncio.run(test_statistics())
" || {
        log_error "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã!"
        exit 1
    }
    
    log_success "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
start_bot() {
    log_info "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
    
    source .venv/bin/activate
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    nohup python main.py > bot.log 2>&1 &
    BOT_PID=$!
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
    if kill -0 $BOT_PID 2>/dev/null; then
        log_success "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: $BOT_PID)"
        echo $BOT_PID > bot.pid
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞!"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
start_admin() {
    log_info "–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏..."
    
    source .venv/bin/activate
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ —Ñ–æ–Ω–µ
    nohup python run_admin.py > admin.log 2>&1 &
    ADMIN_PID=$!
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
    if kill -0 $ADMIN_PID 2>/dev/null; then
        log_success "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ (PID: $ADMIN_PID)"
        echo $ADMIN_PID > admin.pid
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!"
        exit 1
    fi
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
final_check() {
    log_info "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    if pgrep -f "python main.py" > /dev/null; then
        log_success "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    if pgrep -f "python run_admin.py" > /dev/null; then
        log_success "‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "‚ö†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    if netstat -tuln | grep :8080 > /dev/null; then
        log_success "‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8080"
    else
        log_warning "‚ö†Ô∏è –ü–æ—Ä—Ç 8080 –Ω–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è"
    fi
    
    log_success "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo ""
    echo "üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:"
    echo "‚Ä¢ –í–µ–±-–ø–∞–Ω–µ–ª—å: http://185.207.66.201:8080/"
    echo "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: /stats, /payment_stats, /health"
    echo ""
    echo "üìã –õ–æ–≥–∏:"
    echo "‚Ä¢ –ë–æ—Ç: tail -f bot.log"
    echo "‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: tail -f admin.log"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üîß Production-ready –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    echo "–°–µ—Ä–≤–µ—Ä: 185.207.66.201"
    echo "–ü—Ä–æ–µ–∫—Ç: Telegram Channel Finder Bot"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DATABASE_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if [ -z "$DATABASE_URL" ]; then
        log_warning "DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é..."
        export DATABASE_URL="postgresql://findertool_user:Findertool1999!@postgres:5432/findertool_prod"
    fi
    
    log_info "DATABASE_URL: $DATABASE_URL"
    echo ""
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
    check_server
    create_backup
    stop_bot
    check_database
    migrate_data
    install_dependencies
    init_database
    test_system
    start_bot
    start_admin
    final_check
    
    log_success "üéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
