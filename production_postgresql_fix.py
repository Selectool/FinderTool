#!/usr/bin/env python3
"""
Production-ready –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö PostgreSQL –ø—Ä–æ–±–ª–µ–º
Senior Developer Level Solution
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def run_migration():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã"""
    try:
        from database.migration_manager import MigrationManager
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã...")
        migration_manager = MigrationManager()
        await migration_manager.migrate()
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def fix_universal_database_methods():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã UniversalDatabase –¥–ª—è PostgreSQL"""
    logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UniversalDatabase –º–µ—Ç–æ–¥–æ–≤...")
    
    file_path = 'database/universal_database.py'
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –°–æ–∑–¥–∞–µ–º backup
        backup_path = f'{file_path}.production_backup'
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        logger.info(f"üìÅ Backup —Å–æ–∑–¥–∞–Ω: {backup_path}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        fixes = [
            # get_stats method
            ('total_users_result[0] if total_users_result else 0', 'self._extract_count(total_users_result)'),
            ('active_subs_result[0] if active_subs_result else 0', 'self._extract_count(active_subs_result)'),
            ('requests_today_result[0] if requests_today_result else 0', 'self._extract_count(requests_today_result)'),
            
            # get_users_count method
            ('return result[0] if result else 0', 'return self._extract_count(result)'),
            
            # get_subscribers_count method
            ('result[0] if result else 0', 'self._extract_count(result)'),
            
            # –û–±—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            ('count = result[0]', 'count = self._extract_count(result)'),
            ('count_result[0]', 'self._extract_count(count_result)'),
            ('users_result[0]', 'self._extract_count(users_result)'),
            ('subs_result[0]', 'self._extract_count(subs_result)'),
        ]
        
        changes_made = 0
        for old_text, new_text in fixes:
            if old_text in content:
                content = content.replace(old_text, new_text)
                changes_made += 1
                logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {old_text[:40]}...")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        logger.info(f"üéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {changes_made} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ UniversalDatabase")
        return changes_made > 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ UniversalDatabase: {e}")
        return False

def fix_broadcast_parameters():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–æ–∫"""
    logger.info("üì¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫...")
    
    files_to_fix = [
        ('admin/api/broadcasts.py', 'scheduled_at=None', 'scheduled_time=None'),
        ('bot/handlers/admin.py', 'scheduled_at=None', 'scheduled_time=None'),
    ]
    
    changes_made = 0
    for file_path, old_text, new_text in files_to_fix:
        try:
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                if old_text in content:
                    content = content.replace(old_text, new_text)
                    
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                    changes_made += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
    
    return changes_made > 0

async def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database.production_manager import ProductionDatabaseManager
        
        db_manager = ProductionDatabaseManager()
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        stats = await db_manager.get_stats()
        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await db_manager.get_users_paginated(page=1, per_page=5)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã: {users['total']} –≤—Å–µ–≥–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    logger.info("=" * 60)
    logger.info("üöÄ PRODUCTION-READY –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï POSTGRESQL –ü–†–û–ë–õ–ï–ú")
    logger.info("=" * 60)
    
    success_count = 0
    total_steps = 5
    
    # –®–∞–≥ 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UniversalDatabase
    logger.info("\nüìù –®–∞–≥ 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UniversalDatabase –º–µ—Ç–æ–¥–æ–≤")
    if fix_universal_database_methods():
        success_count += 1
        logger.info("‚úÖ UniversalDatabase –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è UniversalDatabase")
    
    # –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫
    logger.info("\nüì¢ –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫")
    if fix_broadcast_parameters():
        success_count += 1
        logger.info("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫")
    
    # –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    logger.info("\nüîÑ –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π")
    if await run_migration():
        success_count += 1
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π")
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    logger.info("\nüîç –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    if await test_database_connection():
        success_count += 1
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    
    # –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    logger.info("\nüèÅ –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
    if success_count >= 3:  # –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 4 —à–∞–≥–æ–≤ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
        success_count += 1
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("=" * 60)
    logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {success_count}/{total_steps} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count >= 4:
        logger.info("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        logger.info("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
        logger.info("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: python run_admin.py")
        logger.info("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return True
    else:
        logger.error("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
