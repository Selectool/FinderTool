#!/usr/bin/env python3
"""
Unified Startup Script –¥–ª—è Telegram Channel Finder Bot
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ Telegram –±–æ—Ç–∞, –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Railpack deployment
"""

import asyncio
import logging
import os
import sys
import signal
import threading
import time
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/unified_startup.log', mode='a')
    ]
)

logger = logging.getLogger(__name__)


class UnifiedService:
    """Unified —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    
    def __init__(self):
        self.bot_task = None
        self.admin_task = None
        self.running = False
        self.executor = ThreadPoolExecutor(max_workers=2)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path("logs").mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        self.running = False
    
    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            from database.production_manager import init_production_database, db_manager
            from database.db_adapter import set_database
            
            await init_production_database()
            set_database(db_manager)
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            return False
    
    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            from aiogram.fsm.storage.memory import MemoryStorage
            
            from config import BOT_TOKEN
            from bot.middlewares.database import DatabaseMiddleware
            from bot.middlewares.role_middleware import RoleMiddleware
            from bot.handlers import basic, channels, subscription, admin, reply_menu
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            bot = Bot(
                token=BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            dp = Dispatcher(storage=MemoryStorage())
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
            dp.message.middleware(DatabaseMiddleware())
            dp.callback_query.middleware(DatabaseMiddleware())
            dp.message.middleware(RoleMiddleware())
            dp.callback_query.middleware(RoleMiddleware())
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            basic.register_handlers(dp)
            channels.register_handlers(dp)
            subscription.register_handlers(dp)
            admin.register_handlers(dp)
            reply_menu.register_handlers(dp)
            
            logger.info("‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await dp.start_polling(bot)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise
    
    def start_admin_panel(self):
        """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            logger.info("üåê –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            import subprocess
            import sys
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–∞–∫ subprocess
            process = subprocess.Popen(
                [sys.executable, "run_admin.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            logger.info("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å
            while self.running:
                if process.poll() is not None:
                    logger.error("‚ùå –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å")
                    break
                time.sleep(5)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if process.poll() is None:
                process.terminate()
                process.wait(timeout=10)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            raise
    
    async def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
                from database.production_manager import db_manager
                db_health = await db_manager.health_check()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                try:
                    import requests
                    admin_response = requests.get('http://localhost:8080/api/health', timeout=5)
                    admin_healthy = admin_response.status_code == 200
                except:
                    admin_healthy = False
                
                if db_health.get('status') == 'healthy' and admin_healthy:
                    logger.debug("üíö –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–¥–æ—Ä–æ–≤—ã")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º: –ë–î={db_health.get('status')}, –ê–¥–º–∏–Ω={admin_healthy}")
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
                await asyncio.sleep(60)
    
    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ unified —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Unified Telegram Channel Finder Bot Service")
        logger.info(f"üåç Environment: {os.getenv('ENVIRONMENT', 'unknown')}")
        logger.info(f"üìç Database: {os.getenv('DATABASE_URL', 'unknown')[:50]}...")
        
        self.running = True
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not await self.init_database():
            logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            sys.exit(1)
        
        # 2. –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        admin_thread = threading.Thread(target=self.start_admin_panel, daemon=True)
        admin_thread.start()
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        await asyncio.sleep(5)
        
        # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = []
        
        # Telegram –±–æ—Ç
        self.bot_task = asyncio.create_task(self.start_telegram_bot())
        tasks.append(self.bot_task)
        
        # Health check
        health_task = asyncio.create_task(self.health_check())
        tasks.append(health_task)
        
        logger.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        logger.info("üì± Telegram –±–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω")
        logger.info("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:8080")
        
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã unified —Å–µ—Ä–≤–∏—Å–∞...")
            self.running = False
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏
            for task in tasks:
                if not task.done():
                    task.cancel()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await asyncio.gather(*tasks, return_exceptions=True)
            
            logger.info("‚úÖ Unified —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    service = UnifiedService()
    await service.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
