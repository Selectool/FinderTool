#!/usr/bin/env python3
"""
Production-Ready Unified Startup Script –¥–ª—è Telegram Channel Finder Bot
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ Telegram –±–æ—Ç–∞, –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è production deployment
"""

import asyncio
import logging
import os
import sys
import signal
import threading
import time
import subprocess
import traceback
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
from typing import Optional, Dict, Any
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ü–ï–†–ï–î –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
required_dirs = [
    'logs',
    'data',
    'database/backups',
    'uploads/broadcasts',
    'temp'
]

for dir_path in required_dirs:
    Path(dir_path).mkdir(parents=True, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def setup_logging():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        root_logger = logging.getLogger()
        root_logger.setLevel(logging.INFO)

        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        root_logger.addHandler(console_handler)

        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        try:
            from logging.handlers import RotatingFileHandler
            file_handler = RotatingFileHandler(
                'logs/unified_startup.log',
                maxBytes=10*1024*1024,  # 10MB
                backupCount=5,
                encoding='utf-8'
            )
            file_handler.setFormatter(formatter)
            root_logger.addHandler(file_handler)
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–æ—Ç–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            file_handler = logging.FileHandler(
                'logs/unified_startup.log',
                mode='a',
                encoding='utf-8'
            )
            file_handler.setFormatter(formatter)
            root_logger.addHandler(file_handler)

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", file=sys.stderr)
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()
logger = logging.getLogger(__name__)


class UnifiedService:
    """Production-ready unified —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""

    def __init__(self):
        self.bot_task: Optional[asyncio.Task] = None
        self.admin_process: Optional[subprocess.Popen] = None
        self.running = False
        self.executor = ThreadPoolExecutor(max_workers=4)
        self.startup_time = datetime.now()
        self.health_stats = {
            'database': {'status': 'unknown', 'last_check': None},
            'admin_panel': {'status': 'unknown', 'last_check': None},
            'telegram_bot': {'status': 'unknown', 'last_check': None}
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedService...")

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        self.running = False
    
    async def discover_database_host(self) -> Optional[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        # –í–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ö–æ—Å—Ç–æ–≤ PostgreSQL –≤ Dokploy (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        possible_hosts = [
            'findertool-hyvrte',  # –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ú–Ø –∏–∑ Dokploy Internal Host
            '185.207.66.201',     # –í–ù–ï–®–ù–ò–ô IP VPS
            'findertool-db',      # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è
            'postgres',
            'postgresql',
            'db',
            'database',
            'localhost',
            '127.0.0.1',
            'postgres-inGABWIP0OB6grXZXTORS',  # –ü–æ ID —Å–µ—Ä–≤–∏—Å–∞
            'findertool-postgres',
            'postgres-service'
        ]

        import socket
        from urllib.parse import urlparse
        from config import DATABASE_URL

        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–π URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            parsed = urlparse(DATABASE_URL)
            username = parsed.username or 'findertool_user'
            password = parsed.password or 'Findertool1999!'
            database = parsed.path[1:] if parsed.path else 'findertool_prod'
            port = parsed.port or 5432
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ DATABASE_URL: {e}")
            return None

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ—Å—Ç
        for host in possible_hosts:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS —Ä–µ–∑–æ–ª—é—Ü–∏—é
                socket.gethostbyname(host)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ä—Ç—É
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(3)
                result = sock.connect_ex((host, port))
                sock.close()

                if result == 0:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    test_url = f"postgresql://{username}:{password}@{host}:{port}/{database}"
                    try:
                        import psycopg2
                        conn = psycopg2.connect(test_url)
                        conn.close()
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —Ö–æ—Å—Ç: {host}")
                        return test_url
                    except Exception as e:
                        logger.debug(f"‚ùå PostgreSQL –æ—à–∏–±–∫–∞ –¥–ª—è {host}: {e}")

            except Exception as e:
                logger.debug(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {host}: {e}")

        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —Ö–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return None

    async def wait_for_database(self, max_retries: int = 30) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º —Ö–æ—Å—Ç–∞"""
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        from config import DATABASE_URL
        original_url = DATABASE_URL

        for attempt in range(max_retries):
            try:
                import psycopg2

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º URL
                conn = psycopg2.connect(DATABASE_URL)
                conn.close()
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
                return True

            except Exception as e:
                error_msg = str(e)

                # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ DNS —Ä–µ–∑–æ–ª—é—Ü–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ—Å—Ç
                if "could not translate host name" in error_msg or "Name or service not known" in error_msg:
                    if attempt == 0:  # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
                        logger.warning(f"üîç DNS –æ—à–∏–±–∫–∞, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ö–æ—Å—Ç: {error_msg}")
                        discovered_url = await self.discover_database_host()

                        if discovered_url:
                            # –û–±–Ω–æ–≤–ª—è–µ–º DATABASE_URL –≤ config
                            import config
                            config.DATABASE_URL = discovered_url
                            logger.info(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω DATABASE_URL –Ω–∞: {discovered_url[:50]}...")
                            continue

                if attempt < max_retries - 1:
                    logger.warning(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {error_msg}")
                    await asyncio.sleep(2)
                else:
                    logger.error(f"‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {error_msg}")

                    # –í –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    logger.error("üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ database_connection_test.py –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
                    return False

        return False

    async def apply_migrations(self) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å production_manager
            try:
                from database.production_manager import apply_all_migrations
                await apply_all_migrations()
                logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ production_manager")
                return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ production_manager: {e}")

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ manage_migrations.py
            try:
                logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...")
                result = subprocess.run([
                    sys.executable, "manage_migrations.py", "--apply-all"
                ], capture_output=True, text=True, timeout=120)

                if result.returncode == 0:
                    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ manage_migrations.py")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {result.stderr}")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")

            # –ï—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö
            logger.warning("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
            return True

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False

    async def init_database(self):
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üîÑ –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

            # 1. –û–∂–∏–¥–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
            if not await self.wait_for_database():
                logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False

            # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            if not await self.apply_migrations():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
                return False

            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            from database.production_manager import init_production_database, db_manager
            from database.db_adapter import set_database

            await init_production_database()
            set_database(db_manager)

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ë–î
            health = await db_manager.health_check()
            if health.get('status') == 'healthy':
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞")
                self.health_stats['database'] = {
                    'status': 'healthy',
                    'last_check': datetime.now()
                }
                return True
            else:
                logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ë–î: {health}")
                self.health_stats['database'] = {
                    'status': 'unhealthy',
                    'last_check': datetime.now()
                }
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            self.health_stats['database'] = {
                'status': 'error',
                'last_check': datetime.now()
            }
            return False
    
    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            from config import BOT_TOKEN
            if not BOT_TOKEN:
                raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            from aiogram.fsm.storage.memory import MemoryStorage

            from bot.middlewares.database import DatabaseMiddleware
            from bot.middlewares.role_middleware import RoleMiddleware
            from bot.handlers import basic, channels, subscription, admin, reply_menu

            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            bot = Bot(
                token=BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            try:
                bot_info = await bot.get_me()
                logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {e}")
                raise

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            dp = Dispatcher(storage=MemoryStorage())

            # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from database.universal_database import UniversalDatabase
            from config import DATABASE_URL
            db = UniversalDatabase(DATABASE_URL)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
            dp.message.middleware(DatabaseMiddleware(db))
            dp.callback_query.middleware(DatabaseMiddleware(db))
            dp.message.middleware(RoleMiddleware())
            dp.callback_query.middleware(RoleMiddleware())

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            basic.register_handlers(dp)
            channels.register_handlers(dp)
            subscription.register_handlers(dp)
            admin.register_handlers(dp)
            reply_menu.register_handlers(dp)

            logger.info("‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.health_stats['telegram_bot'] = {
                'status': 'healthy',
                'last_check': datetime.now()
            }

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                await dp.start_polling(bot, skip_updates=True)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
                self.health_stats['telegram_bot'] = {
                    'status': 'error',
                    'last_check': datetime.now()
                }
                raise

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            self.health_stats['telegram_bot'] = {
                'status': 'error',
                'last_check': datetime.now()
            }
            raise
    
    def start_admin_panel(self):
        """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
        try:
            logger.info("üåê –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")

            restart_count = 0
            max_restarts = 5

            while self.running and restart_count < max_restarts:
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–∞–∫ subprocess
                    self.admin_process = subprocess.Popen(
                        [sys.executable, "run_admin.py"],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        cwd=os.getcwd()
                    )

                    logger.info(f"‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ (PID: {self.admin_process.pid})")
                    self.health_stats['admin_panel'] = {
                        'status': 'healthy',
                        'last_check': datetime.now()
                    }

                    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å
                    while self.running:
                        if self.admin_process.poll() is not None:
                            # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                            stdout, stderr = self.admin_process.communicate()

                            if stderr:
                                logger.error(f"‚ùå –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {stderr}")
                            else:
                                logger.warning("‚ö†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")

                            self.health_stats['admin_panel'] = {
                                'status': 'unhealthy',
                                'last_check': datetime.now()
                            }

                            if self.running:
                                restart_count += 1
                                logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ({restart_count}/{max_restarts})")
                                time.sleep(5)
                                break
                            else:
                                return

                        time.sleep(10)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
                    restart_count += 1
                    if restart_count < max_restarts:
                        time.sleep(10)

            if restart_count >= max_restarts:
                logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ({max_restarts})")
                self.health_stats['admin_panel'] = {
                    'status': 'failed',
                    'last_check': datetime.now()
                }

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            self.health_stats['admin_panel'] = {
                'status': 'error',
                'last_check': datetime.now()
            }
    
    async def health_check(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üíö –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è")

        while self.running:
            try:
                current_time = datetime.now()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
                try:
                    from database.production_manager import db_manager
                    db_health = await db_manager.health_check()
                    self.health_stats['database'] = {
                        'status': db_health.get('status', 'unknown'),
                        'last_check': current_time,
                        'details': db_health
                    }
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
                    self.health_stats['database'] = {
                        'status': 'error',
                        'last_check': current_time,
                        'error': str(e)
                    }

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                admin_healthy = False
                admin_details = {}

                if self.admin_process and self.admin_process.poll() is None:
                    try:
                        import requests
                        admin_response = requests.get(
                            'http://localhost:8080/api/health',
                            timeout=5
                        )
                        admin_healthy = admin_response.status_code == 200
                        if admin_healthy:
                            admin_details = admin_response.json() if admin_response.content else {}
                    except Exception as e:
                        logger.debug(f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                        admin_details = {'error': str(e)}

                self.health_stats['admin_panel'] = {
                    'status': 'healthy' if admin_healthy else 'unhealthy',
                    'last_check': current_time,
                    'process_running': self.admin_process and self.admin_process.poll() is None,
                    'details': admin_details
                }

                # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
                all_healthy = (
                    self.health_stats['database']['status'] == 'healthy' and
                    self.health_stats['admin_panel']['status'] == 'healthy' and
                    self.health_stats['telegram_bot']['status'] == 'healthy'
                )

                if all_healthy:
                    logger.debug("üíö –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–¥–æ—Ä–æ–≤—ã")
                else:
                    status_summary = {
                        '–ë–î': self.health_stats['database']['status'],
                        '–ê–¥–º–∏–Ω': self.health_stats['admin_panel']['status'],
                        '–ë–æ—Ç': self.health_stats['telegram_bot']['status']
                    }
                    logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤: {status_summary}")

                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                if current_time.minute % 10 == 0:
                    uptime = current_time - self.startup_time
                    logger.info(f"üìä Uptime: {uptime}, –°—Ç–∞—Ç—É—Å: {status_summary}")

                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
                logger.error(f"Traceback: {traceback.format_exc()}")
                await asyncio.sleep(60)
    
    async def backup_data(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üíæ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

        while self.running:
            try:
                # –ñ–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –±—ç–∫–∞–ø–æ–º
                await asyncio.sleep(3600)

                if not self.running:
                    break

                logger.info("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")

                # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ë–î
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_file = f"database/backups/backup_{timestamp}.sql"

                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pg_dump –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
                    database_url = os.getenv('DATABASE_URL')
                    if database_url:
                        result = subprocess.run([
                            "pg_dump", database_url, "-f", backup_file
                        ], capture_output=True, text=True, timeout=300)

                        if result.returncode == 0:
                            logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")

                            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
                            backup_dir = Path("database/backups")
                            backups = sorted(backup_dir.glob("backup_*.sql"))
                            if len(backups) > 10:
                                for old_backup in backups[:-10]:
                                    old_backup.unlink()
                                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old_backup.name}")
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {result.stderr}")
                    else:
                        logger.warning("‚ö†Ô∏è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ backup_data: {e}")
                await asyncio.sleep(3600)

    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ production-ready unified —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Production-Ready Unified Telegram Channel Finder Bot Service")
        logger.info(f"üåç Environment: {os.getenv('ENVIRONMENT', 'production')}")
        logger.info(f"üìç Database: {os.getenv('DATABASE_URL', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')[:50]}...")
        logger.info(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.startup_time}")

        self.running = True

        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
            logger.info("üìä –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            if not await self.init_database():
                logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                sys.exit(1)

            # 2. –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            logger.info("üåê –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
            admin_thread = threading.Thread(target=self.start_admin_panel, daemon=True)
            admin_thread.start()

            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            await asyncio.sleep(10)

            # 3. –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            logger.info("ü§ñ –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
            tasks = []

            # Telegram –±–æ—Ç
            self.bot_task = asyncio.create_task(self.start_telegram_bot())
            tasks.append(self.bot_task)

            # Health check
            health_task = asyncio.create_task(self.health_check())
            tasks.append(health_task)

            # Backup task
            backup_task = asyncio.create_task(self.backup_data())
            tasks.append(backup_task)

            logger.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!")
            logger.info("üì± Telegram –±–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω")
            logger.info("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:8080")
            logger.info("üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã: –í–∫–ª—é—á–µ–Ω—ã")
            logger.info("üíö –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è: –ê–∫—Ç–∏–≤–µ–Ω")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)

        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main loop: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
        finally:
            await self._graceful_shutdown(tasks if 'tasks' in locals() else [])

    async def _graceful_shutdown(self, tasks):
        """Graceful shutdown –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        self.running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        if self.admin_process and self.admin_process.poll() is None:
            logger.info("üåê –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
            self.admin_process.terminate()
            try:
                self.admin_process.wait(timeout=15)
                logger.info("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except subprocess.TimeoutExpired:
                logger.warning("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
                self.admin_process.kill()
                self.admin_process.wait()

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        if tasks:
            logger.info("ü§ñ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
            for task in tasks:
                if not task.done():
                    task.cancel()

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                await asyncio.wait_for(
                    asyncio.gather(*tasks, return_exceptions=True),
                    timeout=30
                )
                logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
        if self.executor:
            self.executor.shutdown(wait=True)
            logger.info("‚úÖ ThreadPoolExecutor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        uptime = datetime.now() - self.startup_time
        logger.info(f"‚úÖ Unified —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        service = UnifiedService()
        await service.run()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise


def run_with_error_handling():
    """–ó–∞–ø—É—Å–∫ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
        if sys.version_info < (3, 8):
            logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
            sys.exit(1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_env_vars = ['BOT_TOKEN', 'DATABASE_URL']
        missing_vars = [var for var in required_env_vars if not os.getenv(var)]

        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
            sys.exit(1)

        logger.info("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        asyncio.run(main())

    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except SystemExit:
        raise
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        sys.exit(1)


if __name__ == "__main__":
    run_with_error_handling()
