#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞—Å—Å—ã–ª–æ–∫
"""
import asyncio
import os
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from database.universal_database import UniversalDatabase
from database.production_manager import db_manager
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PostgreSQLDataFixer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    
    def __init__(self):
        self.db = UniversalDatabase()
        
    async def fix_all_data(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
            await self.db.adapter.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
            await self.check_and_fix_tables()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.check_users_data()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–æ–∫
            await self.check_broadcasts_data()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π
            await self.check_payments_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.update_statistics()
            
            await self.db.adapter.disconnect()
            logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            traceback.print_exc()
            
    async def check_and_fix_tables(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü"""
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
        users_exists = await self.db.adapter.fetch_one("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'users'
            )
        """)
        
        if users_exists and users_exists.get('exists'):
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É broadcasts
        broadcasts_exists = await self.db.adapter.fetch_one("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'broadcasts'
            )
        """)
        
        if broadcasts_exists and broadcasts_exists.get('exists'):
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ broadcasts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ broadcasts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    async def check_users_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("üë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = await self.db.get_users_count()
        logger.info(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers_count = await self.db.get_subscribers_count()
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}")

        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await self.db.adapter.connect()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        sample_user = await self.db.adapter.fetch_one("""
            SELECT user_id, username, is_subscribed, subscription_active, created_at
            FROM users
            LIMIT 1
        """)

        if sample_user:
            logger.info(f"–ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {dict(sample_user)}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä user_id
            user_id = sample_user.get('user_id')
            if user_id and user_id > 2147483647:  # int32 max
                logger.warning(f"‚ö†Ô∏è user_id {user_id} –ø—Ä–µ–≤—ã—à–∞–µ—Ç int32 –ª–∏–º–∏—Ç PostgreSQL!")
        else:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    async def check_broadcasts_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        logger.info("üì¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–æ–∫...")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcasts_result = await self.db.adapter.fetch_one("SELECT COUNT(*) FROM broadcasts")
        broadcasts_count = self.db._extract_count(broadcasts_result)
        logger.info(f"–í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {broadcasts_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ä–∞—Å—Å—ã–ª–æ–∫
        status_stats = await self.db.adapter.fetch_all("""
            SELECT status, COUNT(*) as count
            FROM broadcasts 
            GROUP BY status
        """)
        
        if status_stats:
            logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Ä–∞—Å—Å—ã–ª–æ–∫:")
            for stat in status_stats:
                logger.info(f"  {stat['status']}: {stat['count']}")
        else:
            logger.info("üìù –†–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
            
    async def check_payments_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π"""
        logger.info("üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π...")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
        payments_result = await self.db.adapter.fetch_one("SELECT COUNT(*) FROM payments")
        payments_count = self.db._extract_count(payments_result)
        logger.info(f"–í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {payments_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π
        payment_stats = await self.db.adapter.fetch_all("""
            SELECT status, COUNT(*) as count
            FROM payments 
            GROUP BY status
        """)
        
        if payment_stats:
            logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ø–ª–∞—Ç–µ–∂–µ–π:")
            for stat in payment_stats:
                logger.info(f"  {stat['status']}: {stat['count']}")
                
    async def update_statistics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        logger.info("üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.db.get_stats()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = await self.db.get_users_paginated(page=1, per_page=5)
        logger.info(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –≤—Å–µ–≥–æ {users_data['total']}, –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {len(users_data['users'])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫
        broadcasts_data = await self.db.get_broadcasts_paginated(page=1, per_page=5)
        logger.info(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫: –≤—Å–µ–≥–æ {broadcasts_data['total']}, –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {len(broadcasts_data['broadcasts'])}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• POSTGRESQL")
    print("=" * 50)
    
    fixer = PostgreSQLDataFixer()
    await fixer.fix_all_data()
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    print("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:")
    print("1. python main.py")
    print("2. python run_admin.py")

if __name__ == "__main__":
    asyncio.run(main())
