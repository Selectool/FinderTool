#!/usr/bin/env python3
"""
Dokploy Production Launcher
–ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ + FastAPI –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Railpack/Dokploy deployment
"""

import asyncio
import logging
import os
import signal
import sys
import time
from concurrent.futures import ThreadPoolExecutor
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class DokployLauncher:
    """Launcher –¥–ª—è Dokploy —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –µ–¥–∏–Ω–æ–≥–æ –∏ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    
    def __init__(self):
        self.running = True
        self.bot_process = None
        self.admin_process = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self._check_environment()
    
    def _check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = ['BOT_TOKEN']
        missing_vars = []
        
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            sys.exit(1)
        
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        logger.info(f"  - BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('BOT_TOKEN') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        logger.info(f"  - DATABASE_URL: {'‚úÖ PostgreSQL' if os.getenv('DATABASE_URL') else '‚ö†Ô∏è SQLite'}")
        logger.info(f"  - ADMIN_HOST: {os.getenv('ADMIN_HOST', '0.0.0.0')}")
        logger.info(f"  - ADMIN_PORT: {os.getenv('ADMIN_PORT', '8080')}")
        logger.info(f"  - ENVIRONMENT: {os.getenv('ENVIRONMENT', 'development')}")
    
    def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º main.py
            import main
            asyncio.run(main.main())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {e}")
            self.running = False
    
    def start_admin_panel(self):
        """–ó–∞–ø—É—Å–∫ FastAPI –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            logger.info("üåê –ó–∞–ø—É—Å–∫ FastAPI –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º run_admin.py
            import run_admin
            run_admin.main()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            self.running = False
    
    def start_unified_app(self):
        """–ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è app.py"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            if os.path.exists('app.py'):
                # –ó–∞–ø—É—Å–∫–∞–µ–º app.py –Ω–∞–ø—Ä—è–º—É—é
                import uvicorn
                
                host = os.getenv('ADMIN_HOST', '0.0.0.0')
                port = int(os.getenv('ADMIN_PORT', 8080))
                
                logger.info(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞ {host}:{port}")
                
                uvicorn.run(
                    "app:app",
                    host=host,
                    port=port,
                    reload=False,
                    access_log=True,
                    log_level="info"
                )
            else:
                logger.warning("‚ö†Ô∏è app.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
                self.start_separate_processes()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –µ–¥–∏–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
            self.start_separate_processes()
    
    def start_separate_processes(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ main.py + run_admin.py"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        try:
            with ThreadPoolExecutor(max_workers=2) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
                logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
                bot_future = executor.submit(self.start_telegram_bot)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                time.sleep(3)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                logger.info("üåê –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
                admin_future = executor.submit(self.start_admin_panel)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–≥–æ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                while self.running:
                    if bot_future.done():
                        if bot_future.exception():
                            logger.error(f"‚ùå Telegram –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {bot_future.exception()}")
                        else:
                            logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                        break
                    
                    if admin_future.done():
                        if admin_future.exception():
                            logger.error(f"‚ùå –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {admin_future.exception()}")
                        else:
                            logger.info("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
                        break
                    
                    time.sleep(1)
                    
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            self.running = False
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False
        sys.exit(0)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        logger.info("=" * 60)
        logger.info("üöÄ DOKPLOY LAUNCHER - Telegram Channel Finder Bot")
        logger.info("üèóÔ∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railpack/Dokploy")
        logger.info("üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL")
        logger.info("=" * 60)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGTERM, self.signal_handler)
        signal.signal(signal.SIGINT, self.signal_handler)
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
            launch_mode = os.getenv('LAUNCH_MODE', 'unified')
            
            logger.info(f"üéØ –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {launch_mode}")
            
            if launch_mode == 'unified':
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–¥–∏–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                self.start_unified_app()
            elif launch_mode == 'separate':
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                self.start_separate_processes()
            else:
                # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –µ–¥–∏–Ω–æ–µ, –ø–æ—Ç–æ–º —Ä–∞–∑–¥–µ–ª—å–Ω–æ–µ
                self.start_unified_app()
                
        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            sys.exit(1)
        finally:
            logger.info("‚úÖ Dokploy launcher –∑–∞–≤–µ—Ä—à–µ–Ω")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {os.getenv('ENVIRONMENT', 'production')}")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º launcher
    launcher = DokployLauncher()
    launcher.run()

if __name__ == "__main__":
    main()
