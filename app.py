#!/usr/bin/env python3
"""
Production-Ready Telegram Channel Finder Bot
–ï–¥–∏–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è Telegram –±–æ—Ç–∞ + FastAPI –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Railpack –∏ Dokploy –¥–µ–ø–ª–æ—è
"""

import asyncio
import logging
import os
import signal
import sys
import time
from contextlib import asynccontextmanager
from typing import Optional

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å fallback
try:
    import uvicorn
    from fastapi import FastAPI, Request, HTTPException
    from fastapi.middleware.cors import CORSMiddleware
    from fastapi.middleware.trustedhost import TrustedHostMiddleware
    from fastapi.staticfiles import StaticFiles
    from fastapi.templating import Jinja2Templates
    FASTAPI_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    FASTAPI_AVAILABLE = False

try:
    from aiogram import Bot, Dispatcher
    from aiogram.client.default import DefaultBotProperties
    from aiogram.enums import ParseMode
    from aiogram.fsm.storage.memory import MemoryStorage
    AIOGRAM_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Aiogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    AIOGRAM_AVAILABLE = False

# Project imports —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
try:
    from config import (
        BOT_TOKEN, DATABASE_URL, ENVIRONMENT,
        ADMIN_HOST, ADMIN_PORT, SECRET_KEY
    )
except ImportError:
    # Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    DATABASE_URL = os.getenv('DATABASE_URL')
    ENVIRONMENT = os.getenv('ENVIRONMENT', 'production')
    ADMIN_HOST = os.getenv('ADMIN_HOST', '0.0.0.0')
    ADMIN_PORT = int(os.getenv('ADMIN_PORT', 8080))
    SECRET_KEY = os.getenv('SECRET_KEY', 'default-secret-key')

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from database.models import Database
    from database.production_db_manager import ProductionDatabaseManager
    from bot.handlers.register import register_handlers
    from bot.middlewares.auth import AuthMiddleware
    from bot.middlewares.throttling import ThrottlingMiddleware
    from services.payment_cleanup import PaymentCleanupService
    from utils.logging_config import setup_production_logging
    logger = setup_production_logging()
except ImportError as e:
    # Fallback –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    logger.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤
    class ProductionDatabaseManager:
        async def verify_connection(self): return True
        async def run_safe_migrations(self): pass
        async def optimize_for_production(self): pass

class ProductionApp:
    """Production-ready –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å fallback —Ä–µ–∂–∏–º–∞–º–∏"""

    def __init__(self):
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.db: Optional[Database] = None
        self.cleanup_service: Optional[PaymentCleanupService] = None
        self.bot_task: Optional[asyncio.Task] = None
        self.cleanup_task: Optional[asyncio.Task] = None
        self.running = False
        
        # FastAPI app –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ lifespan
        self.fastapi_app: Optional[FastAPI] = None

    async def initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # Production database manager
            db_manager = ProductionDatabaseManager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
            await db_manager.verify_connection()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ (–±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö)
            await db_manager.run_safe_migrations()
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Database –æ–±—ä–µ–∫—Ç
            self.db = Database()
            await self.db.create_tables_if_not_exist()
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è production
            await db_manager.optimize_for_production()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    async def initialize_telegram_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        if not AIOGRAM_AVAILABLE:
            logger.warning("‚ö†Ô∏è Aiogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –±–æ—Ç–∞")
            return

        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")

        try:
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            self.bot = Bot(
                token=BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            self.dp = Dispatcher(storage=MemoryStorage())

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            try:
                self.dp.message.middleware(AuthMiddleware())
                self.dp.callback_query.middleware(AuthMiddleware())
                self.dp.message.middleware(ThrottlingMiddleware())
                self.dp.callback_query.middleware(ThrottlingMiddleware())
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Middleware –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            try:
                register_handlers(self.dp)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{bot_info.username}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            self.bot = None

    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ background task"""
        if not self.bot or not self.dp:
            logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫")
            return

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ Telegram –±–æ—Ç–∞: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    async def initialize_cleanup_service(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        logger.info("üßπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π...")
        
        try:
            self.cleanup_service = PaymentCleanupService(self.db)
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            raise

    async def start_cleanup_service(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ background"""
        if self.cleanup_service:
            try:
                await self.cleanup_service.start_cleanup_scheduler()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –æ—á–∏—Å—Ç–∫–∏: {e}")

    async def startup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Production –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        logger.info(f"üìç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {ENVIRONMENT}")
        logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.initialize_database()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
            await self.initialize_telegram_bot()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏
            await self.initialize_cleanup_service()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º background –∑–∞–¥–∞—á–∏
            self.bot_task = asyncio.create_task(self.start_telegram_bot())
            self.cleanup_task = asyncio.create_task(self.start_cleanup_service())
            
            self.running = True
            
            logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"ü§ñ Telegram –±–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω")
            logger.info(f"üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://{ADMIN_HOST}:{ADMIN_PORT}")
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π: –ê–∫—Ç–∏–≤–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            await self.shutdown()
            raise

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º background –∑–∞–¥–∞—á–∏
        if self.bot_task and not self.bot_task.done():
            self.bot_task.cancel()
            try:
                await self.bot_task
            except asyncio.CancelledError:
                pass
        
        if self.cleanup_task and not self.cleanup_task.done():
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Telegram –±–æ—Ç–∞
        if self.bot:
            await self.bot.session.close()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏
        if self.cleanup_service:
            self.cleanup_service.stop_cleanup_scheduler()
        
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_instance = ProductionApp()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    await app_instance.startup()
    
    yield
    
    # Shutdown
    await app_instance.shutdown()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
if FASTAPI_AVAILABLE:
    app = FastAPI(
        title="Telegram Channel Finder Bot Admin Panel",
        description="Production-ready –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è Telegram –±–æ—Ç–∞",
        version="1.0.0",
        lifespan=lifespan
    )

    # Security middleware
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=["*"] if ENVIRONMENT == "development" else [ADMIN_HOST, "localhost"]
    )

    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"] if ENVIRONMENT == "development" else [f"http://{ADMIN_HOST}:{ADMIN_PORT}"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ —à–∞–±–ª–æ–Ω—ã
    try:
        app.mount("/static", StaticFiles(directory="admin/static"), name="static")
        templates = Jinja2Templates(directory="admin/templates")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã/—à–∞–±–ª–æ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        templates = None
else:
    logger.error("‚ùå FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º fallback —Ä–µ–∂–∏–º")
    app = None
    templates = None

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–µ—Å–ª–∏ FastAPI –¥–æ—Å—Ç—É–ø–µ–Ω)
if FASTAPI_AVAILABLE and app is not None:
    try:
        from admin.api import (
            auth, users, statistics, broadcasts,
            templates as template_routes, roles,
            audit, yookassa_webhook, payment_cleanup
        )
        from admin.web import (
            auth as web_auth, dashboard,
            users as web_users, broadcasts as web_broadcasts,
            payment_cleanup as web_payment_cleanup
        )

        # API —Ä–æ—É—Ç–µ—Ä—ã
        app.include_router(auth.router, prefix="/api/auth", tags=["auth"])
        app.include_router(users.router, prefix="/api/users", tags=["users"])
        app.include_router(broadcasts.router, prefix="/api/broadcasts", tags=["broadcasts"])
        app.include_router(statistics.router, prefix="/api/statistics", tags=["statistics"])
        app.include_router(template_routes.router, prefix="/api/templates", tags=["templates"])
        app.include_router(roles.router, prefix="/api/roles", tags=["roles"])
        app.include_router(audit.router, prefix="/api/audit", tags=["audit"])
        app.include_router(yookassa_webhook.router, prefix="/api", tags=["yookassa-webhook"])
        app.include_router(payment_cleanup.router, tags=["payment-cleanup"])

        # Web —Ä–æ—É—Ç–µ—Ä—ã
        app.include_router(web_auth.router, prefix="/auth", tags=["web-auth"])
        app.include_router(dashboard.router, prefix="/dashboard", tags=["web-dashboard"])
        app.include_router(web_users.router, prefix="/users", tags=["web-users"])
        app.include_router(web_broadcasts.router, prefix="/broadcasts", tags=["web-broadcasts"])
        app.include_router(web_payment_cleanup.router, prefix="/admin", tags=["web-payment-cleanup"])

        logger.info("‚úÖ –†–æ—É—Ç–µ—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
else:
    logger.warning("‚ö†Ô∏è FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–æ—É—Ç–µ—Ä—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

# Health check endpoint –¥–ª—è Railpack/Dokploy (–µ—Å–ª–∏ FastAPI –¥–æ—Å—Ç—É–ø–µ–Ω)
if FASTAPI_AVAILABLE and app is not None:
    @app.get("/health")
    async def health_check():
        """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            health_status = {
                "status": "healthy",
                "timestamp": time.time(),
                "services": {
                    "telegram_bot": app_instance.running and app_instance.bot is not None,
                    "database": app_instance.db is not None,
                    "cleanup_service": app_instance.cleanup_service is not None,
                    "admin_panel": True
                }
            }
        
            # –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º unhealthy
            if not all(health_status["services"].values()):
                health_status["status"] = "unhealthy"
                return health_status, 503

            return health_status

        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return {
                "status": "unhealthy",
                "error": str(e),
                "timestamp": time.time()
            }, 503

    # Metrics endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    @app.get("/metrics")
    async def metrics():
        """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            if not app_instance.db:
                return {"error": "Database not initialized"}, 503

            stats = await app_instance.db.get_bot_stats()

            return {
                "telegram_bot": {
                    "total_users": stats.get("total_users", 0),
                    "active_subscribers": stats.get("active_subscribers", 0),
                    "requests_today": stats.get("requests_today", 0)
                },
                "system": {
                    "uptime": time.time() - (app_instance.startup_time if hasattr(app_instance, 'startup_time') else time.time()),
                    "environment": ENVIRONMENT
                }
            }

        except Exception as e:
            logger.error(f"Metrics failed: {e}")
            return {"error": str(e)}, 503

    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    @app.get("/")
    async def root():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        return {"message": "Telegram Channel Finder Bot API", "admin_panel": "/dashboard"}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["BOT_TOKEN"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        sys.exit(1)

    if FASTAPI_AVAILABLE and app is not None:
        # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Production —Å–µ—Ä–≤–µ—Ä–∞ —Å FastAPI...")

        uvicorn.run(
            "app:app",
            host=ADMIN_HOST,
            port=ADMIN_PORT,
            reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –≤ production
            access_log=ENVIRONMENT == "development",
            log_level="info"
        )
    else:
        # Fallback —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞
        logger.warning("‚ö†Ô∏è FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞...")

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º main.py
            import main
            asyncio.run(main.main())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")

            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∑–∞–ø—É—Å–∫–∞–µ–º dokploy_launcher
            try:
                logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ dokploy_launcher...")
                import dokploy_launcher
                dokploy_launcher.main()
            except Exception as e2:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e2}")
                sys.exit(1)

if __name__ == "__main__":
    main()
