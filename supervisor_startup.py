#!/usr/bin/env python3
"""
Supervisor-based Startup Script –¥–ª—è Telegram Channel Finder Bot
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç supervisor –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Railpack deployment
"""

import asyncio
import logging
import os
import sys
import subprocess
import time
import signal
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/supervisor_startup.log', mode='a')
    ]
)

logger = logging.getLogger(__name__)


class SupervisorManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ supervisor"""
    
    def __init__(self):
        self.supervisor_process = None
        self.running = False
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path("logs").mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        self.running = False
        if self.supervisor_process:
            self.supervisor_process.terminate()
    
    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            from database.production_manager import init_production_database, db_manager
            from database.db_adapter import set_database
            
            await init_production_database()
            set_database(db_manager)
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            return False
    
    def create_supervisor_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ supervisor"""
        config_content = """
[supervisord]
nodaemon=true
user=app
logfile=/app/logs/supervisord.log
pidfile=/app/logs/supervisord.pid
childlogdir=/app/logs

[program:telegram-bot]
command=python -c "import asyncio; from bot.main import main; asyncio.run(main())"
directory=/app
user=app
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/app/logs/telegram-bot.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=5
environment=PYTHONPATH="/app",PYTHONUNBUFFERED="1"

[program:admin-panel]
command=python run_admin.py
directory=/app
user=app
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/app/logs/admin-panel.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=5
environment=PYTHONPATH="/app",PYTHONUNBUFFERED="1"

[group:findertool]
programs=telegram-bot,admin-panel
priority=999
"""
        
        config_path = Path("/app/supervisord.conf")
        config_path.write_text(config_content.strip())
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è supervisor —Å–æ–∑–¥–∞–Ω–∞")
        return config_path
    
    def start_supervisor(self):
        """–ó–∞–ø—É—Å–∫ supervisor"""
        try:
            config_path = self.create_supervisor_config()
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ supervisor...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º supervisor
            self.supervisor_process = subprocess.Popen(
                ["supervisord", "-c", str(config_path)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            logger.info("‚úÖ Supervisor –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ supervisor: {e}")
            return False
    
    def monitor_services(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å supervisor
                if self.supervisor_process and self.supervisor_process.poll() is not None:
                    logger.error("‚ùå Supervisor –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è")
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
                try:
                    import requests
                    admin_response = requests.get('http://localhost:8080/api/health', timeout=5)
                    admin_healthy = admin_response.status_code == 200
                    
                    if admin_healthy:
                        logger.debug("üíö –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–¥–æ—Ä–æ–≤–∞")
                    else:
                        logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
                
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(30)
    
    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Supervisor-based Telegram Channel Finder Bot Service")
        logger.info(f"üåç Environment: {os.getenv('ENVIRONMENT', 'unknown')}")
        logger.info(f"üìç Database: {os.getenv('DATABASE_URL', 'unknown')[:50]}...")
        
        self.running = True
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not await self.init_database():
            logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            sys.exit(1)
        
        # 2. –ó–∞–ø—É—Å–∫ supervisor
        if not self.start_supervisor():
            logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å supervisor")
            sys.exit(1)
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        await asyncio.sleep(10)
        
        logger.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —á–µ—Ä–µ–∑ supervisor!")
        logger.info("üì± Telegram –±–æ—Ç: –£–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è supervisor")
        logger.info("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:8080")
        logger.info("üìä Supervisor: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
        
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            monitor_thread = threading.Thread(target=self.monitor_services, daemon=True)
            monitor_thread.start()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è supervisor
            while self.running and self.supervisor_process:
                if self.supervisor_process.poll() is not None:
                    logger.error("‚ùå Supervisor –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                    break
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã supervisor —Å–µ—Ä–≤–∏—Å–∞...")
            self.running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º supervisor
            if self.supervisor_process and self.supervisor_process.poll() is None:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ supervisor...")
                self.supervisor_process.terminate()
                
                # –ñ–¥–µ–º graceful shutdown
                try:
                    self.supervisor_process.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    logger.warning("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ supervisor...")
                    self.supervisor_process.kill()
            
            logger.info("‚úÖ Supervisor —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = SupervisorManager()
    await manager.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
