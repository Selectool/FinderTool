"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
"""
import asyncio
import logging
from database.models import Database
from bot.keyboards.reply import ReplyButtons, get_admin_menu_keyboard
from bot.utils.roles import TelegramUserPermissions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_admin_keyboard():
    """–¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
    
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = get_admin_menu_keyboard()
        assert keyboard is not None, "–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
        keyboard_dict = keyboard.model_dump()
        buttons_text = []
        
        for row in keyboard_dict.get('keyboard', []):
            for button in row:
                buttons_text.append(button.get('text', ''))
        
        expected_buttons = [
            ReplyButtons.STATISTICS,
            ReplyButtons.PAYMENTS,
            ReplyButtons.BROADCAST,
            ReplyButtons.USERS,
            ReplyButtons.MAIN_MENU
        ]
        
        for expected_button in expected_buttons:
            assert expected_button in buttons_text, f"–ö–Ω–æ–ø–∫–∞ '{expected_button}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"
        
        print("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: OK")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {len(buttons_text)}")
        print(f"   –ö–Ω–æ–ø–∫–∏: {', '.join(buttons_text)}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {e}")
        return False


async def test_role_permissions():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        test_cases = [
            (5699315855, "developer", True),  # –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
            (7610418399, "senior_admin", True),  # –°—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω
            (792247608, "admin", True),  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            (123456789, "user", False),  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ]
        
        for user_id, expected_role, should_have_access in test_cases:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
            actual_role = TelegramUserPermissions.get_user_role(user_id)
            assert actual_role == expected_role, f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –¥–ª—è {user_id}: {actual_role} != {expected_role}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            has_access = TelegramUserPermissions.has_admin_access(user_id, actual_role)
            assert has_access == should_have_access, f"–ù–µ–≤–µ—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}: {has_access} != {should_have_access}"
            
            print(f"   ‚úÖ {user_id}: —Ä–æ–ª—å={actual_role}, –¥–æ—Å—Ç—É–ø={has_access}")
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: OK")
        return True
        
    except Exception as e:
        print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
        return False


async def test_database_stats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    try:
        db = Database()
        await db.init_db()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['total_users', 'active_subscribers', 'requests_today']
        for field in required_fields:
            assert field in stats, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
            assert isinstance(stats[field], int), f"–ü–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: OK")
        print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['requests_today']}")
        return True
        
    except Exception as e:
        print(f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def test_payment_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    try:
        from services.payment_service import create_payment_service
        from config import YOOKASSA_PROVIDER_TOKEN, YOOKASSA_CURRENCY, YOOKASSA_PROVIDER_DATA
        from database.models import Database
        
        db = Database()
        await db.init_db()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π
        payment_service = create_payment_service(
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency=YOOKASSA_CURRENCY,
            provider_data=YOOKASSA_PROVIDER_DATA,
            db=db
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
        mode = "LIVE" if not payment_service.is_test_mode else "TEST"
        print(f"   –†–µ–∂–∏–º –ÆKassa: {mode}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        stats = await payment_service.get_payment_statistics()
        
        if stats:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            required_periods = ['today', 'week', 'total']
            for period in required_periods:
                assert period in stats, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–∏–æ–¥ '{period}' –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π"
                
                period_stats = stats[period]
                required_fields = ['count', 'successful', 'amount']
                for field in required_fields:
                    assert field in period_stats, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∑–∞ {period}"
            
            print("‚úÖ –°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π: OK")
            print(f"   –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {stats['total']['count']}")
            print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats['total']['successful']}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: {stats['total']['amount'] // 100} ‚ÇΩ")
        else:
            print("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return False


async def test_reply_buttons_constants():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç Reply –∫–Ω–æ–ø–æ–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç Reply –∫–Ω–æ–ø–æ–∫...")
    
    try:
        from bot.keyboards.reply import ReplyButtons, is_reply_button
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        admin_buttons = [
            ReplyButtons.STATISTICS,
            ReplyButtons.PAYMENTS,
            ReplyButtons.BROADCAST,
            ReplyButtons.USERS,
            ReplyButtons.ADMIN_PANEL
        ]
        
        for button in admin_buttons:
            assert isinstance(button, str), f"–ö–Ω–æ–ø–∫–∞ {button} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
            assert len(button) > 0, f"–ö–Ω–æ–ø–∫–∞ {button} –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
            assert is_reply_button(button), f"–ö–Ω–æ–ø–∫–∞ {button} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ Reply –∫–Ω–æ–ø–∫–∞"
        
        print("‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Reply –∫–Ω–æ–ø–æ–∫: OK")
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫: {len(admin_buttons)}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Reply –∫–Ω–æ–ø–æ–∫: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π FinderTool")
    print("=" * 50)
    
    tests = [
        ("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Reply –∫–Ω–æ–ø–æ–∫", test_reply_buttons_constants),
        ("–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", test_admin_keyboard),
        ("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", test_role_permissions),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î", test_database_stats),
        ("–°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π", test_payment_service),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            if result:
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
            print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print()
        print("‚úÖ –¢–µ–ø–µ—Ä—å –≤ Telegram –±–æ—Ç–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å:")
        print("‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞")
        print("‚Ä¢ üí≥ –ü–ª–∞—Ç–µ–∂–∏ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ÆKassa")
        print("‚Ä¢ üì¢ –†–∞—Å—Å—ã–ª–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö")
        print("‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")


if __name__ == "__main__":
    asyncio.run(main())
