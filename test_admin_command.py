"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /admin
"""
import asyncio
import logging
from database.models import Database
from bot.handlers.admin import is_admin
from bot.utils.roles import TelegramUserPermissions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_admin_command_access():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /admin"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /admin...")
    
    try:
        db = Database()
        await db.init_db()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        test_cases = [
            (5699315855, "developer", True),  # –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
            (7610418399, "senior_admin", True),  # –°—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω
            (792247608, "admin", True),  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            (123456789, "user", False),  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ]
        
        for user_id, expected_role, should_have_access in test_cases:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é is_admin
            has_access = await is_admin(user_id, db)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
            actual_role = TelegramUserPermissions.get_user_role(user_id)
            
            assert has_access == should_have_access, f"–ù–µ–≤–µ—Ä–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è {user_id}: {has_access} != {should_have_access}"
            assert actual_role == expected_role, f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –¥–ª—è {user_id}: {actual_role} != {expected_role}"
            
            status = "‚úÖ –î–û–°–¢–£–ü" if has_access else "‚ùå –ù–ï–¢ –î–û–°–¢–£–ü–ê"
            print(f"   {user_id}: —Ä–æ–ª—å={actual_role}, {status}")
        
        print("‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /admin: OK")
        return True
        
    except Exception as e:
        print(f"‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /admin: {e}")
        return False


async def test_admin_keyboard_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
    
    try:
        from bot.keyboards.inline import get_admin_keyboard
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_admin_keyboard()
        assert keyboard is not None, "–ê–¥–º–∏–Ω—Å–∫–∞—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        keyboard_dict = keyboard.model_dump()
        assert 'inline_keyboard' in keyboard_dict, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç inline_keyboard –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"
        
        buttons_count = 0
        for row in keyboard_dict['inline_keyboard']:
            buttons_count += len(row)
        
        assert buttons_count > 0, "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: OK")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {buttons_count}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return False


async def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = Database()
        await db.init_db()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(5699315855)
        assert user is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_stats()
        assert isinstance(stats, dict), "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        assert 'total_users' in stats, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç total_users –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: OK")
        print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def test_role_system_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π
        from bot.utils.roles import TelegramUserPermissions
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏
        role = TelegramUserPermissions.get_user_role(5699315855)
        assert role == "developer", f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {role}"
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        has_access = TelegramUserPermissions.has_admin_access(5699315855, role)
        assert has_access, "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø"
        
        # –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = TelegramUserPermissions.get_user_role(123456789)
        assert user_role == "user", f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_role}"
        
        user_access = TelegramUserPermissions.has_admin_access(123456789, user_role)
        assert not user_access, "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø"
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π: OK")
        return True
        
    except Exception as e:
        print(f"‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π: {e}")
        return False


async def test_admin_handlers_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        from bot.handlers import admin
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
        assert hasattr(admin, 'router'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç router –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º –º–æ–¥—É–ª–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        assert hasattr(admin, 'is_admin'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è is_admin"
        assert hasattr(admin, 'cmd_admin'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ cmd_admin"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ is_admin - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        import inspect
        assert inspect.iscoroutinefunction(admin.is_admin), "is_admin –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π"
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: OK")
        return True
        
    except Exception as e:
        print(f"‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /admin FinderTool")
    print("=" * 50)
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π", test_role_system_integration),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", test_admin_handlers_structure),
        ("–ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", test_admin_keyboard_import),
        ("–î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /admin", test_admin_command_access),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            if result:
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
            print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /admin:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ö–æ–º–∞–Ω–¥–∞ /admin –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print()
        print("‚úÖ –¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–∞ /admin –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è:")
        print("‚Ä¢ üë®‚Äçüíª developer (ID: 5699315855)")
        print("‚Ä¢ üëë senior_admin (ID: 7610418399)")
        print("‚Ä¢ üõ°Ô∏è admin (ID: 792247608)")
        print()
        print("‚ùå –ò –ù–ï —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è:")
        print("‚Ä¢ üë§ user (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)")
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")


if __name__ == "__main__":
    asyncio.run(main())
