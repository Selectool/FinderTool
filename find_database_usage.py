#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Database –∫–ª–∞—Å—Å
"""

import os
import re
from pathlib import Path

def find_database_usage():
    """–ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Database –∫–ª–∞—Å—Å"""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    patterns = [
        r'from database\.models import Database',
        r'db: Database',
        r'Database\(',
        r'aiosqlite\.connect',
        r'self\.db_path'
    ]
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_dirs = ['bot/', 'database/', 'admin/', 'services/']
    
    results = {}
    
    for search_dir in search_dirs:
        if not os.path.exists(search_dir):
            continue
            
        for root, dirs, files in os.walk(search_dir):
            for file in files:
                if file.endswith('.py'):
                    file_path = os.path.join(root, file)
                    
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                        
                        matches = []
                        for pattern in patterns:
                            pattern_matches = re.findall(pattern, content)
                            if pattern_matches:
                                matches.extend([(pattern, len(pattern_matches))])
                        
                        if matches:
                            results[file_path] = matches
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    return results

def main():
    print("üîç –ü–û–ò–°–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø DATABASE –ö–õ–ê–°–°–ê")
    print("=" * 60)
    
    results = find_database_usage()
    
    if not results:
        print("‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Database –∫–ª–∞—Å—Å–∞")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Database:")
    print()
    
    for file_path, matches in results.items():
        print(f"üìÅ {file_path}:")
        for pattern, count in matches:
            print(f"   - {pattern}: {count} –≤—Ö–æ–∂–¥–µ–Ω–∏–π")
        print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ó–∞–º–µ–Ω–∏—Ç–µ 'from database.models import Database' –Ω–∞ 'from database.universal_database import UniversalDatabase'")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ 'db: Database' –Ω–∞ 'db: UniversalDatabase'")
    print("3. –ó–∞–º–µ–Ω–∏—Ç–µ 'Database(' –Ω–∞ 'UniversalDatabase('")
    print("4. –£–¥–∞–ª–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'aiosqlite.connect' –∏ 'self.db_path'")

if __name__ == "__main__":
    main()
