"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –ø—Ä–æ–¥–∞–∫—à–Ω
"""
import asyncio
import logging
from database.models import Database
from services.payment_service import create_payment_service
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_clean_database():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å—Ç–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = Database()
        await db.init_db()
        
        import aiosqlite
        async with aiosqlite.connect(db.db_path) as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
            cursor = await conn.execute("SELECT COUNT(*) FROM payments")
            payments_count = (await cursor.fetchone())[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
            cursor = await conn.execute("SELECT COUNT(*) FROM requests")
            requests_count = (await cursor.fetchone())[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await conn.execute("SELECT COUNT(*) FROM users")
            users_count = (await cursor.fetchone())[0]
            
            print(f"   üí≥ –ü–ª–∞—Ç–µ–∂–µ–π: {payments_count}")
            print(f"   üìù –ó–∞–ø—Ä–æ—Å–æ–≤: {requests_count}")
            print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
            if users_count <= 3 and payments_count == 0:
                print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return True
            else:
                print("   ‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return False
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False


async def check_payment_system_live():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ LIVE —Ä–µ–∂–∏–º–µ"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        print(f"   –†–µ–∂–∏–º –ÆKassa: {YOOKASSA_MODE}")
        print(f"   –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {YOOKASSA_PROVIDER_TOKEN[:20]}...")
        
        if YOOKASSA_MODE != "LIVE":
            print("   ‚ùå –ÆKassa –ù–ï –≤ LIVE —Ä–µ–∂–∏–º–µ!")
            return False
        
        if ":TEST:" in YOOKASSA_PROVIDER_TOKEN:
            print("   ‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å
        db = Database()
        await db.init_db()
        
        payment_service = create_payment_service(
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency=YOOKASSA_CURRENCY,
            provider_data=YOOKASSA_PROVIDER_DATA,
            db=db
        )
        
        if payment_service.is_test_mode:
            print("   ‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")
            return False
        
        print("   ‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ LIVE —Ä–µ–∂–∏–º–µ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return False


async def check_admin_access():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–æ–≤...")
    
    try:
        from bot.utils.roles import TelegramUserPermissions
        
        admins = [
            (5699315855, "developer"),
            (7610418399, "senior_admin"),
            (792247608, "admin")
        ]
        
        for user_id, expected_role in admins:
            role = TelegramUserPermissions.get_user_role(user_id)
            has_access = TelegramUserPermissions.has_admin_access(user_id, role)
            
            if role == expected_role and has_access:
                print(f"   ‚úÖ {user_id}: {role}")
            else:
                print(f"   ‚ùå {user_id}: –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–æ–ª—å—é {role}")
                return False
        
        print("   ‚úÖ –í—Å–µ –∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
        return False


async def check_telethon_session():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Telethon —Å–µ—Å—Å–∏—é"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telethon —Å–µ—Å—Å–∏–∏...")

    try:
        if not SESSION_STRING:
            print("   ‚ùå SESSION_STRING –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return False

        from services.channel_finder import ChannelFinder

        finder = ChannelFinder(
            API_ID,
            API_HASH,
            session_string=SESSION_STRING
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        await finder.init_client()

        if await finder.client.is_user_authorized():
            print("   ‚úÖ Telethon —Å–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            await finder.close_client()
            return True
        else:
            print("   ‚ùå Telethon —Å–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            await finder.close_client()
            return False

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Telethon: {e}")
        return False


def check_environment_config():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = {
            'BOT_TOKEN': BOT_TOKEN,
            'API_ID': API_ID,
            'API_HASH': API_HASH,
            'YOOKASSA_LIVE_TOKEN': YOOKASSA_LIVE_TOKEN,
            'SESSION_STRING': SESSION_STRING
        }
        
        missing = []
        for var_name, var_value in required_vars.items():
            if not var_value or (isinstance(var_value, int) and var_value == 0):
                missing.append(var_name)
        
        if missing:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –∏ –ª–∏–º–∏—Ç—ã
        print(f"   üí∞ –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {SUBSCRIPTION_PRICE}‚ÇΩ")
        print(f"   üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {FREE_REQUESTS_LIMIT}")
        
        if SUBSCRIPTION_PRICE <= 0:
            print("   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
            return False
        
        if FREE_REQUESTS_LIMIT <= 0:
            print("   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            return False
        
        print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω")
    print("=" * 60)
    
    checks = [
        ("–ß–∏—Å—Ç–æ—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", check_clean_database),
        ("–†–µ–∂–∏–º –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", check_payment_system_live),
        ("–î–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–æ–≤", check_admin_access),
        ("Telethon —Å–µ—Å—Å–∏—è", check_telethon_session),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment_config)
    ]
    
    passed = 0
    total = len(checks)
    
    for check_name, check_func in checks:
        try:
            if asyncio.iscoroutinefunction(check_func):
                result = await check_func()
            else:
                result = check_func()
            
            if result:
                passed += 1
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ '{check_name}': {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ù!")
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        print("‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ LIVE —Ä–µ–∂–∏–º–µ")
        print("‚úÖ –ê–¥–º–∏–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ Telethon —Å–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        print("\nüöÄ –ú–û–ñ–ù–û –ó–ê–ü–£–°–ö–ê–¢–¨ –í –ü–†–û–î–ê–ö–®–ù!")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        print("3. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø–ª–∞—Ç—É")
        print("4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏")
        print("5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã")
        
    else:
        print("‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ù!")
        print(f"\n–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total - passed}")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ –ø—Ä–æ–¥–∞–∫—à–Ω")
        
        if passed < total // 2:
            print("\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º!")
            print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")


if __name__ == "__main__":
    asyncio.run(main())
