"""
Production Logging Configuration
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è production –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import logging
import logging.handlers
import os
import sys
from datetime import datetime
from typing import Optional

def setup_production_logging(
    log_level: str = "INFO",
    log_file: Optional[str] = None,
    max_bytes: int = 10 * 1024 * 1024,  # 10MB
    backup_count: int = 5
) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR)
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        max_bytes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
        backup_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π logger
    """
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    log_level = os.getenv('LOG_LEVEL', log_level).upper()
    log_file = log_file or os.getenv('LOG_FILE')
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π logger
    logger = logging.getLogger()
    logger.setLevel(getattr(logging, log_level, logging.INFO))
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    logger.handlers.clear()
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ –¥–ª—è production
    formatter = logging.Formatter(
        fmt='%(asctime)s | %(levelname)-8s | %(name)s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # Console handler (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω)
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    console_handler.setLevel(getattr(logging, log_level, logging.INFO))
    logger.addHandler(console_handler)
    
    # File handler (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª)
    if log_file:
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            log_dir = os.path.dirname(log_file)
            if log_dir and not os.path.exists(log_dir):
                os.makedirs(log_dir, exist_ok=True)
            
            # Rotating file handler
            file_handler = logging.handlers.RotatingFileHandler(
                filename=log_file,
                maxBytes=max_bytes,
                backupCount=backup_count,
                encoding='utf-8'
            )
            file_handler.setFormatter(formatter)
            file_handler.setLevel(getattr(logging, log_level, logging.INFO))
            logger.addHandler(file_handler)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    _configure_external_loggers(log_level)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    logger.info("‚úÖ Production –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level}")
    if log_file:
        logger.info(f"üìÅ –§–∞–π–ª –ª–æ–≥–æ–≤: {log_file}")
    
    return logger

def _configure_external_loggers(log_level: str):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    
    # –£—Ä–æ–≤–Ω–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (–º–µ–Ω–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ)
    external_level = logging.WARNING if log_level == "DEBUG" else logging.ERROR
    
    external_loggers = [
        'asyncio',
        'aiogram',
        'aiohttp',
        'urllib3',
        'asyncpg',
        'uvicorn.access',
        'uvicorn.error',
        'fastapi',
        'starlette',
        'httpx',
        'telethon'
    ]
    
    for logger_name in external_loggers:
        logging.getLogger(logger_name).setLevel(external_level)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('uvicorn').setLevel(logging.INFO)
    logging.getLogger('uvicorn.access').setLevel(logging.WARNING)

def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ logger —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
    return logging.getLogger(name)

def log_startup_info():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ"""
    logger = logging.getLogger(__name__)
    
    logger.info("=" * 50)
    logger.info("üöÄ TELEGRAM CHANNEL FINDER BOT")
    logger.info("=" * 50)
    logger.info(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    logger.info(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {os.getenv('ENVIRONMENT', 'development')}")
    logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {os.getenv('DATABASE_TYPE', 'sqlite')}")
    logger.info("=" * 50)

def log_shutdown_info():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    logger = logging.getLogger(__name__)
    
    logger.info("=" * 50)
    logger.info("üõë –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    logger.info(f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("=" * 50)

class ProductionLogFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è production –ª–æ–≥–æ–≤"""
    
    def __init__(self, environment: str = "production"):
        super().__init__()
        self.environment = environment
    
    def filter(self, record: logging.LogRecord) -> bool:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∞"""
        
        # –í production —Å–∫—Ä—ã–≤–∞–µ–º DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        if self.environment == "production":
            if record.levelno < logging.INFO and not record.name.startswith('bot'):
                return False
        
        # –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if hasattr(record, 'msg'):
            sensitive_patterns = ['password', 'token', 'secret', 'key']
            msg_lower = str(record.msg).lower()
            
            for pattern in sensitive_patterns:
                if pattern in msg_lower:
                    record.msg = str(record.msg).replace(
                        record.msg, 
                        "[SENSITIVE DATA HIDDEN]"
                    )
        
        return True

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if not logging.getLogger().handlers:
    setup_production_logging()
