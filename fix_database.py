#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import asyncpg
import os

async def fix_database():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ postgres –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_url = 'postgresql://postgres:postgres@localhost:5432/postgres'
    target_db = 'telegram_bot'
    
    print(f'üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL...')
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ postgres
        conn = await asyncpg.connect(default_url)
        print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã telegram_bot
        db_exists = await conn.fetchval("""
            SELECT EXISTS(
                SELECT 1 FROM pg_database WHERE datname = $1
            )
        """, target_db)
        
        if not db_exists:
            print(f'üìù –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö {target_db}...')
            await conn.execute(f'CREATE DATABASE {target_db}')
            print(f'‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {target_db} —Å–æ–∑–¥–∞–Ω–∞!')
        else:
            print(f'‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {target_db} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        
        await conn.close()
        
        # –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ
        target_url = f'postgresql://postgres:postgres@localhost:5432/{target_db}'
        conn = await asyncpg.connect(target_url)
        print(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {target_db} —É—Å–ø–µ—à–Ω–æ!')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        print(f'üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}')
        for table in tables:
            print(f'  - {table["table_name"]}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        print('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º users
        if any(t['table_name'] == 'users' for t in tables):
            user_columns = await conn.fetch("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'users' AND table_schema = 'public'
                ORDER BY ordinal_position
            """)
            print(f'üë§ –°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã users ({len(user_columns)}):')
            for col in user_columns:
                print(f'  - {col["column_name"]} ({col["data_type"]})')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º payments
        if any(t['table_name'] == 'payments' for t in tables):
            payment_columns = await conn.fetch("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'payments' AND table_schema = 'public'
                ORDER BY ordinal_position
            """)
            print(f'üí≥ –°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã payments ({len(payment_columns)}):')
            for col in payment_columns:
                print(f'  - {col["column_name"]} ({col["data_type"]})')
        
        await conn.close()
        print('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        return True
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    success = asyncio.run(fix_database())
    exit(0 if success else 1)
