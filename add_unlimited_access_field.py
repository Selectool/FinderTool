#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è unlimited_access –≤ PostgreSQL
"""

import asyncio
import logging
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db_adapter import DatabaseAdapter
from config import DATABASE_URL

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def add_unlimited_access_field():
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ unlimited_access –≤ PostgreSQL"""
    try:
        adapter = DatabaseAdapter(DATABASE_URL)
        await adapter.connect()
        
        logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è unlimited_access...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ unlimited_access
        check_column_query = """
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'users' AND column_name = 'unlimited_access'
        """
        
        result = await adapter.fetch_one(check_column_query)
        
        if not result:
            logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É unlimited_access...")
            try:
                add_column_query = "ALTER TABLE users ADD COLUMN unlimited_access BOOLEAN DEFAULT FALSE"
                await adapter.execute(add_column_query)
                logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ unlimited_access –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            except Exception as e:
                if "already exists" in str(e).lower() or "duplicate column" in str(e).lower():
                    logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ unlimited_access —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏–∑ –æ—à–∏–±–∫–∏)")
                else:
                    raise e
        else:
            logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ unlimited_access —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        count_query = """
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN unlimited_access = TRUE THEN 1 END) as unlimited_users
            FROM users
        """
        
        result = await adapter.fetch_one(count_query)
        if result:
            total = result[0] if isinstance(result, (list, tuple)) else result.get('total_users', 0)
            unlimited = result[1] if isinstance(result, (list, tuple)) else result.get('unlimited_users', 0)
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")
            logger.info(f"   –° –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º: {unlimited}")
        
        await adapter.disconnect()
        logger.info("üéâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è unlimited_access –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è unlimited_access: {e}")
        try:
            await adapter.disconnect()
        except:
            pass
        raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è unlimited_access")
    logger.info(f"üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL[:50]}...")
    
    try:
        await add_unlimited_access_field()
        logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
