#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

import asyncio
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from database.universal_database import UniversalDatabase
from admin.auth.auth import get_password_hash


async def fix_admin_permissions():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
            
        db = UniversalDatabase(database_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await db.adapter.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è infoblog_developer
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            check_query = """
                SELECT id, username, role FROM admin_users 
                WHERE username = $1
            """
            user = await db.adapter.fetch_one(check_query, ('infoblog_developer',))
            
            if user:
                print(f"üìã –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username']}, —Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å: {user['role']}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ developer
                update_query = """
                    UPDATE admin_users 
                    SET role = $1, updated_at = $2
                    WHERE username = $3
                """
                await db.adapter.execute(update_query, ('developer', datetime.now(), 'infoblog_developer'))
                print("‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 'developer'")
                
            else:
                print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å infoblog_developer –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ developer
                password_hash = get_password_hash("admin123")
                create_query = """
                    INSERT INTO admin_users (username, email, password_hash, role, is_active, created_at, updated_at)
                    VALUES ($1, $2, $3, $4, $5, $6, $7)
                """
                await db.adapter.execute(create_query, (
                    'infoblog_developer',
                    'infoblog@developer.com',
                    password_hash,
                    'developer',
                    True,
                    datetime.now(),
                    datetime.now()
                ))
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å infoblog_developer —Å–æ–∑–¥–∞–Ω —Å —Ä–æ–ª—å—é 'developer'")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
        from admin.auth.auth import get_user_permissions, check_permission
        
        permissions = get_user_permissions('developer')
        print(f"üìã –ü—Ä–∞–≤–∞ —Ä–æ–ª–∏ 'developer': {permissions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞
        required_permissions = [
            'users.view', 'users.edit', 'users.manage_subscription',
            'statistics.view', 'broadcasts.create', 'broadcasts.send'
        ]
        
        for perm in required_permissions:
            has_perm = check_permission('developer', perm)
            status = "‚úÖ" if has_perm else "‚ùå"
            print(f"{status} {perm}: {'–ï—Å—Ç—å' if has_perm else '–ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        tables_to_check = ['users', 'requests', 'admin_users', 'broadcasts']
        for table in tables_to_check:
            try:
                count_query = f"SELECT COUNT(*) FROM {table}"
                result = await db.adapter.fetch_one(count_query, ())
                count = result['count'] if result else 0
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
        
        await db.adapter.disconnect()
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


async def test_admin_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        from admin.auth.auth import authenticate_user
        
        database_url = os.getenv('DATABASE_URL')
        db = UniversalDatabase(database_url)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await authenticate_user(db, 'infoblog_developer', 'admin123')
        
        if user:
            print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {user.username}, —Ä–æ–ª—å: {user.role}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            from admin.auth.auth import check_permission
            can_view_users = check_permission(user.role, 'users.view')
            can_edit_users = check_permission(user.role, 'users.edit')
            can_manage_subscription = check_permission(user.role, 'users.manage_subscription')
            
            print(f"‚úÖ –ü—Ä–∞–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'–ï—Å—Ç—å' if can_view_users else '–ù–µ—Ç'}")
            print(f"‚úÖ –ü—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'–ï—Å—Ç—å' if can_edit_users else '–ù–µ—Ç'}")
            print(f"‚úÖ –ü—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: {'–ï—Å—Ç—å' if can_manage_subscription else '–ù–µ—Ç'}")
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ê–í –î–û–°–¢–£–ü–ê –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò")
    print("=" * 50)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞
    success = await fix_admin_permissions()
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    success = await test_admin_connection()
    if not success:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ")
        return
    
    print("\nüéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")


if __name__ == "__main__":
    asyncio.run(main())
