#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è last_request –≤ PostgreSQL
–û–±–Ω–æ–≤–ª—è–µ—Ç last_activity -> last_request –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
"""

import asyncio
import logging
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db_adapter import DatabaseAdapter
from config import DATABASE_URL

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def fix_last_request_field():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ last_request –≤ PostgreSQL"""
    try:
        adapter = DatabaseAdapter(DATABASE_URL)
        await adapter.connect()
        
        logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è last_request...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ last_activity
        check_column_query = """
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'users' AND column_name = 'last_activity'
        """
        
        result = await adapter.fetch_one(check_column_query)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ last_request
        check_last_request_query = """
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = 'users' AND column_name = 'last_request'
        """

        last_request_result = await adapter.fetch_one(check_last_request_query)

        if not last_request_result:
            logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É last_request...")
            add_column_query = "ALTER TABLE users ADD COLUMN last_request TIMESTAMP"
            await adapter.execute(add_column_query)
            logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ last_request –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ last_request —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –¢–µ–ø–µ—Ä—å –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ last_activity –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if result:
            logger.info("üìã –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ last_activity, –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ last_request...")

            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ last_activity –≤ last_request
            update_query = """
                UPDATE users
                SET last_request = last_activity
                WHERE last_activity IS NOT NULL AND (last_request IS NULL OR last_request < last_activity)
            """

            await adapter.execute(update_query)
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ last_activity –≤ last_request")

        else:
            logger.info("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ last_activity –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º last_request –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å—ã
        logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º last_request –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü—ã requests...")
        
        update_from_requests_query = """
            UPDATE users 
            SET last_request = (
                SELECT MAX(created_at) 
                FROM requests 
                WHERE requests.user_id = users.user_id
            )
            WHERE EXISTS (
                SELECT 1 FROM requests WHERE requests.user_id = users.user_id
            )
        """
        
        await adapter.execute(update_from_requests_query)
        logger.info("‚úÖ –ü–æ–ª–µ last_request –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü—ã requests")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        count_query = """
            SELECT 
                COUNT(*) as total_users,
                COUNT(last_request) as users_with_last_request
            FROM users
        """
        
        result = await adapter.fetch_one(count_query)
        if result:
            total = result[0] if isinstance(result, (list, tuple)) else result.get('total_users', 0)
            with_last_request = result[1] if isinstance(result, (list, tuple)) else result.get('users_with_last_request', 0)
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")
            logger.info(f"   –° last_request: {with_last_request}")
            logger.info(f"   –ë–µ–∑ last_request: {total - with_last_request}")
        
        await adapter.disconnect()
        logger.info("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è last_request –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è last_request: {e}")
        try:
            await adapter.disconnect()
        except:
            pass
        raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è last_request")
    logger.info(f"üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL[:50]}...")
    
    try:
        await fix_last_request_field()
        logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
