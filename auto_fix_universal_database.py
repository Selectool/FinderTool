#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UniversalDatabase
–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –∏–∑ Database –≤ UniversalDatabase
"""

import ast
import os
import re
from typing import List, Dict, Set

def extract_method_code(file_path: str, class_name: str, method_name: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –º–µ—Ç–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∫–ª–∞—Å—Å–∞
        class_start = -1
        for i, line in enumerate(lines):
            if line.strip().startswith(f'class {class_name}'):
                class_start = i
                break

        if class_start == -1:
            return ""

        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å–µ
        method_start = -1
        for i in range(class_start, len(lines)):
            line = lines[i].strip()
            if (line.startswith(f'async def {method_name}(') or
                line.startswith(f'def {method_name}(')):
                method_start = i
                break

        if method_start == -1:
            return ""

        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞ (—Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞)
        method_end = len(lines)
        base_indent = len(lines[method_start]) - len(lines[method_start].lstrip())

        for i in range(method_start + 1, len(lines)):
            line = lines[i]
            if line.strip() == "":
                continue

            current_indent = len(line) - len(line.lstrip())

            # –ï—Å–ª–∏ –æ—Ç—Å—Ç—É–ø –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –±–∞–∑–æ–≤–æ–º—É –∏ —ç—Ç–æ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if (current_indent <= base_indent and
                line.strip() and
                not line.strip().startswith('#') and
                not line.strip().startswith('"""') and
                not line.strip().startswith("'''")):
                method_end = i
                break

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –º–µ—Ç–æ–¥–∞
        method_lines = lines[method_start:method_end]
        return ''.join(method_lines).rstrip()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ {method_name}: {e}")
        return ""

def get_missing_methods() -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
    return [
        'create_payment',
        'get_payment', 
        'complete_payment',
        'get_user_payments',
        'update_payment_status',
        'create_admin_user',
        'get_admin_users',
        'log_admin_action',
        'get_audit_logs',
        'create_message_template',
        'get_message_templates',
        'get_message_template',
        'update_message_template',
        'get_broadcast_by_id',
        'get_broadcasts_list',
        'get_broadcasts_stats',
        'get_broadcast_detailed_stats',
        'get_broadcast_logs',
        'get_all_broadcast_logs',
        'log_broadcast_delivery',
        'update_broadcast_status',
        'update_broadcast_stats',
        'get_broadcast_target_users',
        'get_target_audience_count',
        'get_detailed_stats',
        'get_users_paginated',
        'get_all_users',
        'get_active_users',
        'get_subscribers',
        'get_users_by_role',
        'get_user_activity_chart_data',
        'get_blocked_users_count',
        'delete_user',
        'bulk_delete_users',
        'mark_user_bot_blocked',
        'update_user_bot_blocked_status',
        'update_user_permissions',
        'update_user_role',
        'update_subscription',
        'reset_user_requests',
        '_run_migrations'
    ]

def convert_sqlite_to_universal(method_code: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SQLite –∫–æ–¥ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–∞–ø—Ç–µ—Ä–æ–º"""

    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    lines = method_code.split('\n')
    new_lines = []

    for line in lines:
        # –ó–∞–º–µ–Ω—è–µ–º aiosqlite.connect
        if 'async with aiosqlite.connect(self.db_path) as db:' in line:
            indent = line[:len(line) - len(line.lstrip())]
            new_lines.append(f'{indent}try:')
            new_lines.append(f'{indent}    await self.adapter.connect()')
            continue

        # –ó–∞–º–µ–Ω—è–µ–º db –æ–ø–µ—Ä–∞—Ü–∏–∏
        line = re.sub(r'\bdb\.execute\b', 'self.adapter.execute', line)
        line = re.sub(r'\bdb\.commit\b', '# commit handled by adapter', line)
        line = re.sub(r'\bdb\.fetchone\b', 'self.adapter.fetch_one', line)
        line = re.sub(r'\bdb\.fetchall\b', 'self.adapter.fetch_all', line)
        line = re.sub(r'\bdb\.row_factory = aiosqlite\.Row', '# row_factory handled by adapter', line)

        # –ó–∞–º–µ–Ω—è–µ–º cursor –æ–ø–µ—Ä–∞—Ü–∏–∏
        if 'cursor = await' in line and 'db.execute' in line:
            line = re.sub(r'cursor = await db\.execute\((.*?)\)', r'await self.adapter.execute(\1)', line)

        if 'cursor.lastrowid' in line:
            line = re.sub(r'cursor\.lastrowid', 'self.adapter.lastrowid', line)

        new_lines.append(line)

    # –î–æ–±–∞–≤–ª—è–µ–º finally –±–ª–æ–∫ –≤ –∫–æ–Ω–µ—Ü
    if any('await self.adapter.connect()' in line for line in new_lines):
        # –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—ã–π –æ—Ç—Å—Ç—É–ø –º–µ—Ç–æ–¥–∞
        method_indent = ''
        for line in new_lines:
            if line.strip().startswith('async def') or line.strip().startswith('def'):
                method_indent = line[:len(line) - len(line.lstrip())]
                break

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        new_lines.append(f'{method_indent}except Exception as e:')
        new_lines.append(f'{method_indent}    logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ: {{e}}")')
        new_lines.append(f'{method_indent}    try:')
        new_lines.append(f'{method_indent}        await self.adapter.disconnect()')
        new_lines.append(f'{method_indent}    except:')
        new_lines.append(f'{method_indent}        pass')
        new_lines.append(f'{method_indent}    raise')
        new_lines.append(f'{method_indent}finally:')
        new_lines.append(f'{method_indent}    try:')
        new_lines.append(f'{method_indent}        await self.adapter.disconnect()')
        new_lines.append(f'{method_indent}    except:')
        new_lines.append(f'{method_indent}        pass')

    return '\n'.join(new_lines)

def add_missing_methods():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –≤ UniversalDatabase"""
    print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UniversalDatabase...")
    
    database_file = "database/models.py"
    universal_file = "database/universal_database.py"
    
    if not os.path.exists(database_file):
        print(f"‚ùå –§–∞–π–ª {database_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if not os.path.exists(universal_file):
        print(f"‚ùå –§–∞–π–ª {universal_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π UniversalDatabase
    with open(universal_file, 'r', encoding='utf-8') as f:
        universal_content = f.read()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    missing_methods = get_missing_methods()
    
    print(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(missing_methods)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = f"{universal_file}.backup"
    with open(backup_file, 'w', encoding='utf-8') as f:
        f.write(universal_content)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã
    methods_to_add = []
    
    for method_name in missing_methods:
        print(f"   üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ {method_name}...")
        method_code = extract_method_code(database_file, "Database", method_name)
        
        if method_code:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            universal_method = convert_sqlite_to_universal(method_code)
            methods_to_add.append(universal_method)
            print(f"   ‚úÖ –ú–µ—Ç–æ–¥ {method_name} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")
        else:
            print(f"   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Database")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞ (–ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π)
    if methods_to_add:
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞ UniversalDatabase
        lines = universal_content.split('\n')
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
        insert_position = len(lines) - 1
        for i in range(len(lines) - 1, -1, -1):
            if lines[i].strip() and not lines[i].startswith(' ') and not lines[i].startswith('\t'):
                insert_position = i
                break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
        new_content_lines = lines[:insert_position]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        new_content_lines.append("")
        new_content_lines.append("    # ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ ==========")
        new_content_lines.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã
        for method_code in methods_to_add:
            new_content_lines.extend(method_code.split('\n'))
            new_content_lines.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
        new_content_lines.extend(lines[insert_position:])
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        new_content = '\n'.join(new_content_lines)
        
        with open(universal_file, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(methods_to_add)} –º–µ—Ç–æ–¥–æ–≤ –≤ {universal_file}")
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    try:
        success = add_missing_methods()
        
        if success:
            print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ universal_database.py")
            print("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
            print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π")
        else:
            print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
