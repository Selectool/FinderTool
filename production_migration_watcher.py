#!/usr/bin/env python3
"""
Production Migration Watcher
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ö–µ–º–µ –ë–î –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import asyncio
import os
import sys
import time
import logging
from pathlib import Path
from datetime import datetime
import hashlib
import json

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["ENVIRONMENT"] = "production"
os.environ["PYTHONPATH"] = "/app"
os.environ["PYTHONUNBUFFERED"] = "1"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/app/logs/migration-watcher.log')
    ]
)
logger = logging.getLogger(__name__)

class ProductionMigrationWatcher:
    """–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –≤ production"""
    
    def __init__(self):
        self.migrations_dir = Path("/app/database/migrations")
        self.state_file = Path("/app/data/migration_state.json")
        self.state_file.parent.mkdir(parents=True, exist_ok=True)
        self.check_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.last_migration_hash = None
        
    def get_migrations_hash(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π"""
        if not self.migrations_dir.exists():
            return ""
        
        migration_files = sorted(self.migrations_dir.glob("*.py"))
        content = ""
        
        for file_path in migration_files:
            if file_path.name != "__init__.py":
                try:
                    content += file_path.read_text(encoding='utf-8')
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {file_path}: {e}")
        
        return hashlib.md5(content.encode()).hexdigest()
    
    def load_state(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.state_file.exists():
                return json.loads(self.state_file.read_text())
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        
        return {
            "last_migration_hash": "",
            "last_check": None,
            "migration_count": 0
        }
    
    def save_state(self, state: dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            state["last_check"] = datetime.now().isoformat()
            self.state_file.write_text(json.dumps(state, indent=2))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    async def check_and_apply_migrations(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            current_hash = self.get_migrations_hash()
            state = self.load_state()
            
            if current_hash != state.get("last_migration_hash"):
                logger.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–∏–≥—Ä–∞—Ü–∏—è—Ö")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
                from database.migration_manager import MigrationManager
                
                database_url = os.getenv('DATABASE_URL', 'postgresql://findertool_user:Findertool1999!@findertool-hyvrte:5432/findertool_prod')
                manager = MigrationManager(database_url)
                
                logger.info("üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π...")
                await manager.migrate()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state["last_migration_hash"] = current_hash
                state["migration_count"] = len(manager.discover_migrations())
                self.save_state(state)
                
                logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                await self.notify_services_restart()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
    
    async def notify_services_restart(self):
        """–£–≤–µ–¥–æ–º–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ñ–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            restart_flag = Path("/app/data/restart_required.flag")
            restart_flag.write_text(datetime.now().isoformat())
            
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω —Ñ–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ Production Migration Watcher...")
        logger.info(f"üìÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º: {self.migrations_dir}")
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await self.check_and_apply_migrations()
        
        while True:
            try:
                await asyncio.sleep(self.check_interval)
                await self.check_and_apply_migrations()
                
            except KeyboardInterrupt:
                logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è: {e}")
                await asyncio.sleep(self.check_interval)

if __name__ == "__main__":
    try:
        watcher = ProductionMigrationWatcher()
        asyncio.run(watcher.run())
    except KeyboardInterrupt:
        logger.info("üëã Migration Watcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
