#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å Supervisor –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
"""
import subprocess
import sys
import os
import time
import signal

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["ENVIRONMENT"] = "production"
os.environ["PYTHONPATH"] = "/app"
os.environ["PYTHONUNBUFFERED"] = "1"

class QuickSupervisor:
    def __init__(self):
        self.supervisor_config = """
[supervisord]
nodaemon=true
user=root
logfile=/tmp/supervisord.log
pidfile=/tmp/supervisord.pid
childlogdir=/tmp
loglevel=info

[unix_http_server]
file=/tmp/supervisor.sock
chmod=0700

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[program:telegram_bot]
command=python main.py
directory=/app
autostart=true
autorestart=true
startretries=5
startsecs=10
user=root
redirect_stderr=true
stdout_logfile=/tmp/telegram_bot.log
stdout_logfile_maxbytes=100MB
stdout_logfile_backups=3
environment=ENVIRONMENT=production,PYTHONPATH=/app,PYTHONUNBUFFERED=1
priority=100

[program:admin_panel]
command=python run_admin.py
directory=/app
autostart=true
autorestart=true
startretries=5
startsecs=10
user=root
redirect_stderr=true
stdout_logfile=/tmp/admin_panel.log
stdout_logfile_maxbytes=100MB
stdout_logfile_backups=3
environment=ENVIRONMENT=production,ADMIN_ALLOWED_HOSTS="185.207.66.201,findertool.dokploy.com,localhost,127.0.0.1,0.0.0.0",ADMIN_CORS_ORIGINS="http://185.207.66.201:8080,https://findertool.dokploy.com,http://localhost:8080,http://127.0.0.1:8080",ADMIN_HOST=0.0.0.0,ADMIN_PORT=8080,PYTHONPATH=/app,PYTHONUNBUFFERED=1
priority=200

[group:findertool_services]
programs=telegram_bot,admin_panel
priority=999
"""
        self.config_path = "/tmp/supervisord.conf"
        self.supervisor_process = None
        
    def install_supervisor(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ supervisor –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
        try:
            result = subprocess.run(["supervisord", "--version"], 
                                  capture_output=True, text=True)
            print(f"‚úÖ Supervisor —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        except FileNotFoundError:
            print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Supervisor...")
            try:
                subprocess.run([
                    "apt-get", "update", "-qq"
                ], check=True)
                subprocess.run([
                    "apt-get", "install", "-y", "supervisor"
                ], check=True)
                print("‚úÖ Supervisor —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Supervisor: {e}")
                return False
    
    def create_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ supervisor"""
        try:
            with open(self.config_path, 'w') as f:
                f.write(self.supervisor_config)
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.config_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def start_supervisor(self):
        """–ó–∞–ø—É—Å–∫ supervisor"""
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫ Supervisor...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            subprocess.run(["pkill", "-f", "supervisord"], capture_output=True)
            subprocess.run(["pkill", "-f", "python main.py"], capture_output=True)
            subprocess.run(["pkill", "-f", "python run_admin.py"], capture_output=True)
            time.sleep(3)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º supervisor
            self.supervisor_process = subprocess.Popen([
                "supervisord", "-c", self.config_path
            ])
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            result = subprocess.run([
                "supervisorctl", "-c", self.config_path, "status"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Supervisor –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
                print(result.stdout)
                print("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://185.207.66.201:8080")
                print("üîë –õ–æ–≥–∏–Ω: admin / admin123")
                print("üìã –õ–æ–≥–∏:")
                print("  ‚Ä¢ tail -f /tmp/telegram_bot.log")
                print("  ‚Ä¢ tail -f /tmp/admin_panel.log")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Supervisor")
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Supervisor: {e}")
            return False
    
    def monitor_services(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        def signal_handler(signum, frame):
            print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
            self.stop_supervisor()
            sys.exit(0)
        
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        
        try:
            while True:
                time.sleep(60)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                result = subprocess.run([
                    "supervisorctl", "-c", self.config_path, "status"
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    lines = result.stdout.strip().split('\n')
                    bot_status = "UNKNOWN"
                    admin_status = "UNKNOWN"
                    
                    for line in lines:
                        if "telegram_bot" in line:
                            parts = line.split()
                            if len(parts) >= 2:
                                bot_status = parts[1]
                        elif "admin_panel" in line:
                            parts = line.split()
                            if len(parts) >= 2:
                                admin_status = parts[1]
                    
                    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
                    print(f"{timestamp} - Bot: {bot_status}, Admin: {admin_status}")
                    
                    # –ï—Å–ª–∏ –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
                    if bot_status != "RUNNING" and admin_status != "RUNNING":
                        print("‚ùå –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                        break
                else:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
                    
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            self.stop_supervisor()
    
    def stop_supervisor(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ supervisor"""
        try:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            subprocess.run([
                "supervisorctl", "-c", self.config_path, "stop", "all"
            ])
            
            if self.supervisor_process:
                self.supervisor_process.terminate()
                self.supervisor_process.wait(timeout=10)
            
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å Supervisor...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º supervisor
        if not self.install_supervisor():
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not self.create_config():
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º supervisor
        if not self.start_supervisor():
            return False
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–µ—Ä–≤–∏—Å—ã
        self.monitor_services()
        
        return True

if __name__ == "__main__":
    supervisor = QuickSupervisor()
    try:
        success = supervisor.run()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
