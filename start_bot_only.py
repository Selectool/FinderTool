#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞ –±–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
–î–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –Ω—É–∂–Ω–∞ –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –µ–µ –∑–∞–ø—É—Å–∫–æ–º
"""

import asyncio
import logging
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(name)-20s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)

class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.running = True
    
    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
            from main import main as bot_main
            await bot_main()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            raise
    
    async def health_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        logger.info("üíì –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è...")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(60)
                
                if not self.running:
                    break
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
                logger.info("üíì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    from database.production_manager import db_manager
                    db_health = await db_manager.health_check()
                    if db_health.get('status') == 'healthy':
                        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –∑–¥–æ—Ä–æ–≤–∞")
                    else:
                        logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–±–ª–µ–º—ã")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
                
                logger.info("üíì –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def start_bot_service(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        logger.info("=" * 60)
        logger.info("ü§ñ –ó–ê–ü–£–°–ö TELEGRAM CHANNEL FINDER BOT")
        logger.info("=" * 60)
        logger.info("ü§ñ –¢–æ–ª—å–∫–æ Telegram Bot + üíì Health Monitor")
        logger.info("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –û–¢–ö–õ–Æ–ß–ï–ù–ê")
        logger.info("=" * 60)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ—Ç–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            tasks = [
                asyncio.create_task(self.start_telegram_bot(), name="telegram_bot"),
                asyncio.create_task(self.health_monitor(), name="health_monitor")
            ]
            
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            logger.info("ü§ñ Telegram –±–æ—Ç: –∞–∫—Ç–∏–≤–µ–Ω")
            logger.info("üíì –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –∞–∫—Ç–∏–≤–µ–Ω")
            logger.info("=" * 60)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            raise
        finally:
            self.running = False
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.running = False
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            for task in asyncio.all_tasks():
                task.cancel()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot_manager = BotManager()
    bot_manager.setup_signal_handlers()
    
    try:
        await bot_manager.start_bot_service()
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        logger.info("=" * 60)
        logger.info("üëã TELEGRAM CHANNEL FINDER BOT –û–°–¢–ê–ù–û–í–õ–ï–ù")
        logger.info("=" * 60)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
