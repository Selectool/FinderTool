#!/usr/bin/env python3
"""
Production Startup Script
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ production-ready —Å–∏—Å—Ç–µ–º—ã
"""
import subprocess
import sys
import os
import time
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

def print_banner():
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä –∑–∞–ø—É—Å–∫–∞"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë           üöÄ TELEGRAM CHANNEL FINDER BOT üöÄ                 ‚ïë
‚ïë                                                              ‚ïë
‚ïë                   PRODUCTION STARTUP                         ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üéØ Senior Developer Level Production-Ready System          ‚ïë
‚ïë  üìä Supervisor Process Management                            ‚ïë
‚ïë  üîÑ Automatic Migrations & Data Sync                        ‚ïë
‚ïë  üíæ Data Persistence & Backup System                        ‚ïë
‚ïë  üîç Health Monitoring & Auto-Recovery                       ‚ïë
‚ïë  üåê Web Admin Panel with Authentication                     ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üõ†Ô∏è PRODUCTION STARTUP COMMANDS:

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  python production_startup.py                  - –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ production —Å–∏—Å—Ç–µ–º—ã
  python production_startup.py deploy           - –î–µ–ø–ª–æ–π —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –∏ –±—ç–∫–∞–ø–æ–º
  python production_startup.py supervisor       - –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Supervisor
  python production_startup.py status           - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  python production_startup.py restart          - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  python production_startup.py stop             - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  python production_startup.py logs [service]   - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤

üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏:
  python production_startup.py migrate          - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
  python production_startup.py migrate-status   - –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
  python production_startup.py backup           - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö

üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
  python production_startup.py health           - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
  python production_startup.py dashboard        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

üéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ production —Å–∏—Å—Ç–µ–º—ã
  python production_startup.py

  # –î–µ–ø–ª–æ–π –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
  python production_startup.py deploy

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  python production_startup.py status

üåê –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞:
  –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://185.207.66.201:8080
  –õ–æ–≥–∏–Ω: admin / admin123
"""
    print(help_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ["ENVIRONMENT"] = "production"
    os.environ["PYTHONPATH"] = "/app"
    os.environ["PYTHONUNBUFFERED"] = "1"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    command = sys.argv[1] if len(sys.argv) > 1 else "start"
    
    if command in ["help", "-h", "--help"]:
        show_help()
        return
    
    logger.info(f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
    
    try:
        if command == "start" or command == "":
            # –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ production —Å–∏—Å—Ç–µ–º—ã
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π production —Å–∏—Å—Ç–µ–º—ã...")
            subprocess.run([sys.executable, "production_supervisor_manager.py", "start"], check=True)
            
        elif command == "deploy":
            # –î–µ–ø–ª–æ–π —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –∏ –±—ç–∫–∞–ø–æ–º
            logger.info("üì¶ –ó–∞–ø—É—Å–∫ production –¥–µ–ø–ª–æ—è...")
            subprocess.run([sys.executable, "production_deploy_manager.py"], check=True)
            
        elif command == "supervisor":
            # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Supervisor
            logger.info("üìä –ó–∞–ø—É—Å–∫ Supervisor...")
            subprocess.run([sys.executable, "production_supervisor_manager.py", "start"], check=True)
            
        elif command == "status":
            # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
            logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            subprocess.run([sys.executable, "production_supervisor_manager.py", "status"], check=True)
            
        elif command == "restart":
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
            subprocess.run([sys.executable, "production_supervisor_manager.py", "restart"], check=True)
            
        elif command == "stop":
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
            subprocess.run([sys.executable, "production_supervisor_manager.py", "stop"], check=True)
            
        elif command == "logs":
            # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
            service = sys.argv[2] if len(sys.argv) > 2 else None
            if service:
                logger.info(f"üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞: {service}")
                subprocess.run([sys.executable, "production_supervisor_manager.py", "logs", service], check=True)
            else:
                logger.info("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
                subprocess.run([sys.executable, "production_supervisor_manager.py", "logs"], check=True)
                
        elif command == "migrate":
            # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
            logger.info("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
            subprocess.run([sys.executable, "manage_migrations.py", "migrate"], check=True)
            
        elif command == "migrate-status":
            # –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
            logger.info("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π...")
            subprocess.run([sys.executable, "manage_migrations.py", "status"], check=True)
            
        elif command == "backup":
            # –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
            logger.info("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
            subprocess.run([sys.executable, "-c", """
import asyncio
from production_data_sync import ProductionDataSync
async def main():
    sync = ProductionDataSync()
    await sync.create_data_backup()
asyncio.run(main())
"""], check=True)
            
        elif command == "health":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            subprocess.run([sys.executable, "-c", """
import asyncio
from production_health_monitor import ProductionHealthMonitor
async def main():
    monitor = ProductionHealthMonitor()
    report = await monitor.perform_health_check()
    print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {report['overall_status']}")
asyncio.run(main())
"""], check=True)
            
        elif command == "dashboard":
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            logger.info("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:")
            logger.info("   http://185.207.66.201:8080")
            logger.info("   –õ–æ–≥–∏–Ω: admin")
            logger.info("   –ü–∞—Ä–æ–ª—å: admin123")
            
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python production_startup.py help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            sys.exit(1)
            
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        logger.info("üëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
