#!/usr/bin/env python3
"""
Unified launcher –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ production
"""
import os
import sys
import subprocess
import threading
import time
import signal
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

class UnifiedLauncher:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    
    def __init__(self):
        self.bot_process = None
        self.admin_process = None
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
        self.running = False
        self.stop_all()
        sys.exit(0)
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
            bot_env = os.environ.copy()
            bot_env.update({
                "ENVIRONMENT": "production",
                "SERVICE_TYPE": "telegram-bot"
            })
            
            self.bot_process = subprocess.Popen(
                [sys.executable, "main.py"],
                env=bot_env,
                cwd=os.getcwd(),
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            print(f"‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {self.bot_process.pid})")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞
            def monitor_bot():
                while self.running and self.bot_process:
                    try:
                        output = self.bot_process.stdout.readline()
                        if output:
                            print(f"[BOT] {output.strip()}")
                        
                        if self.bot_process.poll() is not None:
                            print("‚ö†Ô∏è Telegram –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                            break
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞: {e}")
                        break
            
            threading.Thread(target=monitor_bot, daemon=True).start()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
        
        return True
    
    def start_admin(self):
        """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            print("üåê –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            admin_env = os.environ.copy()
            admin_env.update({
                "ENVIRONMENT": "production",
                "SERVICE_TYPE": "admin-panel",
                "ADMIN_HOST": "0.0.0.0",
                "ADMIN_PORT": "8080",
                "ADMIN_DEBUG": "False"
            })
            
            self.admin_process = subprocess.Popen(
                [sys.executable, "run_admin.py"],
                env=admin_env,
                cwd=os.getcwd(),
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            print(f"‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ (PID: {self.admin_process.pid})")
            print(f"üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞: http://0.0.0.0:8080")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            def monitor_admin():
                while self.running and self.admin_process:
                    try:
                        output = self.admin_process.stdout.readline()
                        if output:
                            print(f"[ADMIN] {output.strip()}")
                        
                        if self.admin_process.poll() is not None:
                            print("‚ö†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
                            break
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
                        break
            
            threading.Thread(target=monitor_admin, daemon=True).start()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            return False
        
        return True
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã...")
        
        if self.bot_process:
            try:
                self.bot_process.terminate()
                self.bot_process.wait(timeout=10)
                print("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                self.bot_process.kill()
                print("üî™ Telegram –±–æ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
        
        if self.admin_process:
            try:
                self.admin_process.terminate()
                self.admin_process.wait(timeout=10)
                print("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except subprocess.TimeoutExpired:
                self.admin_process.kill()
                print("üî™ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Unified Launcher...")
        print("üåç Environment: production")
        print("üìç Database: PostgreSQL")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        bot_started = self.start_bot()
        time.sleep(3)  # –î–∞–µ–º –±–æ—Ç—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        
        admin_started = self.start_admin()
        time.sleep(2)  # –î–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        
        if not bot_started and not admin_started:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å")
            return False
        
        print("\nüéâ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã:")
        if bot_started:
            print("üì± Telegram –±–æ—Ç: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω")
        if admin_started:
            print("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ (http://0.0.0.0:8080)")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        try:
            while self.running:
                time.sleep(5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                if self.bot_process and self.bot_process.poll() is not None:
                    print("‚ö†Ô∏è Telegram –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                    self.start_bot()
                
                if self.admin_process and self.admin_process.poll() is not None:
                    print("‚ö†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                    self.start_admin()
                    
        except KeyboardInterrupt:
            print("\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            self.stop_all()
        
        return True

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not os.getenv("DATABASE_URL"):
            print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        launcher = UnifiedLauncher()
        return launcher.run()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
