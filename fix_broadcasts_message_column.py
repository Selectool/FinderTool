#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–æ–Ω–∫–æ–π message –≤ —Ç–∞–±–ª–∏—Ü–µ broadcasts
"""
import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from database.db_adapter import DatabaseAdapter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def fix_broadcasts_message_column():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–ª–æ–Ω–∫–æ–π message –≤ —Ç–∞–±–ª–∏—Ü–µ broadcasts"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ message –≤ —Ç–∞–±–ª–∏—Ü–µ broadcasts")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        database_url = 'postgresql://findertool_user:Findertool1999!@localhost:5432/findertool_prod'
        print(f"‚ö†Ô∏è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {database_url}")
    else:
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î: {database_url}")
    
    db_type = 'postgresql' if database_url.startswith('postgresql') else 'sqlite'
    
    try:
        adapter = DatabaseAdapter(database_url)
        await adapter.connect()
        
        print("\nüìä –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã broadcasts...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã broadcasts
        if db_type == 'postgresql':
            columns_query = """
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'broadcasts'
                ORDER BY ordinal_position
            """
        else:
            columns_query = "PRAGMA table_info(broadcasts)"
        
        columns = await adapter.fetch_all(columns_query)
        
        if not columns:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ broadcasts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É message
        message_column = None
        for col in columns:
            if isinstance(col, dict):
                col_name = col.get('column_name', '')
                is_nullable = col.get('is_nullable', 'YES')
            else:
                col_name = col[0] if isinstance(col, tuple) else str(col)
                is_nullable = 'YES'  # –î–ª—è SQLite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if col_name == 'message':
                message_column = {
                    'name': col_name,
                    'nullable': is_nullable == 'YES'
                }
                break
        
        if not message_column:
            print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ message –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ broadcasts!")
            return False
        
        print(f"   - –ö–æ–ª–æ–Ω–∫–∞ message: {'‚úÖ nullable' if message_column['nullable'] else '‚ùå NOT NULL'}")
        
        if message_column['nullable']:
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ message —É–∂–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏—è")
        else:
            print("\nüîß –≠—Ç–∞–ø 2: –î–µ–ª–∞–µ–º –∫–æ–ª–æ–Ω–∫—É message nullable...")
            
            # –î–µ–ª–∞–µ–º –∫–æ–ª–æ–Ω–∫—É nullable
            if db_type == 'postgresql':
                alter_query = "ALTER TABLE broadcasts ALTER COLUMN message DROP NOT NULL"
            else:
                # –î–ª—è SQLite –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
                print("‚ö†Ô∏è SQLite —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è NOT NULL")
                return False
            
            try:
                await adapter.execute(alter_query)
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ message —Ç–µ–ø–µ—Ä—å –¥–æ–ø—É—Å–∫–∞–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏—è")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏: {e}")
                return False
        
        print("\nüîÑ –≠—Ç–∞–ø 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π —Å NULL...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        update_query = """
            UPDATE broadcasts 
            SET message = COALESCE(message_text, title, '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            WHERE message IS NULL
        """
        
        try:
            result = await adapter.execute(update_query)
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏: {e}")
        
        print("\nüîß –≠—Ç–∞–ø 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if db_type == 'postgresql':
            default_query = "ALTER TABLE broadcasts ALTER COLUMN message SET DEFAULT ''"
        else:
            print("‚ö†Ô∏è SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ DEFAULT –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫")
            default_query = None
        
        if default_query:
            try:
                await adapter.execute(default_query)
                print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ message")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        
        print("\nüìä –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        check_query = """
            SELECT 
                COUNT(*) as total_broadcasts,
                COUNT(CASE WHEN message IS NULL THEN 1 END) as null_messages,
                COUNT(CASE WHEN message = '' THEN 1 END) as empty_messages
            FROM broadcasts
        """
        
        result = await adapter.fetch_one(check_query)
        if result:
            total, nulls, empty = result
            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:")
            print(f"   - –í—Å–µ–≥–æ: {total}")
            print(f"   - –° NULL message: {nulls}")
            print(f"   - –° –ø—É—Å—Ç—ã–º message: {empty}")
        
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ message –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        try:
            await adapter.disconnect()
        except:
            pass


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await fix_broadcasts_message_column()
    
    if success:
        print("\nüîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return True
    else:
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
